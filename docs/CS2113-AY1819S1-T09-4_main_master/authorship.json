[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Financial Planner"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-T09-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-T09-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Financial Planner application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* This application is modified from FinancialPlanner-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 1,
      "-": 33
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.planner.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "//TODO: Add in Dependencies so that Travis will automatically download when running the code."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    // https://mvnrepository.com/artifact/org.apache.poi/poi"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    compile group: \u0027org.apache.poi\u0027, name: \u0027poi\u0027, version: \u00273.17\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    compile group: \u0027org.apache.poi\u0027, name: \u0027poi-ooxml\u0027, version: \u00273.17\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    // https://mvnrepository.com/artifact/org.apache.poi/poi-scratchpad"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    compile group: \u0027org.apache.poi\u0027, name: \u0027poi-scratchpad\u0027, version: \u00273.17\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml-schemas"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    compile group: \u0027org.apache.poi\u0027, name: \u0027poi-ooxml-schemas\u0027, version: \u00273.17\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    // https://mvnrepository.com/artifact/org.apache.poi/ooxml-schemas"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    compile group: \u0027org.apache.poi\u0027, name: \u0027ooxml-schemas\u0027, version: \u00271.1\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    // https://mvnrepository.com/artifact/org.apache.poi/poi-excelant"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    compile group: \u0027org.apache.poi\u0027, name: \u0027poi-excelant\u0027, version: \u00273.17\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    // https://mvnrepository.com/artifact/org.apache.poi/poi-contrib"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    compile group: \u0027org.apache.poi\u0027, name: \u0027poi-contrib\u0027, version: \u00273.6\u0027"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    // https://mvnrepository.com/artifact/org.apache.poi/poi-examples"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    compile group: \u0027org.apache.poi\u0027, name: \u0027poi-examples\u0027, version: \u00273.9\u0027"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/planner/**\u0027"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/planner/ui/**\u0027"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/planner/ui/**\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027FinancialPlanner-Level4\u0027,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 26,
      "-": 247
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Financial Planner - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-T09-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ". Run the `seedu.expense.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/expense/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `FinancialPlannerChangedEvent` when the Financial Planner data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/expense/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/expense/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "link:{repoURL}/src/main/java/seedu/expense/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `FinancialPlannerParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/expense/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Financial Planner data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Financial Planner`, which `Record` can reference. This would allow `Financial Planner` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/expense/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the RecordList data in xml format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the LimitList data in xml format and read it back."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedFinancialPlanner`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `FinancialPlanner` with an undo/redo history, stored internally as an `financialPlannerStateList` and"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "`currentStatePointer`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedFinancialPlanner#commit()` -- Saves the current expense book state in its history."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedFinancialPlanner#undo()` -- Restores the previous expense book state from its history."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedFinancialPlanner#redo()` -- Restores a previously undone expense book state from its history."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitFinancialPlanner()`,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "`Model#undoFinancialPlanner()` and `Model#redoFinancialPlanner()` respectively."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedFinancialPlanner` will be initialized with"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "the initial expense book state, and the `currentStatePointer` pointing to that single expense planner state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the expense book. The `delete` command calls"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "`Model#commitFinancialPlanner()`, causing the modified state of the expense book after the `delete 5` command executes"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "to be saved in the `financialPlannerStateList`, and the `currentStatePointer` is shifted to the newly inserted expense book state."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "`Model#commitFinancialPlanner()`, causing another modified expense book state to be saved into the"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "`financialPlannerStateList`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitFinancialPlanner()`, so the expense book state will"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "not be saved into the `financialPlannerStateList`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` command. The `undo` command will call `Model#undoFinancialPlanner()`, which will shift the `currentStatePointer`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "once to the left, pointing it to the previous expense book state, and restores the expense book to that state."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial expense book state, then there are no previous"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "expense book states to restore. The `undo` command uses `Model#canUndoFinancialPlanner()` to check if this is the case."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoFinancialPlanner()`, which shifts the `currentStatePointer`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "once to the right, pointing to the previously undone state, and restores the expense book to that state."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `financialPlannerStateList.size() - 1`, pointing to the latest expense book"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "state, then there are no undone expense book states to restore. The `redo` command uses `Model#canRedoFinancialPlanner()`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the expense book, such as"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "`list`, will usually not call `Model#commitFinancialPlanner()`, `Model#undoFinancialPlanner()` or"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "`Model#redoFinancialPlanner()`. Thus, the `financialPlannerStateList` remains unchanged."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitFinancialPlanner()`. Since the `currentStatePointer` is not pointing at the end of the `financialPlannerStateList`, all expense book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire expense book."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of expense book states."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedFinancialPlanner`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "// tag:list[]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tztzt"
        },
        "content": "\u003d\u003d\u003d Sort records feature"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tztzt"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "The sort mechanism is facilitated by `ModelManager`. It extends `FinancialPlanner` with a component that sorts the"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "internal list of records. SortCommand calls `ModelManager#sortFilteredRecordList` and passes in the category to be"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "sorted by and the sort order."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tztzt"
        },
        "content": "This feature has one keyword `sort` and takes in arguments of either category or order of sort. Keywords are not"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tztzt"
        },
        "content": "case sensitive."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tztzt"
        },
        "content": "Category can be either of the following keywords:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tztzt"
        },
        "content": "* `name` - To sort in lexicographical order by the name attribute of the record"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tztzt"
        },
        "content": "* `date` - To sort by the date attribute of the record"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tztzt"
        },
        "content": "* `money`/`moneyflow` - To sort by the expenditure or income of the record"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tztzt"
        },
        "content": "Order can be either of the following keywords:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tztzt"
        },
        "content": "* `desc` - To sort in descending order"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tztzt"
        },
        "content": "* `asc` - To sort in ascending order"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tztzt"
        },
        "content": "This feature has 2 different kind of modes as follows:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tztzt"
        },
        "content": ". Single Argument Mode - Input argument can be either the category or the order of sort"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tztzt"
        },
        "content": "* If category specified, records are sorted in ascending order of that category"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tztzt"
        },
        "content": "* If order specified, records will be sorted by name in the specified order"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tztzt"
        },
        "content": ". Duo Argument Mode - Input arguments must contain only 1 category and only 1 order, and can be input in no particular order"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tztzt"
        },
        "content": "The input given by the user is passed to `SortCommandParser` to split the input separated by whitespaces to ensure"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "there is either only one or two arguments input by the user. These arguments are stored in an array of strings and"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tztzt"
        },
        "content": "the size of the array determines the mode of the command."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tztzt"
        },
        "content": "The strings are compared to two sets of strings containing the supported categories and orders of the function."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tztzt"
        },
        "content": "The string of the category and a boolean representing whether the records are to be reversed will then be passed to"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tztzt"
        },
        "content": "`ModelManager` to sort the records."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Since the displayed list in the UI is a `FilteredList` which is a wrapper for the underlying list `UniqueRecordList` structure,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "sorting the internal list of records in `versionedFinancialPlanner` will post an event that notifies the UI to update"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "the displayed list."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tztzt"
        },
        "content": "The following sequence diagram shows how the sort operation works:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tztzt"
        },
        "content": "image::SortSequenceDiagram.png[width:800]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d List history feature"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "The list mechanism is facilitated by `ModelManager`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "It represents an in-memory model of the FinancialPlanner and is the component which manages the interactions between the commands and the `VersionedFinancialPlanner`."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "ListCommand calls `ModelManager#updateFilteredRecords` and passes in different predicates depending on the argument mode."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "This feature has only one keyword `list` but implements 3 different argument modes to allow users to access multiple versions of the same command."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "The three argument modes are as listed below:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* No Argument mode -- Requires no arguments and returns the entire list of records in the FinancialPlanner."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* Single Argument mode -- Requires a single date and returns all records containing that date"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* Dual Argument mode -- Requires 2 dates, a `start date` and an `end date`. It returns all records containing dates within the time frame of start date and end date, inclusive of both start date and end date"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "The mechanism that facilitates these modes can be found in the `ListCommandParser#parse`. Below is a overview of the mechanism:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ". The input given by the user is passed to `ArgumentTokeniser#tokenise` to split the input separated by prefixes."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ". This returns a `ArgumentMultiMap` which contains a map with prefixes as keys and their associated input arguments as the value."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ". The string associated with `d/` is then passed into `ListCommandParser#splitByWhitespace` for further processing and returns an array."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ". The argument mode is determined by the size of this array and the elements are further processed into `Date` objects, before creating and returning a `ListCommand` object."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "The `ListCommand` has two constructors which makes use of overloading to reduce code complexity."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "* One constructor has no arguments and assigns default predicate for the `FilteredList` in `ModelManager`,"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "`PREDICATE_SHOW_ALL_RECORDS` which will show all items in the list."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* The second constructor takes in 2 `Date` arguments and assigns the predicate `DateIsWithinDateIntervalPredicate` which will only show items within the date interval."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the list operation works:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "image::ListSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "For simplicity, interactions with the UI is not shown in the diagram above. +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "The update of the UI `RecordListPanel` is done through the event system. `FilteredList` is a type of ObservableList"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "implemented by the Java 8 API and it will propagate any changes to the list to any listeners listening to it. This"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "listener is present in `RecordListPanel` and will update the UI list automatically."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Find records by tag feature"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "The findtag mechanism is also facilitated by `ModelManager`. FindTagCommand calls `ModelManager#updateFilteredRecords`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "and passes in different predicates depending on the input by the user."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "This feature has only one keyword `findtag` and a single working mode which takes in any number of input arguments. The"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "input given by the user is passed to `FindTagCommandParser#parse` to split the desired tags the user wants to search by"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "into an array of strings. The array of strings is passed into `TagsContainsKeywordsPredicate` to create the predicate"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "for `updateFilteredRecordList` required in `ModelManager`."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "In `TagsContainsKeywordsPredicate`, to compare for a match, every keyword in the array is compared"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "against the set of tags of each record and as long as any tag matches any of the keywords,"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "the predicate will evaluate to true and allows the `FilteredList` to filter out the records that do not fulfil the"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "predicate."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "`FindTagCommandParser` returns a `FindTagCommand` object which calls `updateFilteredRecordList` to set the new predicate"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "and obtain a new `filteredRecords` based on the predicate, which will also trigger an event for the UI to read in and display the new records."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the limit operation works:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindTagSequenceDiagram.png[width:800]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Limit feature"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "The limit command is based on the data type \"Date\", which includes two dates and moneyFlow."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Once the user execute the limit command, the program will read all the records from the memory."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "The user need to input two dates, the first one is start date while the second one is end date."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "And the user also need to input the limit money they want to set. The user enter two dates after the"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "one \"d/\" index followed by money with m/ index."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "The input given by the user is passed to `ArgumentTokeniser#tokenise` to split the input separated by prefixes."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ". This returns a `ArgumentMultiMap` which contains a map with prefixes as keys and their associated input arguments as the value."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ". The string associated with `d/` is then passed into `LimitCommandParser#splitByWhitespace` for further processing and returns an array."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "This string will be split into two strings and each of them will be construct as a date type variable"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ". The argument mode is determined by the size of this array and the elements are further processed into `Date` objects, before creating and returning a `ListCommand` object."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the limit operation works:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "image::LimitSequenceDiagram.png[width:800]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Delete By Date Entry"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "The delete by date entry mechanism is facilitated by `ModelManager`."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "It represents an in-memory model of the FinancialPlanner and is the component which manages the interactions between the commands and the `VersionedFinancialPlanner`."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteByDateEntryCommand calls `ModelManager#getFilteredRecordList`."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "This feature has only one keyword `delete_date` and implements only 1 argument mode."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "The three argument modes are as listed below:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* Single Argument mode -- Requires only one date. It exports all records whose date is required and shows all records exported in the Financial Planner."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "The mechanism that facilitates these modes can be found in the `DeleteByDateEntryCommandParser#parse`. Below is a overview of the mechanism:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* The argument mode is determined and is further processed into `Date` objects, before creating and returning a `DeleteByDateEntryCommand` object."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the list operation works:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteByDateEntrySequenceDiagram.png[width:800]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Export into Excel file"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "The export into excel file mechanism is facilitated by `ModelManager`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "It represents an in-memory model of the FinancialPlanner and is the component which manages the interactions between the commands and the `VersionedFinancialPlanner`."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "ExportExcelCommand calls `ModelManager#updateFilteredRecords` and passes in different predicates depending on the argument mode."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "This feature has only one keyword `export_excel` but implements 3 different argument modes to allow users to access multiple versions of the same command."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "The three argument modes are as listed below:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "* No Argument mode -- It requires no arguments and exports the entire list of records in the FinancialPlanner and shows all the records in the Financial Planner."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "* Single Argument mode -- Requires only one date. It exports all records whose date is required and shows all records exported in the Financial Planner."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "* Dual Argument mode -- Requires 2 dates, a `start date` and an `end date`. It exports all records containing dates within the time frame of start date and end date, inclusive of both start date and end date and shows all records exported in the Financial Planner."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "The mechanism that facilitates these modes can be found in the `ExportExcelCommandParser#parse`. Below is a overview of the mechanism:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "* The string associated is passed into `ExportExcelCommandParser#splitByWhitespace` for further processing and returns an array."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "* The argument mode is determined by the size of this array and the elements are further processed into `Date` objects, before creating and returning a `ExportExcelCommand` object."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "The `ExportExcelCommand` has two constructors which makes use of overloading to reduce code complexity."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "* One constructor has no arguments and assigns default predicate for the `FilteredList` in `ModelManager`,"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "`PREDICATE_SHOW_ALL_RECORDS` which will show all items in the list."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "* The second constructor takes in 2 `Date` arguments and assigns the predicate `DateIsWithinDateIntervalPredicate` which will only show items within the date interval."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the list operation works:"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "image::ExportExcelSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "For simplicity, interactions with the UI is not shown in the diagram above. +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "The update of the UI `RecordListPanel` is done through the event system. `FilteredList` is a type of ObservableList"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "implemented by the Java 8 API and it will propagate any changes to the list to any listeners listening to it. This"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "listener is present in `RecordListPanel` and will update the UI list automatically."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Data structure to support listing of records"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Uses a FilteredList that is tracked by the UI. FilteredLIst is a wrapper around the ObservableList\u003cRecord\u003e that is stored in UniquePersonList which allows for any changes in the observable list to be propagated to the filtered list automatically."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May take a significantly longer time to list records if there are many records spanning across a large timeframe."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Implement a HashMap with Date as the key and Record as the value."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Allows for constant time complexity to access any elements. Hence, listing records can potentially be faster."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Current UI implementation relies on `FilteredList`. In order for UI to be compatible with the new data structure, the UI may need to change its implementation to `ObservableMap` instead. Alternatively, one can utilise a `HashMap` to first generate the list and pass the list reference into `FilteredList`. However, there is a need to code a filter function."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.expense.ui` package."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "e.g. `seedu.expense.commons.StringUtilTest`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "e.g. `seedu.expense.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "e.g. `seedu.expense.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/expense/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Financial Planner depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/expense/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/expense/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/expense/logic/parser/FinancialPlannerParser.java[`FinancialPlannerParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/expense/logic/parser/FinancialPlannerParser.java[`FinancialPlannerParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the expense book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the expense book."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/expense/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/expense/model/FinancialPlanner.java[`FinancialPlanner`] API need to be updated."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/expense/model/FinancialPlanner.java[`FinancialPlanner`] and link:{repoURL}/src/main/java/seedu/expense/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/expense/model/FinancialPlanner.java[`FinancialPlanner`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/expense/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/expense/model/FinancialPlanner.java[`FinancialPlanner`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/expense/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/expense/model/ModelManager.java[`ModelManager`] should call `FinancialPlanner#removeTag(Tag)`."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your expense book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/expense/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/expense/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/expense/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/expense/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/expense/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/expense/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/expense/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/expense/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/expense/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/FinancialPlannerSystemTest.java[`FinancialPlannerSystemTest#assertCommandBoxShowsDefaultStyle() and FinancialPlannerSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/expense/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the expense book."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/expense/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the expense book is updated."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/expense/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/expense/ui/StatusBarFooter.java[`StatusBarFooter#handleFinancialPlannerChangedEvent(FinancialPlannerChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/FinancialPlannerSystemTest.java[`FinancialPlannerSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the expense book to the cloud. However, the current implementation of the application constantly saves the expense book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the expense book storage."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupFinancialPlanner(ReadOnlyFinancialPlanner)`, so that the expense book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/expense/storage/FinancialPlannerStorage.java[`FinancialPlannerStorage`] interface."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/expense/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/expense/storage/XmlFinancialPlannerStorage.java[`XmlFinancialPlannerStorage`] class."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/expense/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/expense/logic/parser/FinancialPlannerParser.java[`FinancialPlannerParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/expense/logic/parser/FinancialPlannerParserTest.java[`FinancialPlannerParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/expense/logic/parser/FinancialPlannerParser.java[`FinancialPlannerParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/expense/logic/parser/FinancialPlannerParserTest.java[`FinancialPlannerParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/expense/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/expense/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/expense/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/expense/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/expense/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/expense/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/expense/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `financialPlanner.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/expense/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonFinancialPlanner.xml`, `typicalPersonsFinancialPlanner.xml`, `validFinancialPlanner.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/expense/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/expense/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/expense/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/expense/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/expense/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/expense/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/expense/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* * *` |user |be able to input my expenses and income along with a timestamp with options (daily, monthly or yearly) | record how much I am spending"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* * *` |user |be able to delete existing entries |edit my mistakes in the future"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* * *` |user |be able to see the history of my expenses |Can keep track of my expense"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* * *` |user |be able to create a limit for my daily expenses | stop myself from overspending"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* * *` |user |be able to undo |Revert any unwanted changes"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "|`*` |user with many persons in the expense book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* * *` |user |be able to clear history |to reduce the clutter in the app"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* * *` |user |be able to see a summary expenditure of each category | see the areas where I am spending the most"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* * *` |new user |see usage instructions | refer to instructions when i forget how to use the app"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* * *` |user |access the history within a few seconds | do not have the time to wait for the app to update"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* * *` |advanced user |add notes to each expense | know where my money went"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* * ` |advanced user |be able to freely edit the tags | define my own categories"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* *` |user |be able to tag my expenses with a category|To figure out in which part money spent on."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* *` |advanced user |export my expenses into other forms |log it and store it in a place different from the app"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* *` |user |search based on the categories |monitor the expenditure in a specific category"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* *` |user | search based on a time period|observe spending during different time periods, e.g holidays, school period"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* *` |advanced user |plan out my future expenses | allocate money properly, to ensure I can make my payments"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* *` |user |have a visual representation of my spending habits |have a better idea of my expenditures"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* *` |user |record parties to make payment to |allocate money and ensure I do not owe anyone"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* *` |user |be able to edit my expenses |correct any mistakes when checking my accounts"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* *` |user |view balances in bank accounts |keep track of my bank savings or current without having to login to accounts"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`* *` |user |a nice representation of the categories |have a better idea of the expenses in each category"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`*` |user |hide private details by default | minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`*` |user |a secure place to store my expense records |keep my financial data safe"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "|`*` |user |archive my old expenses history |look back at my expenses history whenever I need it"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `FinancialPlanner` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d 1.  Use case: Input expense for a certain activity. [Vincent]"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "1.  User requests to insert a spending amount"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "2.  FinancialPlanner requests the amount of money"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "3.  User enters the amount of money spent"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "4.  FinancialPlanner requests for confirmation from user."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "5.  User confirms the amount."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "6.  FinancialPlanner requests the description of the item/activity that money was spent on"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "7.  User enters the description of the item he spent on"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "8.  FinancialPlanner requests for confirmation from user."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "9.  User confirms the description."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "10. FinancialPlanner processes the input and stores the information."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "11. FinancialPlanner shows the status update of the operation."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3a. User’s input is of invalid form."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    FinancialPlanner throws invalid format error and shows the format needed."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 5a. User declines the confirmation."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 2."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 7a. User’s input is of invalid form."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid format error."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 6."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 9a. User declines the confirmation."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 6."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "\u003d\u003d\u003d 2.  Use case: Delete expense entry whose date is required. [Linh Chi]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "1.  User requests to delete records whose date is required."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "2.  FinancialPlanner requests for date of entry to be deleted."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "3.  User enters the date entry he/she wants to delete."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "4.  FinancialPlanner entry confirms date to be deleted."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "5.  User confirms the deletion"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "6.  FinancialPlanner deletes the entry"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 1a. There are no entries to be delete."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws no entry error."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use Case Ends"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3a. User’s input is invalid."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid format error and shows format needed."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 2."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3b. User’s input date has no entries"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws no entry error."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 2."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 4a. User’s input is not a valid entry."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid data error and resumes at step 4."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 5a. User declines the confirmation."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 3."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d 3.  Use case: See history of expenses for a certain period [Vincent]"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to see history within a certain date period."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "2.  FinancialPlanner returns the history of all expenses within the period."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User’s command is of invalid form."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "** FinancialPlanner throws invalid command error."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "** Use case resumes at step 1."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User does not specify any arguments."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "** FinancialPlanner returns all records in the FinancialPlanner."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. The arguments are of incorrect format"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "** FinancialPlanner throws invalid command error and shows an example of a correct command"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "** Use case resumes at step 1."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. There is no history."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "** FinancialPlanner shows a blank list."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "\u003d\u003d\u003d 4.  Use case: Clear history of expenses"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "1.  User requests to clear history of expenses."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "2.  FinancialPlanner requests for period of time of expenses to clear."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "3.  User enters period of time to clear expenses for."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "4.  FinancialPlanner deletes all entries within specific time period."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3a. User’s input is not a valid period of time"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid input command"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case continues from step 2"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "\u003d\u003d\u003d 5.  Use case: Plan the total expenses for a period of time"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "1.  User requests to plan expenses"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "2.  FinancialPlanner requests for amount of money to be allocated"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "3.  User inputs amount of money"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "4.  FinancialPlanner requests for period of time for amount of money to be allocated"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "5.  User inputs period of time"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "6.  FinancialPlanner records amount of money for time period specified."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3a User’s input is not a valid amount of money"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid input command"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case continues from step 2"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 5a User’s input is not a valid period of time"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid input command"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case continues from step 4"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d 6.  Use case: Search expenses based on category [Zhi Thon]"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "1.  User requests to search for expenses by category"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "2.  FinancialPlanner requests for category of expenditure"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "3.  User enters category desired"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "4.  FinancialPlanner displays each expenditure with name category and the total expenditure."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3a User’s input category cannot be found."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner shows no expenditure for selected category"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d 7.  Use case: Summary of expenditure by category [Vincent]"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "1.  User requests for Expenditure summary"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "2.  FinancialPlanner requests for date of entry the user want to see"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "3.  User enters the date they want to see"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "4.  FinancialPlanner requests for confimation from the user"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "5.  User confirms the date"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "6.  FinancialDisplay displays the list of catrgories expenditure."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3a. User’s input is of invalid form."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid format error and shows the format needed."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 2."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "\u003d\u003d\u003d 8.  Use case: Usage Instructions guide"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "1.  User requests for usage instructions"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "2.  FinancialPlanner displays different commands"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "3.  User inputs which command he wants to find out about"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "4.  Financial displays infomration on selected command"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3a User enter invalid command"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid command error."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 2."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "\u003d\u003d\u003d 9.  Use case: Undo expense entry"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "1.  User requests for undo"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "2.  FinancialPlanner confirms the undo request"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "3.  User enter the item they would like to undo"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "4.  FinancialPlanner undo the deleted item"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3a User enter invalid command"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid command error."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 2"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "\u003d\u003d\u003d 10. Use case: Add notes to each expense"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "1.  User requests for adding notes"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "2.  Financial Planner request for the date of entry and confirm the request"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "3.  User enter the notes"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3a User enter invalid command"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid command error."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 2"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d 11. Use case: Create daily limit for expenses [Oscar]"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "1.  User requests to create daily limit for expenses"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "2.  FinancialPlanner requests for the maximum amount for the day"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "3.  User enters the amount."
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "4.  FinancialPlanner confirms amount with user."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "5.  User confirms the amount."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "6.  FinancialPlanner records the amount in the hard drive"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 6a. The location for the record is invalid."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid location error and prompts for new location."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** User enters a new location."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner requests for confirmation."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** User confirms the location"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "\u003d\u003d\u003d 12. Use case: Export expenses into another format"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "1.  User requests export format."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "2.  FinancialPlanner shows list of possible formats for export."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "3.  User enters preferred export format."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "4.  FinancialPlanner exports the file in specified format."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3a User input unsupported file format"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws unsupported format error"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 2."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "\u003d\u003d\u003d 13. Use case: Freely edit expenses tags"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "1.  User requests to edit expenses tags."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "2.  FinancialPlanner requests for date of entry to edit tags"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "3.  User enters date to edit entry for"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "4.  FinancialPlanner shows list of entries on specified date"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "5.  User enters entry to edit."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "6.  FinancialPlanner shows current tags of selected entry."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "7.  User enters tag to remove"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "8.  FinancialPlanner removes tag entered."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3a User inputs invalid date"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid date error."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 2."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 3b Date input has no entries to edit"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws no entry error."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** Use case resumes at step 2."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 5a User’s input is not a valid entry."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner throws invalid data error and resumes at step 4."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 5a User’s input entry has no tags."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner displays ‘No tags’ and continues to step 7."
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* 7a User’s input tag does not exist"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "** FinancialPlanner adds tag to entry."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "tztzt": 37,
      "nguyenngoclinhchi": 287,
      "oscarzeng": 37,
      "-": 1103
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Financial Planner - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-T09-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `T09-4`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FinancialPlanner (FP) is for those who *prefer to use a desktop app for managing their finances*. More"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "importantly, FP is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "having the benefits of a Graphical User Interface (GUI). If you can type fast, FP can get your finance management"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Financial Planner."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all records"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/Grocery shoppings m/-70 d/20-9-2018 t/Shopping` : adds a contact named `Grocery shopping` to the Financial Planner."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd record shown in the current list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "which can be used as `add n/Grocery shopping`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Grocery shopping t/friend` or as"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`n/Grocery shopping`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "(i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME m/MONEYFLOW`, `m/MONEYFLOW n/NAME` is also acceptable."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a record: `add`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a record to the FinanceBook +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME d/DATE m/MONEYFLOW [t/TAG]...` +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "MONEYFLOW denotes the money parameter of the financial activity. It can be either a debit(expense) or a credit(income)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "To distinguish between an expense and an income, the user will need to enter a plus \"+\" or minus \"-\" sign before the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "money amount. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Typical format for a MONEYFLOW parameter :"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "** Typical example of *expense*: add n/PhoneBill d/24-9-2018 m/*-4.50*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "** Typical example of *income*: add n/Allowance d/24-9-2018 m/*+50.00*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "A record can have any number of tags (including 0)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/PaymentToJohn d/20-8-2018 m/-10`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/PaymentFromBetty t/friend m/+10 d/10-11-2018 t/classmate`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all records satisfying some criteria : `list`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all records in the record book which fulfills a certain criteria. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "There are 3 modes, default mode, single argument mode and dual argument mode. +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Default mode: `list` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Single argument mode: `list d/DATE` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Dual argument mode: `list d/START_DATE END_DATE`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* The default mode will list down all records in the Financial Planner. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* The single argument mode will list down all records with the date equal to DATE specified in the format. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* The dual argument mode will list down all records with date equal to or later than START_DATE"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "and earlier than or equal to END_DATE +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* `list d/10-11-2018`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* `list d/10-11-2018 11-11-2018`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "\u003d\u003d\u003d Adding a limit: `limit` [Oscar]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "Adds a limit to the FinancialPlanner +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "Format: `limit d/DATE_START DATE_END m/MONEYFLOW` +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "DATE_START and DATE_END indicates the starting date and ending date for the limit."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "MONEYFLOW denotes the money limit for that period of time. It only contains number(without \"-\" or \"+\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "which indicates that during this period of time,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "the program will warn the user once the total money spend exceeds the limit money."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "For each period of time, there is only one limit. If there is a limit which has the same"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "dates with the input, the program will throw error."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "Once the limit has been set, the program will keep updating the latest information about"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "each limit."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "* Typical format for a Limit MONEYFLOW parameter :\"100\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "** Typical example of *expense*: limit d/24-9-2018 25-9-2018 m/*100*"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "****"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "The Limit MONEYFLOW can not be negative number."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "* `limit d/20-8-2018 30-8-2018 m/100`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "\u003d\u003d\u003d Deleting a limit: `deleteLimit` [Oscar]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "Adds a limit to the FinancialPlanner +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "Format: `deleteLimit d/DATE_START DATE_END +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "The DATE_START and DATE_END are the two elements for limit searching. Since all the limits have"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "unique dates, once user input the two dates, the limit with same dates inside the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "limit list will be deleted. If there is no limit sharing the same dates, it will throw error."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "* `deleteLimit d/20-8-2018 30-8-2018`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "\u003d\u003d\u003d Editing a limit: `editLimit` [Oscar]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "Edit a limit to the FinancialPlanner +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "Format: `editLimit d/DATE_START DATE_END m/MONEYFLOW` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "This command will edit an existing limit inside the limit list according to the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "two dates. The newly input Money will replace the original money limit. If there is no limit"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "for that period of time, the program will return error."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "* Typical format for a Limit MONEYFLOW parameter :\"200\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "** Typical example of *expense*: editLimit d/24-9-2018 25-9-2018 m/*200*"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "The editLimit MONEYFLOW can not be negative number."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "* `editLimit d/20-8-2018 30-8-2018 m/200`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Sorting displayed records : `sort`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Sorts the list of records in the record book by a category."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "There are 3 categories to sort by `name`, `date`, `moneyflow`/`money` either in ascending order `asc` or"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "descending order `desc`. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `sort [CATEGORY] [ORDER]`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the abovementioned keywords for category and order are supported."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* Keyword matching is case insensitive, e.g `sort Name Desc` will work the same as `sort name desc`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* Sorts the list of records and updates the displayed list of records."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* At most one of each optional field is to be provided."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* If only a category is specified, the records are sorted in ascending order of that category."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* If only a sort order is specified, the records are sorted by name in that order."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* `sort date` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Sorts the list of records by date in ascending order."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* `sort desc` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Sorts the list of records by name in descending order."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* `sort name asc` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Sorts the list of records by name in ascending order."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* `sort moneyflow desc` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Sorts the list of records by moneyflow in descending order."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a record : `edit`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing record in the expense book. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [m/MONEYFLOW] [d/DATE] [t/TAG]...`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the record at the specified `INDEX`. The index refers to the index number shown in the displayed record list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the record will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the record\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 m/+33 d/28-2-2018` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the money flow and date of the 1st record to be `+33` and `28-2-2018` respectively."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Shopping for clothes t/` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd record to be `Shopping for clothes` and clears all existing tags."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating records by name: `find`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Finds records whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* Records matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Family` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `dinner with family` and `family party`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* `find family food shopping` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Returns all records having `family`, `food`, or `shopping` in their name"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating records by tag: `findtag`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Finds records with tags that match any of the given keywords. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `findtag KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the tags are searched."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Records with tags matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `findtag friend` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any record tagged with `friend`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `findtag friend food shopping` +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Returns all records having any of the tags `friend`, `food`, or `shopping`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a record : `delete`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified record from the expense book. +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the record at the specified `INDEX`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed record list."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd record in the expense book."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Dinner` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st record in the results of the `find` command."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Delete records in same date. `delete_date`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Deletes the records whose date is required from the expense book. +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Format: `delete_date dd-mm-yyyy`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "****"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* Deletes the record at the specified `DATE`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* The DATE refers to the Date the user keyed in, which is shown in the displayed list."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "* The Date must follow the format: dd-mm-yyyy or dd-m-yyyy, and should be valid."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "****"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete_date 31-03-1999` +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "Deletes the records whose date is 31-03-1999."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Export the records into the Excel file. `export_excel`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Exports the records into the Excel file. +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "There are 3 modes, default mode, single argument mode and dual argument mode. +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "* Default mode: `export_excel` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* Single argument mode: `export_excel DATE` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "* Dual argument mode: `export_excel d/START_DATE END_DATE`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* The default mode will list down all records in the Financial Planner and exports all the records in the Excel file. +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* The single argument mode will list down all records with the date equal to DATE specified in the format and exports all shown records in the Excel file. +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* The dual argument mode will list down all records with date equal to or later than START_DATE"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "and earlier than or equal to END_DATE and exports all shown records in the Excel file. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* `export_excel`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* `export_excel 31-3-1999`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "* `export_excel 31-3-1999 31-03-2019`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Showing a summary table of all financial activity in a given time: `summary`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a summary table listing each day or month within a given time specified by the user. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "A `summary` is an item that contains information on the *date or month that is represented*, the *total expense calculated*, the *total income calculated* and"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "the *net money flow calculated.* +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "The summary command supports both listing by date and by month. +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* By Date: `summary date d/START_DATE END_DATE`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* By Month: `summary month d/START_MONTH END_MONTh`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* Note that there are specific formats required for the dates and months entered."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* For *summary by date*, START_DATE/END_DATE must be in the format of"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "`dd-mm-yyyy` where `dd` represents day, `mm` represents month, `yyyy` represents year. All parameters should be specified in numerical form."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* For *summary by month*, START_MONTH/END_MONTH must in the format of `mmm-yyyy`, `mmm` represents the month with its three letter representations, and"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "`yyyy` represents the year in its numerical form."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* Note that for mmm, it is case-insensitive, meaning both *\"APR\"* and *\"apr\"* are accepted"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* `summary date d/1-1-2018 12-12-2018`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* `summary month d/apr-2018 sep-2018`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* `summary month d/APR-2018 SeP-2018`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "The screenshots below are examples of what you can see once the command has been accepted."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiSummaryByDateTable.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Screenshot of app when `summary date d/1-1-2018 12-12-2018` is run"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiSummaryByMonthTable.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "Screenshot of app when `summary month d/apr-2018 sep-2018` is run"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Showing a breakdown of total expenses and income into categories: `stats`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a breakdown of total expenses and income into categories and displays these information in a pie chart. +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Format:`stats d/START_DATE END_DATE`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* START_DATE/END_DATE follow the same configurations as date parameters required when adding records. It is in the form of"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "*dd-mm-yyyy* where *dd* represents day, *mm* represents month and *yyyy* represents the year. *dd* and *mm* both require 1 to 2 digits while"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "*yyyy* requires exactly 4 digits."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Once the command has been executed, 2 tabs will appear showing a pie chart containing data that is relevant in the range. +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "Note that due to label constraints, some labels may not be displaying correctly if they are overlapping with other labels. This happens when the pie slice"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "is too small. To improve readability, we have decided to hide some labels in such scenarios."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* `stats d/1-1-2018 12-12-2018`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Below are some screenshots of what you can see when the command has been accepted."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiPieChartExpense.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Screenshot of app displaying expense breakdown when `stats d/1-1-2018 12-12-2018` is run"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiPieChartIncome.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "Screenshot of app displaying income breakdown when `stats d/1-1-2018 12-12-2018` is run"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a record : `select`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the record identified by the index number used in the displayed record list. +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the record and loads the Google search page the record at the specified `INDEX`."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed record list."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd record in the expense book."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Dinner` +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st record in the results of the `find` command."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the expense book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the expense book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the expense book. +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "Financial Planner data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Financial Planner folder."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME d/DATE m/MONEYFLOW [t/TAG]...` +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/Dinner with family d/20-12-2017 m/-10 t/food t/family`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list [d/DATE] [DATE]` +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ".  `list`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ". `list d/20-12-2017`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ". `list d/20-12-2017 31-09-2018`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `select 2`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find Tag* : `findtag KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `findtag friend`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 13,
      "oscarzeng": 53,
      "-": 446
    }
  },
  {
    "path": "src/main/java/seedu/planner/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.FinancialPlanner;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.DateBasedLimitList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.storage.FinancialPlannerStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.storage.XmlFinancialPlannerStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FinancialPlanner ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        FinancialPlannerStorage financialPlannerStorage \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlFinancialPlannerStorage(userPrefs.getFinancialPlannerFilePath(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                        userPrefs.getFinancialPlannerLimitFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(financialPlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s financial planner and {@code userPrefs}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample financial planner will be used instead if {@code storage}\u0027s"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * financial planner is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty financial planner will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code storage}\u0027s financial planner."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyFinancialPlanner\u003e financialPlannerOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Optional\u003cDateBasedLimitList\u003e limitListOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyFinancialPlanner initialData;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            financialPlannerOptional \u003d storage.readFinancialPlanner();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!financialPlannerOptional.isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FinancialPlanner\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d financialPlannerOptional.orElseGet(SampleDataUtil::getSampleFinancialPlanner);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            limitListOptional \u003d storage.readLimitList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            if (!limitListOptional.isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample LimitList\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                initialData.setLimitList(limitListOptional.get());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FinancialPlanner\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new FinancialPlanner();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FinancialPlanner\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new FinancialPlanner();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FinancialPlanner\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting FinancialPlanner \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Financial Planner ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 11,
      "-": 215
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            \"Unknown command.\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String MESSAGE_INVALID_RECORD_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            \"The record index provided is invalid.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_RECORD_DISPLAYED_DATE \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            \"The record date provided is non-existent.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String MESSAGE_RECORDS_LISTED_OVERVIEW \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            \"%1$d records listed!\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String MESSAGE_SUMMARY_MONEYFLOW_OVERVIEW \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            \"Total money spent/received: %1$.2f.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_REQUIRED \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            \"Please enter exact TWO Dates, Start_Date and End_Date.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String MESSAGE_INVALID_STARTDATE_ENDDATE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            \"Please enter the Start_Date smaller than or equal to the End_Date.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String MESSAGE_EXCEL_FILE_WRITTEN_SUCCESSFULLY \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            \"The Excel file named %1$s has been written successfully.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_LIMITS_DO_NOT_EXIST \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            \"There is no limit for that period of date\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 18,
      "oscarzeng": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/model/SummaryMapChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/** Indicates that the summary map in the model has been changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class SummaryMapChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyFinancialPlanner data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public SummaryMapChangedEvent(ReadOnlyFinancialPlanner summaryMap) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d summaryMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return \"number of dates included in summary: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 4,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/ShowPieChartStatsEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.CategoryStatistic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * An event that requests the pie chart panel to be displayed and created"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class ShowPieChartStatsEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public final ObservableList\u003cCategoryStatistic\u003e data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public ShowPieChartStatsEvent(ObservableList\u003cCategoryStatistic\u003e data) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 17,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/ShowSummaryTableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.ui.SummaryEntry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * An event that requests to show the summary display"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class ShowSummaryTableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public final ObservableList\u003cSummaryEntry\u003e data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public ShowSummaryTableEvent(ObservableList\u003cSummaryEntry\u003e data) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 17,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/UpdateWelcomePanelEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.CategoryStatistic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * Indicates a request to update the welcome panel with new information"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class UpdateWelcomePanelEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public final ObservableList\u003cCategoryStatistic\u003e data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public UpdateWelcomePanelEvent(ObservableList\u003cCategoryStatistic\u003e data) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return String.format(\"Updated the welcome panel with information on this month! %d records tracked!\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                data.size());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 18,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/DateUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to determine whether a calendar parameter is logical or not"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cInteger\u003e maxDaysInEachMonth \u003d Arrays.asList(31, 28, 31, 30, 31, 30,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            31, 31, 30, 31, 30, 31);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function checks whether the given day and month falls within the constraints of modern calendars"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidDate(int day, int month) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (month \u003e maxDaysInEachMonth.size()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return day \u003c\u003d maxDaysInEachMonth.get(month - 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function compares month1 and month2 and returns an integer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * If month1 is earlier than month2, it returns -1."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * If month1 is later than month2, it returns 1."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * If month1 is equal to month2, it returns 0."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static int compareMonth(Month month1, Month month2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (month1.getYear() \u003c month2.getYear()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (month1.getYear() \u003d\u003d month2.getYear()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (month1.getMonth() \u003c month2.getMonth()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (month1.getMonth() \u003d\u003d month2.getMonth()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    //@@author tenvinc"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Generates a {@code Date} based on the first day of the given month"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static Date generateFirstOfMonth(Month month) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String dateString \u003d \"1\" + String.format(\"-%d-%d\", month.getMonth(), month.getYear());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new Date(dateString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Generates a {@code Date} based on the last day of the given month"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static Date generateLastOfMonth(Month month) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String dateString \u003d maxDaysInEachMonth.get(month.getMonth() - 1).toString()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + String.format(\"-%d-%d\", month.getMonth(), month.getYear());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new Date(dateString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Computes today\u0027s date using Java library {@link LocalDate} by processing the date in yyyy-mm-dd into dd-mm-yyyy."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @return Date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static Date getDateToday() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String dateToday \u003d LocalDate.now().toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String[] args \u003d dateToday.split(\"-\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new Date(String.format(\"%s-%s-%s\", args[2], args[1], args[0]));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 28,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/ExcelUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import org.apache.poi.ss.usermodel.Cell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import org.apache.poi.ss.usermodel.Row;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import org.apache.poi.xssf.usermodel.XSSFSheet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": " * Transfer data into Excel file utilities."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "public class ExcelUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * Export data of records into Map."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @param recordList list of records."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @return a map containing the ID for each record, name, date, money spent/received."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static Map\u003cString, Object[]\u003e exportData (List\u003cRecord\u003e recordList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        Map\u003cString, Object[]\u003e data \u003d new TreeMap\u003cString, Object[]\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        int id \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        data.put(String.valueOf(id++), new Object[] {\"NAME\", \"DATE\", \"MONEY SPENT/RECEIVED\"});"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        for (Record record : recordList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            data.put(String.valueOf(id++), new Object[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                    record.getName().fullName,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                    record.getDate().value,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                    record.getMoneyFlow().valueDouble});"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * Write the data into Excel sheet"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @param data"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @param sheet the Excel sheet which have"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static void writeDataIntoExcelSheet (Map\u003cString, Object[]\u003e data, XSSFSheet sheet) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        Set\u003cString\u003e keySet \u003d data.keySet();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        int rowNum \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        for (String key : keySet) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            Row row \u003d sheet.createRow(rowNum++);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            Object[] objects \u003d data.get(key);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            int cellNum \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            for (Object object : objects) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                Cell cell \u003d row.createCell(cellNum++);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                if (object instanceof String) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                    cell.setCellValue((String) object);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                    cell.setCellValue((Double) object);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 57
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import org.apache.poi.xssf.usermodel.XSSFWorkbook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * Write the Excel workbook in the file system, or you can customise the location of the Excel workbook."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @param fileName name of the file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @param workbook the Excel Workbook we want to produce."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static void writeWorkBookInFileSystem (String fileName, XSSFWorkbook workbook) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            FileOutputStream fileOut \u003d new FileOutputStream(new File(fileName));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            workbook.write(fileOut);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            fileOut.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            System.out.println(String.format(\"%1$s is written successfully.\\n\", fileName));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 19,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/MoneyUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * Contains helper methods to process data of {@code MoneyFlow}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class MoneyUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Takes in 2 {@code MoneyFlow} parameters and returns the sum"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final MoneyFlow add(MoneyFlow money1, MoneyFlow money2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireAllNonNull(money1, money2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        double newMoney \u003d money1.toDouble() + money2.toDouble();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new MoneyFlow(formatIntoMoneyFlowFormat(newMoney));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Subtracts {@code MoneyFlow} money2 from {@code MoneyFlow} money1 and returns the result"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final MoneyFlow subtract(MoneyFlow money1, MoneyFlow money2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireAllNonNull(money1, money2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        double newMoney \u003d money1.toDouble() - money2.toDouble();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new MoneyFlow(formatIntoMoneyFlowFormat(newMoney));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Formats a string into a string that is readable by {@code MoneyFlow}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String formatIntoMoneyFlowFormat(double money) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String formattedMoney;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (money \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            formattedMoney \u003d \"-0\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else if (money \u003e 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            formattedMoney \u003d String.format(\"+%.2f\", money);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            formattedMoney \u003d String.format(\"%.2f\", money);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return formattedMoney;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 39,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/SortUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Comparator to sort {@code Record}s by name, date and moneyflow attributes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class SortUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public static Comparator\u003cRecord\u003e compareNameAttribute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        return Comparator.comparing(a -\u003e a.getName().fullName.toLowerCase());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public static Comparator\u003cRecord\u003e compareDateAttribute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return (a, b) -\u003e a.getDate().dateComparator(b.getDate());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Comparator\u003cRecord\u003e compareMoneyflowAttribute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return Comparator.comparing(a -\u003e a.getMoneyFlow().valueDouble);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tztzt"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tztzt": 14,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MONEYFLOW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a record to the financial planner."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a record to the financial planner. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MONEYFLOW + \"MONEYFLOW \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"Payment for Caifan \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DATE + \"18-9-2018 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MONEYFLOW + \"-3.50 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"food \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"Techno\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New record added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"This record already exists in the financial planner\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Record toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Record}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Record record) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d record;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasRecord(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addRecord(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitFinancialPlanner();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd) + model.autoLimitCheck());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 1,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/CheckLimitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * This function will print out all the limit information."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class CheckLimitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkLimit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all limits\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more limits to list!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (model.getLimitList().isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + model.manualLimitCheck());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 27
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a record identified using it\u0027s displayed index from the financial planner."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the record identified by the index number used in the displayed record list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_RECORD_SUCCESS \u003d \"Deleted Record: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRecord\u003e lastShownList \u003d model.getFilteredRecordList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Record recordToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deleteRecord(recordToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitFinancialPlanner();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RECORD_SUCCESS, recordToDelete) + model.autoLimitCheck());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 1,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/DeleteCommandByDateEntry.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": " * Delete the records whose date is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "public class DeleteCommandByDateEntry extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_date\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the all records identified by the date number used in the displayed record list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            + \"PARAMERERS: DATE (Must follow the format dd-mm-yyyy).\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            + \" 31-03-1999\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_RECORDS_SUCCESS \u003d \"Deleted all records whose date is %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteCommandByDateEntry.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private final Date targetDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public DeleteCommandByDateEntry(Date targetDate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        Boolean targetRecordExist \u003d Boolean.FALSE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRecord\u003e lastShownList \u003d model.getFilteredRecordList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d lastShownList.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Record targetRecord \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            logger.info(String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"---------------------------------------------The date required is: %1$s, the date shown is %2$s\\n\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                    targetDate.getValue(), targetRecord.getDate().getValue()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            if (targetRecord.isSameDateRecord(targetDate)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                model.deleteRecord(targetRecord);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                targetRecordExist \u003d Boolean.TRUE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        if (!targetRecordExist) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            logger.info(\"The record does not exist.\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NONEXISTENT_RECORD_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            model.commitFinancialPlanner();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_RECORDS_SUCCESS, targetDate.value)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    + model.autoLimitCheck());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                || (other instanceof DeleteCommandByDateEntry // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                \u0026\u0026 targetDate.equals(((DeleteCommandByDateEntry) other).targetDate)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 60,
      "oscarzeng": 5,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/DeleteLimitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * Delete an existing limit according to the dates input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * If there is no limit for that period of time, the command will"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * report an error."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class DeleteLimitCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteLimit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": delete certain limit according to the dates. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + PREFIX_DATE + \"DATE_START \" + \"DATE_END \" + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + PREFIX_DATE + \"18-9-2018 \" + \"20-9-2018 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The limit has been deleted. \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_LIMITS_DO_NOT_EXIST \u003d \"There is no limit for that period of date\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private Limit limit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public DeleteLimitCommand (Limit limitIn) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(limitIn);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        limit \u003d limitIn;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!model.hasSameDateLimit(limit)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new CommandException(MESSAGE_LIMITS_DO_NOT_EXIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        model.deleteLimit(model.getSameDatesLimit(limit.getDateStart(), limit.getDateEnd()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        model.commitFinancialPlanner();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS); // + model.autoLimitCheck());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public boolean equals (Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                || (other instanceof DeleteLimitCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                \u0026\u0026 limit.equals(((DeleteLimitCommand) other).limit));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 54
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/EditLimitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MONEYFLOW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * This command will allow user to modify the existing limit according to the two dates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * The newly input limit will replace the old limit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class EditLimitCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editLimit\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edit an existing limit according to the dates. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + PREFIX_DATE + \"DATE_START \" + \"DATE_END \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + PREFIX_MONEYFLOW + \"NEW_LIMIT_MONEY \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + PREFIX_DATE + \"18-9-2018 \" + \"20-9-2018 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + PREFIX_MONEYFLOW + \"200\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The limit has been edited. \\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_LIMITS_DO_NOT_EXIST \u003d \"There is no limit for that period of date\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private Limit originalLimit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private String output;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private Limit limit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public EditLimitCommand (Limit limitIn) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(limitIn);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        limit \u003d limitIn;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!model.hasSameDateLimit(limit)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new CommandException(MESSAGE_LIMITS_DO_NOT_EXIST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        originalLimit \u003d model.getSameDatesLimit(limit.getDateStart(), limit.getDateEnd());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        model.deleteLimit(originalLimit);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        model.addLimit(limit);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        output \u003d MESSAGE_SUCCESS + \"Original Limit:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                + model.generateLimitOutput(model.isExceededLimit(originalLimit),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                model.getTotalSpend(originalLimit), originalLimit)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                + \"Modified Limit: \\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                + model.generateLimitOutput(model.isExceededLimit(limit),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                model.getTotalSpend(limit), limit);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        model.commitFinancialPlanner();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new CommandResult(output);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public boolean equals (Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                || (other instanceof EditLimitCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                \u0026\u0026 limit.equals(((EditLimitCommand) other).limit));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 67
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/ExportExcelCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import org.apache.poi.xssf.usermodel.XSSFSheet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import org.apache.poi.xssf.usermodel.XSSFWorkbook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.commons.util.ExcelUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.record.DateIsWithinIntervalPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": " * Export the data of the records within specific period."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "public class ExportExcelCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export_excel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            + \": Export the records data into Excel file within specific period.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            + \"The file will be named in format: Financial_Planner_STARTDATE_ENDDATE.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            + \"Parameters: START_DATE END_DATE, START_DATE should be equal to or smaller than END_DATE.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 31-03-1999 31-3-2018\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private final DateIsWithinIntervalPredicate predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private Logger logger \u003d LogsCenter.getLogger(ExportExcelCommand.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public ExportExcelCommand(DateIsWithinIntervalPredicate predicate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        requireNonNull(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        model.updateFilteredRecordList(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        List\u003cRecord\u003e recordList \u003d model.getFilteredRecordList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        String nameFile \u003d String.format(\"Financial_Planner_%1$s_%2$s.xlsx\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                predicate.getStartDate().getValue(), predicate.getEndDate().getValue());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        logger.info(nameFile);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        XSSFWorkbook workbook \u003d new XSSFWorkbook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        XSSFSheet sheet \u003d workbook.createSheet(nameFile);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        Map\u003cString, Object[]\u003e mapData \u003d ExcelUtil.exportData(recordList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        ExcelUtil.writeDataIntoExcelSheet(mapData, sheet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        FileUtil.writeWorkBookInFileSystem(nameFile, workbook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_EXCEL_FILE_WRITTEN_SUCCESSFULLY, nameFile));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                || (other instanceof ExportExcelCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                \u0026\u0026 predicate.equals(((ExportExcelCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 60,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/FindTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tztzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all records in financial planner whose tags contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tztzt"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tztzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tztzt"
        },
        "content": "public class FindTagCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findtag\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all records whose tags contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" food clothes shopping\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    private final TagsContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public FindTagCommand(TagsContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        model.updateFilteredRecordList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                String.format(Messages.MESSAGE_RECORDS_LISTED_OVERVIEW, model.getFilteredRecordList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                || (other instanceof FindTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindTagCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tztzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 37,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/LimitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MONEYFLOW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "* This Command is used as a limit function, Currently the user can input two Dates and one MoneyFlow,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "* and the command will check whether the the total expense during this period has exceeded the limit."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * and the limit will be stored inside the limit storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "* */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class LimitCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"limit\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Check the limit for a period of time. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + PREFIX_DATE + \"DATE_START \" + \"DATE_END \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + PREFIX_MONEYFLOW + \"LIMIT_MONEY \" + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + PREFIX_DATE + \"18-9-2018 \" + \"20-9-2018 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + PREFIX_MONEYFLOW + \"100 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_BASIC_SPEND \u003d \"Date Period: %s -- %s.\\n The limit you have set: %.2f \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + \"Your spend during the limit period: %.2f\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_BASIC_EARNED \u003d \"Date Period: %s -- %s.\\n The limit you have set: %.2f \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            + \"Your income during the limit period: %.2f\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_EXCEED \u003d \"Your spend exceeded the limit !!! \\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_NOT_EXCEED \u003d \"Your spend did not exceed the limit ^o^\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_LIMITS_SAME_DATE \u003d \"There already a limit for that period of date\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private Limit limit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private String output;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public LimitCommand (Limit limitIn) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(limitIn);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        limit \u003d limitIn;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (model.hasSameDateLimit(limit)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new CommandException(MESSAGE_LIMITS_SAME_DATE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        model.addLimit(limit);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        output \u003d model.generateLimitOutput(model.isExceededLimit(limit),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                model.getTotalSpend(limit), limit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        model.commitFinancialPlanner();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new CommandResult(output);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public boolean equals (Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                || (other instanceof LimitCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                \u0026\u0026 limit.equals(((LimitCommand) other).limit));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 70
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.Model.PREDICATE_SHOW_ALL_RECORDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.DateIsWithinIntervalPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * Lists all records in the financial planner to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final int DUO_ARG_MODE_COUNT \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final int SINGLE_ARG_MODE_COUNT \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Lists all records within a specific time period. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + PREFIX_DATE + \"START_DATE END_DATE\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + \"END_DATE must be later than or equal to START_DATE.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all records\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final Date startDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final Predicate\u003cRecord\u003e predicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        predicate \u003d PREDICATE_SHOW_ALL_RECORDS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        startDate \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        endDate \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public ListCommand(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.predicate \u003d new DateIsWithinIntervalPredicate(startDate, endDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        model.updateFilteredRecordList(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListCommand) other).predicate));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 51,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tztzt"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tztzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tztzt"
        },
        "content": " * Sorts all records in the current displayed list by a specified category and/or order."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tztzt"
        },
        "content": " * Keyword matching is case insensitive and regardless of order of entry."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tztzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tztzt"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int ONLY_CATEGORY_OR_ORDER_SPECIFIED \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public static final int CATEGORY_AND_ORDER_SPECIFIED \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public static final String DESCENDING_CONDITION \u003d \"desc\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ASCENDING_CONDITION \u003d \"asc\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Records sorted by \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CATEGORY_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CATEGORY_MONEYFLOW \u003d \"moneyflow\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CATEGORY_MONEY \u003d \"money\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CATEGORY_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ORDER_ASCENDING \u003d \"in ascending order\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ORDER_DESCENDING \u003d \"in descending order\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all records in the currently displayed list \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the specified category and order.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            + \"Parameters: [CATEGORY] [ORDER]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + CATEGORY_NAME + \" \" + DESCENDING_CONDITION;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Set\u003cString\u003e CATEGORY_SET \u003d new HashSet\u003c\u003e(Arrays.asList(CATEGORY_NAME, CATEGORY_MONEYFLOW,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            CATEGORY_MONEY, CATEGORY_DATE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Set\u003cString\u003e ORDER_SET \u003d new HashSet\u003c\u003e(Arrays.asList(DESCENDING_CONDITION, ASCENDING_CONDITION));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Boolean ascending;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public SortCommand(String category, Boolean ascending) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        this.ascending \u003d ascending;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        model.sortFilteredRecordList(category, ascending);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String returnMessageCategory \u003d category;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String returnMessageOrder \u003d ascending ? ORDER_ASCENDING : ORDER_DESCENDING;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + returnMessageCategory + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + returnMessageOrder + \".\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            \u0026\u0026 category.equals(((SortCommand) other).category)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            \u0026\u0026 ascending.equals(((SortCommand) other).ascending)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tztzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 41,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/StatisticCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ShowPieChartStatsEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.DateIsWithinIntervalPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.CategoryStatisticsList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * Shows the statistics of the current summary"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class StatisticCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Provides a statistic based on the summary table displayed.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Stats generated!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final Predicate\u003cRecord\u003e predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public StatisticCommand(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        predicate \u003d new DateIsWithinIntervalPredicate(startDate, endDate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        ObservableList\u003cRecord\u003e recordList \u003d model.getFinancialPlanner().getRecordList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        List\u003cRecord\u003e filteredList \u003d filterRecordListByPredicate(recordList, predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        CategoryStatisticsList categoryStats \u003d new CategoryStatisticsList(filteredList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        EventsCenter.getInstance().post(new ShowPieChartStatsEvent(categoryStats.getReadOnlyStatsList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public List\u003cRecord\u003e filterRecordListByPredicate(List\u003cRecord\u003e recordList, Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return recordList.stream().filter(predicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 31,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/SummaryByDateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ShowSummaryTableEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.DateIsWithinIntervalPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.SummaryByDateList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/** List all the summary of records within a period of time specified */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class SummaryByDateCommand extends SummaryCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String COMMAND_MODE_WORD \u003d \"date\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists the summary for each day for a period of time. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + PREFIX_DATE + \"DATE_START \" + \"DATE_END \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_MODE_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + PREFIX_DATE + \"18-9-2018 \" + \"20-9-2018 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed summary for %d days \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final Date startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final Predicate\u003cRecord\u003e predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryByDateCommand(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        predicate \u003d new DateIsWithinIntervalPredicate(startDate, endDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        ReadOnlyFinancialPlanner financialPlanner \u003d model.getFinancialPlanner();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        SummaryByDateList summaryList \u003d new SummaryByDateList(financialPlanner.getRecordList(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        EventsCenter.getInstance().post(new ShowSummaryTableEvent(summaryList.getSummaryList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, summaryList.size()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                || (other instanceof SummaryByDateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 startDate.equals(((SummaryByDateCommand) other).startDate)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 endDate.equals(((SummaryByDateCommand) other).endDate))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 predicate.equals(((SummaryByDateCommand) other).predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 42,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/SummaryByMonthCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ShowSummaryTableEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.DateIsWithinIntervalPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.SummaryByMonthList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/** List all the summary of records within a period of time specified */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class SummaryByMonthCommand extends SummaryCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String COMMAND_MODE_WORD \u003d \"month\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists the summary for each month for a period of time.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + \" Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + PREFIX_DATE + \"MONTH_START \" + \"MONTH_END \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_MODE_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + PREFIX_DATE + \"sep-2018 \" + \"oct-2018 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed summary for %d months:\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final Date startDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final Predicate\u003cRecord\u003e predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryByMonthCommand(Month startMonth, Month endMonth) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        startDate \u003d DateUtil.generateFirstOfMonth(startMonth);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        endDate \u003d DateUtil.generateLastOfMonth(endMonth);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        predicate \u003d new DateIsWithinIntervalPredicate(startDate, endDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        ReadOnlyFinancialPlanner financialPlanner \u003d model.getFinancialPlanner();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        SummaryByMonthList summaryList \u003d new SummaryByMonthList(financialPlanner.getRecordList(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                predicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        EventsCenter.getInstance().post(new ShowSummaryTableEvent(summaryList.getSummaryList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, summaryList.size()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                || (other instanceof SummaryByMonthCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 startDate.equals(((SummaryByMonthCommand) other).startDate)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 endDate.equals(((SummaryByMonthCommand) other).endDate));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 41,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/SummaryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * Represents a basic summary command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This command should not be executed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public abstract class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists the summary for each day/month \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + \"for a period of time.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + \"There are 2 MODEs, specify your MODE with either \\\"date\\\" or \\\"month\\\".\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + \"MODE \" + PREFIX_DATE + \"DATE_START \" + \"DATE_END\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + \"Example: \\\"\" + COMMAND_WORD + \" date \" + PREFIX_DATE + \"18-9-2018 \" + \"20-9-2018\\\" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            + \"OR \\\"\" + COMMAND_WORD + \" month \" + PREFIX_DATE + \"apr-2018 \" + \"may-2018\\\"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 21,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/DeleteCommandByDateEntryParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.logic.commands.DeleteCommandByDateEntry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": " * Parses input arguments and creates a new DeleteCommandByDateEntry object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "public class DeleteCommandByDateEntryParser implements Parser\u003cDeleteCommandByDateEntry\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * Parses the date and create a new command DeleteCommandByDateEntry"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @return new command DeleteCommandByDateEntry"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @throws ParseException if the Date is invalid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public DeleteCommandByDateEntry parse (String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            Date date \u003d ParserUtil.parseDate(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            return new DeleteCommandByDateEntry(date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            throw new ParseException ("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommandByDateEntry.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 28
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/DeleteLimitCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.commands.DeleteLimitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * This Parser will return the deleteLimitCommand according to the two dates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class DeleteLimitCommandParser implements Parser\u003cDeleteLimitCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Parses the information required for the limit command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * and returns a limit object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private String [] datesIn; //the string is used to divide two the whole strings into two substrings."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public DeleteLimitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteLimitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        datesIn \u003d argMultimap.getValue(PREFIX_DATE).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Date dateStart \u003d ParserUtil.parseDate(datesIn[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Date dateEnd \u003d ParserUtil.parseDate(datesIn[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Limit limit \u003d new Limit(dateStart, dateEnd, ParserUtil.parseMoneyFlow(\"-1\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new DeleteLimitCommand(limit);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 48
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/EditLimitCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MONEYFLOW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.commands.EditLimitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * This command Parser is very similar to the @LimitCommandParser."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * Will return the editLimitCommand with the given limit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class EditLimitCommandParser implements Parser \u003cEditLimitCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Parse the EditLimitCommand like the Limit command, return the editLimitCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * with the input of limit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private String [] datesIn; //the string is used to divide two the whole strings into two substrings."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public EditLimitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_MONEYFLOW);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_MONEYFLOW)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditLimitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        MoneyFlow money \u003d ParserUtil.parseMoneyFlow(\"-\" + argMultimap.getValue(PREFIX_MONEYFLOW).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        datesIn \u003d argMultimap.getValue(PREFIX_DATE).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Date dateStart \u003d ParserUtil.parseDate(datesIn[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Date dateEnd \u003d ParserUtil.parseDate(datesIn[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Limit limit \u003d new Limit(dateStart, dateEnd, money);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new EditLimitCommand(limit);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 50
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ExportExcelCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.logic.commands.ExportExcelCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.record.DateIsWithinIntervalPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": " * Parses input arguments and create ExportExcelCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "public class ExportExcelCommandParser implements Parser\u003cExportExcelCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private Logger logger \u003d LogsCenter.getLogger(ExportExcelCommandParser.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * Parses the given code {@code String} of arguments ini the context of the SummaryCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @return an SummaryCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public ExportExcelCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ExportExcelCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        String[] dates \u003d splitByWhitespace(trimmedArgs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        if (Arrays.asList(dates).size() !\u003d 2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                            Messages.MESSAGE_INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                                    + Messages.MESSAGE_INVALID_DATE_REQUIRED, ExportExcelCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        logger.info(String.format(\"The Start Date: %1$s, the End Date: %2$s\\n\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                Arrays.asList(dates).get(0), Arrays.asList(dates).get(1)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        Date startDate \u003d ParserUtil.parseDate(Arrays.asList(dates).get(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        Date endDate \u003d ParserUtil.parseDate(Arrays.asList(dates).get(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        if (isDateOrderValid(startDate, endDate)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            DateIsWithinIntervalPredicate predicate \u003d new DateIsWithinIntervalPredicate(startDate, endDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            return new ExportExcelCommand(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_STARTDATE_ENDDATE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * Splits a string using whitespace as delimiters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @param args String arguments that have 2 dates."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @return array of split strings"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private static String[] splitByWhitespace(String args) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        String[] argList \u003d args.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        return argList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private static boolean isDateOrderValid(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        return startDate.isEarlierThan(endDate) || startDate.equals(endDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 69
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/FinancialPlannerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.commands.CheckLimitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.logic.commands.DeleteCommandByDateEntry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.commands.DeleteLimitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.commands.EditLimitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.logic.commands.ExportExcelCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.FindTagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.LimitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import seedu.planner.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.StatisticCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class FinancialPlannerParser {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        case DeleteCommandByDateEntry.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            return new DeleteCommandByDateEntryParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        case FindTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            return new FindTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        case LimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return new LimitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        case DeleteLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return new DeleteLimitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        case EditLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return new EditLimitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        case CheckLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return new CheckLimitCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SummaryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        case StatisticCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return new StatisticCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        case ExportExcelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            return new ExportExcelCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 7,
      "nguyenngoclinhchi": 9,
      "oscarzeng": 14,
      "-": 103
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/FindTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.FindTagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tztzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tztzt"
        },
        "content": " * Parses input arguments and creates a new FindTagCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tztzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tztzt"
        },
        "content": "public class FindTagCommandParser implements Parser\u003cFindTagCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindTagCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * and returns an FindTagCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public FindTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindTagCommand(new TagsContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tztzt"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tztzt": 27,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/LimitCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MONEYFLOW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.commands.LimitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "* The Parser will parse those values in one format Limit and return back to LimitCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "* */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class LimitCommandParser implements Parser\u003cLimitCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Parses the information required for the limit command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * and returns a limit object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private String [] datesIn; //the string is used to divide two the whole strings into two substrings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private String moneyString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public LimitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_MONEYFLOW);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_MONEYFLOW)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LimitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        moneyString \u003d \"-\" + argMultimap.getValue(PREFIX_MONEYFLOW).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!(MoneyFlow.isValidMoneyFlow(moneyString))) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new ParseException(\"The limit money can only be normal real number. \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    + \"Example: m/100.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        MoneyFlow money \u003d ParserUtil.parseMoneyFlow(moneyString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        datesIn \u003d argMultimap.getValue(PREFIX_DATE).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Date dateStart \u003d ParserUtil.parseDate(datesIn[0]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Date dateEnd \u003d ParserUtil.parseDate(datesIn[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (dateStart.isLaterThan(dateEnd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new ParseException(\"The dateStart must be earlier than or equals to dateEnd.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Limit limit \u003d new Limit(dateStart, dateEnd, money);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new LimitCommand(limit);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 63
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    // TODO: Make the switch a bit cleaner"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // If no argument is specified, default is list all"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String dateIntervalString \u003d argMultimap.getValue(PREFIX_DATE).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String[] argList \u003d splitByWhitespace(dateIntervalString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Date startDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Date endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (argList.length \u003d\u003d ListCommand.DUO_ARG_MODE_COUNT) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            startDate \u003d ParserUtil.parseDate(argList[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            endDate \u003d ParserUtil.parseDate(argList[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else if (argList.length \u003d\u003d ListCommand.SINGLE_ARG_MODE_COUNT) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            startDate \u003d ParserUtil.parseDate(argList[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            endDate \u003d ParserUtil.parseDate(argList[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (!isDateOrderValid(startDate, endDate)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new ListCommand(startDate, endDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Splits a string using whitespace as delimiters"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @return array of split strings"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static String[] splitByWhitespace(String args) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String[] argList \u003d args.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return argList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static boolean isDateOrderValid(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return startDate.isEarlierThan(endDate) || startDate.equals(endDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 66,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Date.isValidDateFormat(trimmedDate)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Date result;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            result \u003d new Date(trimmedDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a string into a {@code Month}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param month"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code month} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Month parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedMonth \u003d month.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Month.isValidMonth(trimmedMonth)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Month.MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Month result;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            result \u003d new Month(trimmedMonth);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String moneyFlow} into an {@code MoneyFlow}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code MoneyFlow} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static MoneyFlow parseMoneyFlow(String moneyFlow) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(moneyFlow);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedMoneyFlow \u003d moneyFlow.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!MoneyFlow.isValidMoneyFlow(trimmedMoneyFlow)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MoneyFlow.MESSAGE_MONEY_FLOW_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new MoneyFlow(trimmedMoneyFlow);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 1,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tztzt"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.SortCommand.ASCENDING_CONDITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.SortCommand.CATEGORY_AND_ORDER_SPECIFIED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.SortCommand.CATEGORY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.SortCommand.CATEGORY_SET;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import static seedu.planner.logic.commands.SortCommand.DESCENDING_CONDITION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.SortCommand.ONLY_CATEGORY_OR_ORDER_SPECIFIED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.SortCommand.ORDER_SET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import seedu.planner.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tztzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tztzt"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tztzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tztzt"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        String category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        Boolean ascending;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        String[] argList \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if ((argList.length) \u003d\u003d ONLY_CATEGORY_OR_ORDER_SPECIFIED) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            if (!CATEGORY_SET.contains(argList[0].toLowerCase()) \u0026\u0026 !ORDER_SET.contains(argList[0].toLowerCase())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            category \u003d argList[0].toLowerCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            ascending \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (category.equals(DESCENDING_CONDITION)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                category \u003d CATEGORY_NAME;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ascending \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (category.equals(ASCENDING_CONDITION)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                category \u003d CATEGORY_NAME;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (argList.length \u003d\u003d CATEGORY_AND_ORDER_SPECIFIED) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            if ((ORDER_SET.contains(argList[0].toLowerCase()) || ORDER_SET.contains(argList[1].toLowerCase()))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 (CATEGORY_SET.contains(argList[0].toLowerCase())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    || CATEGORY_SET.contains(argList[1].toLowerCase()))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                if (ORDER_SET.contains(argList[0].toLowerCase())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                    ascending \u003d !(argList[0].toLowerCase().equals(DESCENDING_CONDITION));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                    category \u003d argList[1].toLowerCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                    ascending \u003d (argList[1].toLowerCase().equals(ASCENDING_CONDITION));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                    category \u003d argList[0].toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        return new SortCommand(category, ascending);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tztzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 45,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/StatisticCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.StatisticCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * Parses input arguments and creates a new StatisticCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class StatisticCommandParser implements Parser\u003cStatisticCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Retrieves all arguments from a string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param args given string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @return array of strings"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @throws ParseException if args cannot be processed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static String[] getArguments(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                    StatisticCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String[] argList \u003d args.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (argList.length !\u003d 2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                    StatisticCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return argList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static boolean isDateOrderValid(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return startDate.isEarlierThan(endDate) || startDate.equals(endDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatisticCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * and returns an StatisticCommand object for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public StatisticCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String dateIntervalString \u003d argMultimap.getValue(PREFIX_DATE).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String[] argList \u003d getArguments(dateIntervalString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Date startDate \u003d ParserUtil.parseDate(argList[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Date endDate \u003d ParserUtil.parseDate(argList[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (!isDateOrderValid(startDate, endDate)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new StatisticCommand(startDate, endDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 57,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/FinancialPlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.DateBasedLimitList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the planner-book level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSameRecord comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FinancialPlanner implements ReadOnlyFinancialPlanner {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueRecordList records;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private DateBasedLimitList limits;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        records \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        limits \u003d new DateBasedLimitList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public FinancialPlanner() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an FinancialPlanner using the Records in the {@code toBeCopied}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public FinancialPlanner(ReadOnlyFinancialPlanner toBeCopied) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the record list with {@code records}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code records} must not contain duplicate records."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.records.setRecords(records);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimits(List\u003cLimit\u003e limits) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.limits.setLimits(limits);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code FinancialPlanner} with {@code newData}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyFinancialPlanner newData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setRecords(newData.getRecordList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        setLimits(newData.getLimitList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code FinancialPlanner} with the given parameters"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param recordList"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(UniqueRecordList recordList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(recordList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setRecords(recordList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Resets LimitList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param dateBasedLimitList"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void resetLimit(DateBasedLimitList dateBasedLimitList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(dateBasedLimitList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        setLimitList(dateBasedLimitList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    //// record-level operations"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the financial planner."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return records.contains(record);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * returns true if there are two limits share the same dates."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param limitin"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public boolean hasSameDateLimit (Limit limitin) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(limitin);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return limits.hasSameDatesLimit(limitin);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a record to the financial planner."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * The record must not already exist in the financial planner."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addRecord(Record p) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        records.add(p);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given record {@code target} in the list with {@code editedRecord}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the financial planner."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * The record identity of {@code editedRecord}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * must not be the same as another existing record in the financial planner."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedRecord);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        records.setRecord(target, editedRecord);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code FinancialPlanner}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the financial planner."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeRecord(Record key) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        records.remove(key);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sorts the records in this {@code FinancialPlanner}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortRecords(String category, Boolean ascending) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        records.sortRecords(category, ascending);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimitList(DateBasedLimitList limitList) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.limits \u003d limitList;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Add a limit to the financial planner."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * The newly added limit can not share same dates with the rest."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param limit"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void addLimit(Limit limit) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        limits.add(limit); }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * edit an existing limit."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Replace the limit the new limit given."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param editedLimit"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void updateLimit(Limit target, Limit editedLimit) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(editedLimit);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        limits.setLimit(target, editedLimit);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * check whether the records\u0027 money has already exceeded the limit."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * return true if limit exceeded."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param limit"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public boolean isExceededLimit (Limit limit) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Double recordsMoney \u003d 0.0;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        for (Record i: records) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            if (limit.isInsideDatePeriod(i)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                recordsMoney +\u003d i.getMoneyFlow().toDouble();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return (limit.isExceeded(recordsMoney));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Double getTotalSpend (Limit limit) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Double recordsMoney \u003d 0.0;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        for (Record i: records) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            if (limit.isInsideDatePeriod(i)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                recordsMoney +\u003d i.getMoneyFlow().toDouble();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return recordsMoney;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * return the dates"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Limit getSameDatesLimit (Date dateStart, Date dateEnd) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        for (Limit i: limits.asUnmodifiableObservableList()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            if (dateStart.equals(i.getDateStart()) \u0026\u0026 dateEnd.equals(i.getDateEnd())) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Removes a limit from the list,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param limitLn must already existed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void removeLimit(Limit limitLn) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        limits.remove(limitLn); }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        return records.asUnmodifiableObservableList().size() + \" records\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        return records.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public ObservableList\u003cLimit\u003e getLimitList () {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return limits.asUnmodifiableObservableList(); }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FinancialPlanner // instanceof handles nulls"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 records.equals(((FinancialPlanner) other).records));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        return records.hashCode();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 2,
      "oscarzeng": 100,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cRecord\u003e PREDICATE_SHOW_ALL_RECORDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyFinancialPlanner newData);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the FinancialPlanner */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyFinancialPlanner getFinancialPlanner();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the financial planner."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasRecord(Record record);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Returns true if a limit with the same dates exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasSameDateLimit(Limit limitIn);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given record."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * The record must exist in the financial planner."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteRecord(Record target);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    void deleteListRecord(List\u003cRecord\u003e targetList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given record."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code record} must not already exist in the financial planner."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void addRecord(Record record);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * To add the limit."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param limitIn"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    void addLimit(Limit limitIn);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given record {@code target} with {@code editedRecord}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the financial planner."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * The record identity of {@code editedRecord} must not be the same as"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * another existing record in the financial planner."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateRecord(Record target, Record editedRecord);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Replace the limit inside the limit list according to the given limit dates"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param editedLimit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    void updateLimit(Limit target, Limit editedLimit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * To delete a existing limit."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteLimit(Limit target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * This function will check whether the limit have been exceeded."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param limitIn"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    boolean isExceededLimit (Limit limitIn);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     *This function will execute all the limits stored inside storage right now."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * However, only exceeded limits will be displayed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * The final output will be in one string"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * and it will return this string to limit command and display."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    String autoLimitCheck ();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     *This function will execute all the limits stored inside"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * storage right now. The final output will be in one string"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * and it will return this string to limit command and display."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    String manualLimitCheck ();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * This will generate the output string according to the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * exceeding condition and limit information."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param isExceeded"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param limit"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    String generateLimitOutput (boolean isExceeded, Double totalMoney, Limit limit);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * This function will return the total money spent during that period of limit time."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param limitIn"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    Double getTotalSpend (Limit limitIn);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Return the limit which has the same dates as input."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param dateStart"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param dateEnd"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    Limit getSameDatesLimit (Date dateStart, Date dateEnd);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cRecord\u003e getRecordsThisMonth();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered record list */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilteredRecordList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered limit list */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cLimit\u003e getLimitList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered record list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * Updates the filtered record list to sort by the given {@code category}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    void sortFilteredRecordList(String category, Boolean reversed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous financial planner states to restore."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoFinancialPlanner();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone financial planner states to restore."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoFinancialPlanner();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s financial planner to its previous state."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoFinancialPlanner();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s financial planner to its previously undone state."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoFinancialPlanner();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current financial planner state for undo/redo."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitFinancialPlanner();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 6,
      "nguyenngoclinhchi": 4,
      "oscarzeng": 62,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.commands.LimitCommand.MESSAGE_BASIC_EARNED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.commands.LimitCommand.MESSAGE_BASIC_SPEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.commands.LimitCommand.MESSAGE_EXCEED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.commands.LimitCommand.MESSAGE_NOT_EXCEED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.model.FinancialPlannerChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.commons.events.model.LimitListChangedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.UpdateWelcomePanelEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.DateUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.DateIsWithinIntervalPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.CategoryStatisticsList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the financial planner data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedFinancialPlanner versionedFinancialPlanner;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cRecord\u003e filteredRecords;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private final FilteredList\u003cLimit\u003e limits;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Month currentMonth;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cRecord\u003e recordsInCurrentMonth;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given financialPlanner and userPrefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyFinancialPlanner financialPlanner, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(financialPlanner, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with financial planner: \" + financialPlanner"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedFinancialPlanner \u003d new VersionedFinancialPlanner(financialPlanner);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredRecords \u003d new FilteredList\u003c\u003e(versionedFinancialPlanner.getRecordList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        limits \u003d new FilteredList\u003cLimit\u003e(versionedFinancialPlanner.getLimitList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        currentMonth \u003d getCurrentMonth();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        recordsInCurrentMonth \u003d new FilteredList\u003c\u003e(versionedFinancialPlanner.getRecordList(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new DateIsWithinIntervalPredicate(DateUtil.generateFirstOfMonth(currentMonth),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                        DateUtil.generateLastOfMonth(currentMonth)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        recordsInCurrentMonth.addListener((InvalidationListener) observable -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            CategoryStatisticsList statsList \u003d new CategoryStatisticsList(recordsInCurrentMonth);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().post(new UpdateWelcomePanelEvent(statsList.getReadOnlyStatsList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new FinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Month getCurrentMonth() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Date currentDate \u003d DateUtil.getDateToday();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Month(currentDate.getMonth(), currentDate.getYear());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyFinancialPlanner newData) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedFinancialPlanner.resetData(newData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateFinancialPlannerChanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyFinancialPlanner getFinancialPlanner() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedFinancialPlanner;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cRecord\u003e getRecordsThisMonth() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return recordsInCurrentMonth;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event management methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateFinancialPlannerChanged() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new FinancialPlannerChangedEvent(versionedFinancialPlanner));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        autoLimitCheck();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /** Raises an event to indicate the limit list has changed */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private void indicateLimitListChanged() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        raise(new LimitListChangedEvent(versionedFinancialPlanner));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Financial planner standard operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedFinancialPlanner.hasRecord(record);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteRecord(Record target) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedFinancialPlanner.removeRecord(target);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateFinancialPlannerChanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public void deleteListRecord(List\u003cRecord\u003e targetList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        for (Record target : targetList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            versionedFinancialPlanner.removeRecord(target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        indicateFinancialPlannerChanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addRecord(Record record) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedFinancialPlanner.addRecord(record);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORDS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateFinancialPlannerChanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedFinancialPlanner.updateRecord(target, editedRecord);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateFinancialPlannerChanged();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Limit related methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasSameDateLimit(Limit limitIn) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(limitIn);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedFinancialPlanner.hasSameDateLimit(limitIn);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteLimit(Limit target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedFinancialPlanner.removeLimit(target);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        indicateLimitListChanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addLimit(Limit limitIn) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedFinancialPlanner.addLimit(limitIn);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        indicateLimitListChanged();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public boolean isExceededLimit (Limit limitIn) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(limitIn);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return (versionedFinancialPlanner.isExceededLimit(limitIn));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void updateLimit(Limit target, Limit editedLimit) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireAllNonNull(target, editedLimit);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        versionedFinancialPlanner.updateLimit(target, editedLimit);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        indicateLimitListChanged();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Limit getSameDatesLimit (Date dateStart, Date dateEnd) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireAllNonNull(dateStart, dateEnd);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return versionedFinancialPlanner.getSameDatesLimit(dateStart, dateEnd);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Double getTotalSpend (Limit limitIn) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(limitIn);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return versionedFinancialPlanner.getTotalSpend(limitIn);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public String autoLimitCheck () {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        for (Limit i: limits) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            if (isExceededLimit(i)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                output +\u003d \"\\n\" + String.format(\"%d.\", count++) + generateLimitOutput(true, getTotalSpend(i), i);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public String manualLimitCheck () {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        for (Limit i: limits) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            output +\u003d \"\\n\" + String.format(\"%d.\", count++)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    + generateLimitOutput(isExceededLimit(i), getTotalSpend(i), i);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * This function is to do the auto check whenever the record changed."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param isExceeded"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param limit"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public String generateLimitOutput (boolean isExceeded, Double totalMoney, Limit limit) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (totalMoney \u003e 0) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            output \u003d String.format(MESSAGE_BASIC_EARNED,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    limit.getDateStart(), limit.getDateEnd(),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    -1 * limit.getLimitMoneyFlow().toDouble(), totalMoney)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    + MESSAGE_NOT_EXCEED;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        } else if (isExceeded) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            output \u003d String.format(MESSAGE_BASIC_SPEND,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    limit.getDateStart(), limit.getDateEnd(),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    -1 * limit.getLimitMoneyFlow().toDouble(), -1 * totalMoney)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    + MESSAGE_EXCEED;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            output \u003d String.format(MESSAGE_BASIC_SPEND,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    limit.getDateStart(), limit.getDateEnd(),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    -1 * limit.getLimitMoneyFlow().toDouble(), -1 * totalMoney)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    + MESSAGE_NOT_EXCEED;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Record List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Record} backed by the internal list of"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedFinancialPlanner}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredRecords);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    //show all the records"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public ObservableList\u003cLimit\u003e getLimitList() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return FXCollections.unmodifiableObservableList(limits);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredRecords.setPredicate(predicate);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Modifying Record List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public void sortFilteredRecordList(String category, Boolean ascending) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        requireAllNonNull(category, ascending);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedFinancialPlanner.sortRecords(category, ascending);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoFinancialPlanner() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedFinancialPlanner.canUndo();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoFinancialPlanner() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedFinancialPlanner.canRedo();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoFinancialPlanner() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedFinancialPlanner.undo();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateFinancialPlannerChanged();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateLimitListChanged();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoFinancialPlanner() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedFinancialPlanner.redo();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateFinancialPlannerChanged();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateLimitListChanged();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitFinancialPlanner() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedFinancialPlanner.commit();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedFinancialPlanner.equals(other.versionedFinancialPlanner)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredRecords.equals(other.filteredRecords);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 7,
      "nguyenngoclinhchi": 9,
      "oscarzeng": 98,
      "-": 201
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/Month.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * Represents a month of {@code MonthSummary} in the financial planner."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class Month {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String MESSAGE_MONTH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \"Month parameter should be in the format of month-yyyy \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                    + \"with month being the standard 3-letter representations of a month and yyyy as a 4 digit number\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                    + \" Please take note that inappropriate month will result in errors, for example: sev1en-2018\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String MESSAGE_MONTH_LOGICAL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \"Month should follow the modern calendar. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                    + \"month parameter must use the 3-letter representation and is non case-sensitive\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                    + \", for eg. feb or FeB or FEB are both accepted\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String MONTH_VALIDATION_REGEX \u003d \"[a-zA-Z]{3}-\\\\d{4}\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final Pattern MONTH_VALIDATION_PATTERN \u003d Pattern.compile(\"(?\u003cmonth\u003e[a-zA-Z]{3})-(?\u003cyear\u003e\\\\d{4})\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final List\u003cString\u003e STANDARD_MONTHS \u003d Arrays.asList(\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Logger logger \u003d LogsCenter.getLogger(Month.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Matcher matcher;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Constructs a {@code Month}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param input A valid string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    //TODO: refactor this"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public Month(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        checkArgument(isValidMonth(input), MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        matcher \u003d MONTH_VALIDATION_PATTERN.matcher(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            checkArgument(false, MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        checkArgument(isLogicalMonth(matcher.group(\"month\")), MESSAGE_MONTH_LOGICAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        initMonth(matcher.group(\"month\"), matcher.group(\"year\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        value \u003d String.format(\"%s-%d\", STANDARD_MONTHS.get(month - 1), year);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public Month(int month, int year) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        checkArgument(month \u003c\u003d STANDARD_MONTHS.size(), MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        value \u003d String.format(\"%s-%d\", STANDARD_MONTHS.get(month - 1), year);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Returns if a given string is a valid Month."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param test given string"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static boolean isValidMonth(String test) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return test.matches(MONTH_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Returns if a given string makes sense as a Month"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static boolean isLogicalMonth(String test) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return STANDARD_MONTHS.contains(test.toUpperCase());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void initMonth(String month, String year) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireAllNonNull(month, year);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.year \u003d Integer.parseInt(year);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.month \u003d STANDARD_MONTHS.indexOf(month.toUpperCase()) + 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                || (other instanceof Month // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 month \u003d\u003d ((Month) other).month"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 year \u003d\u003d ((Month) other).year);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 102,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ReadOnlyFinancialPlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.DateBasedLimitList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an financial planner"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyFinancialPlanner {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the records list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate records."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cRecord\u003e getRecordList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    ObservableList\u003cLimit\u003e getLimitList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setLimitList (DateBasedLimitList limitList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path financialPlannerFilePath \u003d Paths.get(\"data\" , \"financialplanner.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path summaryMapFilePath \u003d Paths.get(\"data\", \"summarymap.xml\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private Path financialPlannerLimitFilePath \u003d Paths.get(\"data\", \"LimitList.xml\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getFinancialPlannerFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return financialPlannerFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getFinancialPlannerLimitFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return financialPlannerLimitFilePath; }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFinancialPlannerFilePath(Path financialPlannerFilePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.financialPlannerFilePath \u003d financialPlannerFilePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getSummaryMapFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return summaryMapFilePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSummaryMapFilePath(Path summaryMapFilePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.summaryMapFilePath \u003d summaryMapFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(financialPlannerFilePath, o.financialPlannerFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, financialPlannerFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + financialPlannerFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/record/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Record\u0027s date in the financial planner."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateFormat(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Date parameter should be in the format of dd-mm-yyyy \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            + \"with dd and mm being 2 digits, and yyyy being 4 digits.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            + \" Please take note that inappropriate date will result in errors, for example: 30/02/2018\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DATE_LOGICAL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Date should follow the modern calendar. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Day parameter must fit within the constraints of each month. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"For e.g, February has only 28 days for the non-Leap year \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"so the day parameter must be less than or equal to 28 if the month \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"parameter is 2.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{1,2}-\\\\d{1,2}-\\\\d{4}\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logger logger \u003d LogsCenter.getLogger(Date.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidDateFormat(date), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        splitDate(date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(DateUtil.isValidDate(day, month), MESSAGE_DATE_LOGICAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Change the (String)value to some Standard Value (follow the format dd-mm-yyyy)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return standard value Date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStandardValue () {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String standardDay;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String standardMonth;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String standardYear;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (day \u003e 0 \u0026\u0026 day \u003c 10 \u0026\u0026 String.valueOf(day).length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            standardDay \u003d \"0\" + String.valueOf(day);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            standardDay \u003d String.valueOf(day);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (month \u003e 0 \u0026\u0026 month \u003c 10 \u0026\u0026 String.valueOf(month).length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            standardMonth \u003d \"0\" + String.valueOf(month);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            standardMonth \u003d String.valueOf(month);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        standardYear \u003d String.valueOf(year);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String standardValue \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(standardDay + \"-\" + standardMonth + \"-\" + standardYear);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Standard value is \" + standardDay + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return standardValue;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Transform the Date into standard Date following the format dd-mm-yyyy"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return standard Date"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getStandardDate() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Date (getStandardValue());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Splits a date into the different parameters and assigns them to day,month,year"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format specified: dd-mm-yyyy"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void splitDate(String date) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] dateParams \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        day \u003d Integer.parseInt(dateParams[0]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        month \u003d Integer.parseInt(dateParams[1]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        year \u003d Integer.parseInt(dateParams[2]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is in a valid date format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidDate (String test) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        if (test.matches(DATE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            String[] dateParams \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            int day \u003d Integer.parseInt(dateParams[0]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            int month \u003d Integer.parseInt(dateParams[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            int year \u003d Integer.parseInt(dateParams[2]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            if (day \u003c\u003d 0 || day \u003e 31 || month \u003c\u003d 0 || month \u003e 12 || year \u003c\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            } else if (month \u003d\u003d 2 || month \u003d\u003d 4 || month \u003d\u003d 6 || month \u003d\u003d 9 || month \u003d\u003d 11) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                if (day \u003c\u003d 30) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    return month !\u003d 2 || day \u003c\u003d 28 || !isLeapYear(year);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * Checks if the year is Leap Year or not."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @param year"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @return the result whether the year is Leap year."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static boolean isLeapYear (int year) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        if (year % 400 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        } else if (year % 100 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return year % 4 \u003d\u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidDateFormat(String test) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the current object {@code Date} is later than the given {@code Date}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if date is later and False if date is earlier"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isLaterThan(Date other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.year \u003e other.getYear()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (this.year \u003d\u003d other.getYear()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            if (this.month \u003e other.getMonth()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (this.month \u003d\u003d other.getMonth()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                return this.day \u003e other.getDay();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the current object {@code Date} is earlier than the given {@code Date}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if date is earlier and False if date is later"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlierThan(Date other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.year \u003c other.getYear()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (this.year \u003d\u003d other.getYear()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            if (this.month \u003c other.getMonth()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (this.month \u003d\u003d other.getMonth()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                return this.day \u003c other.getDay();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compares whether the current object {@code Date} is earlier or later than the given {@code Date}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a positive value if date is later and negative value if date is earlier and zero if dates are the same"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public int dateComparator(Date other) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        if (this.year \u003c other.getYear()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        } else if (this.year \u003d\u003d other.getYear()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            if (this.month \u003c other.getMonth()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            } else if (this.month \u003d\u003d other.getMonth()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                if (this.day \u003c other.getDay()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                } else if (this.day \u003d\u003d other.getDay()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 day \u003d\u003d ((Date) other).getDay()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 month \u003d\u003d ((Date) other).getMonth()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 year \u003d\u003d ((Date) other).getYear()); // state check"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 22,
      "nguyenngoclinhchi": 30,
      "-": 180
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/record/DateBasedLimitList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.exceptions.LimitNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.exceptions.RedundantLimitDatesException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * The DateBasedLimitList is mainly used for store and manage all the limit of the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * The List is comparing base on the two limit components of limit :dateStart and dateEnd."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * Once these two dates are confirmed, the user will be able to remove or modify the certain limit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * Since during the same dates period, having two different limit money is meaningless."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class DateBasedLimitList { //implements Iterable\u003cLimit\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private final ObservableList\u003cLimit\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * This function will check whether there is already a limit between the same dates"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * return true if that period of dates already has limit."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param toCheck"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public boolean hasSameDatesLimit(Limit toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameLimitDates);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * add in a new limit data type to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param limitIn"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void add(Limit limitIn) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(limitIn);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (hasSameDatesLimit(limitIn)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new RedundantLimitDatesException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        internalList.add(limitIn);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * To remove a limit from the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void remove(Limit toRemove) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new LimitNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimit(Limit target, Limit editedLimit) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireAllNonNull(target, editedLimit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new LimitNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        internalList.set(index, editedLimit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimits(DateBasedLimitList replacement) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimits(List\u003cLimit\u003e limits) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireAllNonNull(limits);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!limitsAreUnique(limits)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new RedundantLimitDatesException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        internalList.setAll(limits);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * returns the newly updated limit list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public ObservableList\u003cLimit\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * To check whether the limits inside limitList are unique"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param limits"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private boolean limitsAreUnique(List\u003cLimit\u003e limits) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        for (int i \u003d 0; i \u003c limits.size() - 1; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c limits.size(); j++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                if (limits.get(i).isSameLimitDates(limits.get(j))) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 108
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/record/Limit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.lang.Math.abs;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "* Limit used to offer a function as a reminder to user about their money usage."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "* */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class Limit {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private Date dateStart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private Date dateEnd;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private MoneyFlow limitMoneyFlow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Limit (Date dateStart , Date dateEnd, MoneyFlow limitMoneyFlow) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireAllNonNull(dateEnd, dateStart, limitMoneyFlow);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.dateStart \u003d dateStart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.dateEnd \u003d dateEnd;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.limitMoneyFlow \u003d limitMoneyFlow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return String.format(\"LIMIT_FORMAT\", dateStart, dateEnd, limitMoneyFlow);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * This function is used to check whether"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param limitIn"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public boolean isSameLimitDates (Limit limitIn) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return (limitIn !\u003d null)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                \u0026\u0026 ((dateEnd.equals(limitIn.getDateEnd()))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                \u0026\u0026 (dateStart.equals(limitIn.getDateStart())));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Date getDateStart() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return dateStart;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Date getDateEnd() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return dateEnd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public MoneyFlow getLimitMoneyFlow() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return limitMoneyFlow;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * To test whether the given record is inside the limit date period."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * return true if it is."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param record"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public boolean isInsideDatePeriod (Record record) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Date recordDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        recordDate \u003d record.getDate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return ((dateStart.isEarlierThan(recordDate) \u0026\u0026 dateEnd.isLaterThan(recordDate))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            || dateEnd.equals(recordDate) || dateStart.equals(recordDate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * To test whether the money amount has already exceeded the limit."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * return true if it exceeds."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param money"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public boolean isExceeded (Double money) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return (money !\u003d null) \u0026\u0026 (money \u003c 0) \u0026\u0026 (abs(limitMoneyFlow.toDouble()) \u003c abs(money));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 72,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/record/TagsContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tztzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tztzt"
        },
        "content": " * Tests that a {@code Record}\u0027s {@code Tags} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tztzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tztzt"
        },
        "content": "public class TagsContainsKeywordsPredicate implements Predicate\u003cRecord\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public TagsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * Tests that each of a {@code Record}\u0027s {@code Tags} matches any of the keywords given."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public boolean testIfSetContainsString(Record record) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        for (Tag x : record.getTags()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            if (keywords.stream().anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(x.tagName, keyword))) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tztzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public boolean test(Record record) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        return testIfSetContainsString(record);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                || (other instanceof TagsContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagsContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tztzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 39,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/record/exceptions/LimitNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * Indicates that the limit can not be found inside the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class LimitNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/record/exceptions/RedundantLimitDatesException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * This message will indicates that the period of tine has already had a limit."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class RedundantLimitDatesException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public RedundantLimitDatesException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        super(\"Operation would result in setting two limit at the same period of time.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 10
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/summary/CategoryStatistic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This class represents a in memory model of the statistic of a category. It contains totalIncome and totalExpenses."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class CategoryStatistic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private double totalIncome \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private double totalExpense \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public CategoryStatistic(Record record) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        tags \u003d record.getTags();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (record.getMoneyFlow().toDouble() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            throw new IllegalStateException(MoneyFlow.MESSAGE_MONEY_FLOW_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (isExpense(record)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalExpense \u003d Math.abs(record.getMoneyFlow().toDouble());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalIncome \u003d Math.abs(record.getMoneyFlow().toDouble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public double getTotalIncome() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return totalIncome;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public double getTotalExpense() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return totalExpense;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Adds {@code MoneyFlow} of record to {@code CategoryStatistic} */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void add(Record record) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assert(record.getTags().equals(tags));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (isExpense(record)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalExpense +\u003d Math.abs(record.getMoneyFlow().toDouble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalIncome +\u003d Math.abs(record.getMoneyFlow().toDouble());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private boolean isExpense(Record record) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return record.getMoneyFlow().toDouble() \u003c 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 50,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/summary/CategoryStatisticsList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This class represents a list to store the statistics of each category within a certain time period."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class CategoryStatisticsList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private HashMap\u003cSet\u003cTag\u003e, CategoryStatistic\u003e categoryStats;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public CategoryStatisticsList(List\u003cRecord\u003e recordList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        categoryStats \u003d new HashMap\u003cSet\u003cTag\u003e, CategoryStatistic\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (Record r : recordList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            Set\u003cTag\u003e tags \u003d r.getTags();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            if (categoryStats.containsKey(tags)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                categoryStats.get(tags).add(r);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                categoryStats.put(r.getTags(), new CategoryStatistic(r));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Returns the contents of the internal {@link HashMap} as a read only {@link ObservableList}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public ObservableList\u003cCategoryStatistic\u003e getReadOnlyStatsList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        List\u003cCategoryStatistic\u003e statsList \u003d categoryStats.keySet().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                .map(s -\u003e categoryStats.get(s)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return FXCollections.unmodifiableObservableList(FXCollections.observableList(statsList));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 29,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/summary/DaySummary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.MoneyUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This class represents the summary of all financial activity within a day."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class DaySummary extends Summary {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private MoneyFlow totalExpense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private MoneyFlow totalIncome;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private MoneyFlow total;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public DaySummary(Record record) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        date \u003d record.getDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MoneyFlow money \u003d record.getMoneyFlow();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (isExpense(money)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalExpense \u003d money;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalIncome \u003d new MoneyFlow(\"+0\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalIncome \u003d money;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalExpense \u003d new MoneyFlow(\"-0\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        total \u003d money;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public DaySummary(Date date, MoneyFlow totalExpense, MoneyFlow totalIncome, MoneyFlow total) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireAllNonNull(date, totalExpense, totalIncome, total);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.totalExpense \u003d totalExpense;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.totalIncome \u003d totalIncome;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.total \u003d total;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public MoneyFlow getTotalExpense() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return totalExpense;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public MoneyFlow getTotalIncome() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return totalIncome;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public MoneyFlow getTotal() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void add(Record record) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MoneyFlow money \u003d record.getMoneyFlow();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (isExpense(money)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalExpense \u003d MoneyUtil.add(totalExpense, money);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalIncome \u003d MoneyUtil.add(totalIncome, money);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        total \u003d MoneyUtil.add(total, money);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private boolean isExpense(MoneyFlow money) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return money.toDouble() \u003c 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return this \u003d\u003d other // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                || (other instanceof DaySummary // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 date.equals(((DaySummary) other).date)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 totalExpense.equals(((DaySummary) other).totalExpense)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 totalIncome.equals(((DaySummary) other).totalIncome)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 total.equals(((DaySummary) other).total));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return \"Date: \" + date + \"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \"Total Expense: \" + totalExpense + \"\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \"Total Income: \" + totalIncome + \"\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \"Total: \" + total;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 82,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/summary/MonthSummary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.MoneyUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This class represents all financial activity in a month"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class MonthSummary extends Summary {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private MoneyFlow totalExpense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private MoneyFlow totalIncome;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private MoneyFlow total;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public MonthSummary(Record record) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        month \u003d new Month(record.getDate().getMonth(), record.getDate().getYear());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MoneyFlow money \u003d record.getMoneyFlow();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (isExpense(money)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalExpense \u003d money;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalIncome \u003d new MoneyFlow(\"+0\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalIncome \u003d money;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalExpense \u003d new MoneyFlow(\"-0\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        total \u003d money;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public MonthSummary(Month month, MoneyFlow totalExpense, MoneyFlow totalIncome, MoneyFlow total) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireAllNonNull(month, totalExpense, totalIncome, total);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.totalExpense \u003d totalExpense;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.totalIncome \u003d totalIncome;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.total \u003d total;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public MoneyFlow getTotalExpense() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return totalExpense;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public MoneyFlow getTotalIncome() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return totalIncome;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public MoneyFlow getTotal() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void add(Record record) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MoneyFlow money \u003d record.getMoneyFlow();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (isExpense(money)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalExpense \u003d MoneyUtil.add(totalExpense, money);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            totalIncome \u003d MoneyUtil.add(totalIncome, money);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        total \u003d MoneyUtil.add(total, money);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private boolean isExpense(MoneyFlow money) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return money.toDouble() \u003c 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return this \u003d\u003d other // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                || (other instanceof MonthSummary // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 month.equals(((MonthSummary) other).month)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 totalExpense.equals(((MonthSummary) other).totalExpense)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 totalIncome.equals(((MonthSummary) other).totalIncome)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 total.equals(((MonthSummary) other).total));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return \"Month: \" + month + \"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \"Total Expense: \" + totalExpense + \"\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \"Total Income: \" + totalIncome + \"\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \"Total: \" + total;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 82,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/summary/Summary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This class represents a summary in FinancialPlanner which records can be added to."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public abstract class Summary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    protected MoneyFlow totalIncome;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    protected MoneyFlow totalExpense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    protected MoneyFlow total;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Adds record into the summary object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param record"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public abstract void add(Record record);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 16,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/summary/SummaryByDateList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.ui.SummaryEntry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This class represents a list containing all DaySummary objects computed from a given list of records"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * and a predicate criteria. The internal implementation is a HashMap but it returns a list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * and implements only list functions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class SummaryByDateList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private HashMap\u003cDate, DaySummary\u003e summaryMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryByDateList(List\u003cRecord\u003e recordList , Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireAllNonNull(recordList, predicate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (Record r : recordList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            if (predicate.test(r)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                addRecordToMap(r);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public ObservableList\u003cSummaryEntry\u003e getSummaryList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        List\u003cSummaryEntry\u003e list \u003d summaryMap.keySet().stream().map(k -\u003e convertToUiFriendly(summaryMap.get(k)))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return FXCollections.observableList(list);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public HashMap\u003cDate, DaySummary\u003e getSummaryMap() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return summaryMap;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Converts each {@code DaySummary} to a UI friendly counterpart for display"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryEntry convertToUiFriendly(DaySummary summary) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new SummaryEntry(summary.getDate().toString(), summary.getTotalIncome().toString(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                summary.getTotalExpense().toString(), summary.getTotal().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Adds a record to the {@code summaryMap} while following some rules."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * If there exists a summary with {@code Date} of record, then record is added to the summary."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Else, it creates a summary with the details of the record."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param record given record"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @see Summary#add(Record)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void addRecordToMap(Record record) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Date date \u003d record.getDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (summaryMap.containsKey(date)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            summaryMap.get(date).add(record);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            summaryMap.put(date, new DaySummary(record));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return summaryMap.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                || (other instanceof SummaryByDateList // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 summaryMap.equals(((SummaryByDateList) other).summaryMap));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 64,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/summary/SummaryByMonthList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.ui.SummaryEntry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This class represents a list containing all MonthSummary objects computed from a given list of records"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * and a predicate criteria. The internal implementation is a HashMap but it returns a list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * and implements only list functions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class SummaryByMonthList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    protected HashMap\u003cMonth, MonthSummary\u003e summaryMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryByMonthList(List\u003cRecord\u003e recordList , Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (Record r : recordList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            if (predicate.test(r)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                addRecordToMap(r);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public ObservableList\u003cSummaryEntry\u003e getSummaryList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        List\u003cSummaryEntry\u003e list \u003d summaryMap.keySet().stream().map(k -\u003e convertToUiFriendly(summaryMap.get(k)))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return FXCollections.observableList(list);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public HashMap\u003cMonth, MonthSummary\u003e getSummaryMap() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return summaryMap;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Converts each {@code MonthSummary} to a UI friendly counterpart for display"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryEntry convertToUiFriendly(MonthSummary summary) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new SummaryEntry(summary.getMonth().toString(), summary.getTotalIncome().toString(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                summary.getTotalExpense().toString(), summary.getTotal().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Adds a record to the {@code summaryMap} while following some rules."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * If there exists a summary with {@code Date} of record, then record is added to the summary."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Else, it creates a summary with the details of the record."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param record given record"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @see Summary#add(Record)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    protected void addRecordToMap(Record record) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Month month \u003d new Month(record.getDate().getMonth(), record.getDate().getYear());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (summaryMap.containsKey(month)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            summaryMap.get(month).add(record);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            summaryMap.put(month, new MonthSummary(record));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return summaryMap.size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                || (other instanceof SummaryByMonthList // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 summaryMap.equals(((SummaryByMonthList) other).summaryMap));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 62,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.FinancialPlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code FinancialPlanner} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static Limit[] getSampleLimits() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new Limit[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            new Limit(new Date(\"21-9-2018\"), new Date(\"27-9-2018\"), new MoneyFlow(\"-100\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            new Limit(new Date(\"20-5-2017\"), new Date(\"27-9-2018\"), new MoneyFlow(\"-200\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Record[] getSampleRecords() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Record[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"Shopping with girlfriend\"), new Date(\"21-9-2018\"), new MoneyFlow(\"-101.30\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"girlfriend\", \"shopping\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"Lunch jifan\"), new Date(\"23-4-2018\"), new MoneyFlow(\"-3.50\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"Lunch with dad\"), new Date(\"29-5-2018\"), new MoneyFlow(\"-24.49\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"Allowance from Dad\"), new Date(\"30-6-2018\"), new MoneyFlow(\"+437.49\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"Payment for fine food\"), new Date(\"30-9-2018\"), new MoneyFlow(\"-7.58\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"Utown\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"Payment for western\"), new Date(\"15-7-2018\"), new MoneyFlow(\"-4.50\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"food\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"Indo\"), new Date(\"28-2-2018\"), new MoneyFlow(\"-5.6\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"caifan\"), new Date(\"26-9-2018\"), new MoneyFlow(\"-3.80\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"owesMoney\", \"friends\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"Income from work\"), new Date(\"26-9-2018\"), new MoneyFlow(\"+60.0\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"job\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"Payment from ZT\"), new Date(\"25-9-2018\"), new MoneyFlow(\"+5.90\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"Payment for mala\"), new Date(\"26-9-2018\"), new MoneyFlow(\"-10.50\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"Payment for chicken rice\"), new Date(\"27-9-2018\"), new MoneyFlow(\"-0.90\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"food\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            new Record(new Name(\"Random income\"), new Date(\"31-03-2018\"), new MoneyFlow(\"+14.50\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"random\"))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyFinancialPlanner getSampleFinancialPlanner() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        FinancialPlanner sampleAb \u003d new FinancialPlanner();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Record sampleRecord : getSampleRecords()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addRecord(sampleRecord);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        for (Limit sampleLimit : getSampleLimits()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            sampleAb.addLimit(sampleLimit);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 11,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/FinancialPlannerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.FinancialPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.DateBasedLimitList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link FinancialPlanner}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface FinancialPlannerStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file of the record list storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getRecordListFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Returns the file path for the data file of the limit list storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    Path getLimitListFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Financial Planner storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns FinancialPlanner data as a {@link ReadOnlyFinancialPlanner}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyFinancialPlanner\u003e readFinancialPlanner() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getRecordListFilePath()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyFinancialPlanner\u003e readFinancialPlanner(Path recordListFilePath)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyFinancialPlanner} to the storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param financialPlanner cannot be null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveFinancialPlanner(ReadOnlyFinancialPlanner financialPlanner) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveFinancialPlanner(ReadOnlyFinancialPlanner)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveFinancialPlanner(ReadOnlyFinancialPlanner financialPlanner, Path recordListFilePath) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Record List storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UniqueRecordList data as a {@link UniqueRecordList}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUniqueRecordList\u003e readRecordList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getRecordListFilePath()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUniqueRecordList\u003e readRecordList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the RecordList of the given {@link ReadOnlyFinancialPlanner} to the storage."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param financialPlanner cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    void saveRecordList(ReadOnlyFinancialPlanner financialPlanner) throws IOException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @see #saveRecordList(ReadOnlyFinancialPlanner)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveRecordList(ReadOnlyFinancialPlanner financialPlanner, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Limit List storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns limitlist data as a limitlist."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cDateBasedLimitList\u003e readLimitList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * see previous one"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cDateBasedLimitList\u003e readLimitList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * save the given limitlist to the storage."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param limitList"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveLimitList(ReadOnlyFinancialPlanner limitList) throws IOException;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveLimitList(ReadOnlyFinancialPlanner, Path)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveLimitList(ReadOnlyFinancialPlanner limitList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 21,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.model.FinancialPlannerChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.commons.events.model.LimitListChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.DateBasedLimitList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of FinancialPlanner data in local storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private FinancialPlannerStorage financialPlannerStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(FinancialPlannerStorage financialPlannerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.financialPlannerStorage \u003d financialPlannerStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Methods to get file paths \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getRecordListFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return financialPlannerStorage.getRecordListFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Financial Planner methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyFinancialPlanner\u003e readFinancialPlanner() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readFinancialPlanner(financialPlannerStorage.getRecordListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyFinancialPlanner\u003e readFinancialPlanner(Path recordListFilePath)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + recordListFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return financialPlannerStorage.readFinancialPlanner(recordListFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFinancialPlanner(ReadOnlyFinancialPlanner financialPlanner) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFinancialPlanner(financialPlanner, financialPlannerStorage.getRecordListFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFinancialPlanner(ReadOnlyFinancialPlanner financialPlanner, Path recordListFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + recordListFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        financialPlannerStorage.saveFinancialPlanner(financialPlanner, recordListFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Record List methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUniqueRecordList\u003e readRecordList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return readRecordList(financialPlannerStorage.getRecordListFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUniqueRecordList\u003e readRecordList(Path filePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return financialPlannerStorage.readRecordList(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveRecordList(ReadOnlyFinancialPlanner financialPlanner) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        saveRecordList(financialPlanner, financialPlannerStorage.getRecordListFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveRecordList(ReadOnlyFinancialPlanner financialPlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        financialPlannerStorage.saveRecordList(financialPlanner, filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event management methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleFinancialPlannerChangedEvent(FinancialPlannerChangedEvent event) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            saveRecordList(event.data);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void handleLimitListChangedEvent(LimitListChangedEvent event) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            saveLimitList(event.data);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LimitList storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Path getLimitListFilePath() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return financialPlannerStorage.getLimitListFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Optional\u003cDateBasedLimitList\u003e readLimitList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return readLimitList(financialPlannerStorage.getLimitListFilePath());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Optional\u003cDateBasedLimitList\u003e readLimitList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return financialPlannerStorage.readLimitList(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void saveLimitList(ReadOnlyFinancialPlanner limitList) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        saveLimitList(limitList, financialPlannerStorage.getLimitListFilePath());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void saveLimitList(ReadOnlyFinancialPlanner limitList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        financialPlannerStorage.saveLimitList(limitList, filePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 46,
      "-": 125
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/XmlAdaptedLimit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * Xml Adapted Limit"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class XmlAdaptedLimit {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Limit\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private String dateStart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private String dateEnd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private String moneyFlow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * No argument constructor for the XmlAdaptedLimit as required"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public XmlAdaptedLimit() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Detailed input strings constructor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public XmlAdaptedLimit (String dateStart, String dateEnd, String moneyFlow) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.dateStart \u003d dateStart;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.dateEnd \u003d dateEnd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.moneyFlow \u003d moneyFlow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Given Limit type constructor."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param limit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public XmlAdaptedLimit(Limit limit) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.dateStart \u003d limit.getDateStart().value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.dateEnd \u003d limit.getDateEnd().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.moneyFlow \u003d limit.getLimitMoneyFlow().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Change the xml file storage into the actual limit module."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Limit toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (dateStart \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!Date.isValidDateFormat(dateStart)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        final Date modelDateStart \u003d new Date(dateStart);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (dateEnd \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!Date.isValidDateFormat(dateEnd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        final Date modelDateEnd \u003d new Date(dateEnd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (moneyFlow \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, MoneyFlow"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                    .class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!MoneyFlow.isValidMoneyFlow(moneyFlow)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new IllegalValueException(MoneyFlow.MESSAGE_MONEY_FLOW_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        final MoneyFlow modelMoneyFlow \u003d new MoneyFlow(moneyFlow);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new Limit(modelDateStart, modelDateEnd, modelMoneyFlow);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!(other instanceof XmlAdaptedLimit)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        XmlAdaptedLimit otherLimit \u003d (XmlAdaptedLimit) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return Objects.equals(dateStart, otherLimit.dateStart)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                \u0026\u0026 Objects.equals(dateEnd, otherLimit.dateEnd)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                \u0026\u0026 Objects.equals(moneyFlow, otherLimit.moneyFlow);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 92,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/XmlFinancialPlannerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.FinancialPlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.DateBasedLimitList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.storage.xmljaxb.XmlSerializableFinancialPlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access FinancialPlanner data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFinancialPlannerStorage implements FinancialPlannerStorage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlFinancialPlannerStorage.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path recordListFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private Path limitListFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlFinancialPlannerStorage(Path recordListFilePath, Path limitListFilePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.recordListFilePath \u003d recordListFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.limitListFilePath \u003d limitListFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getRecordListFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return recordListFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Path getLimitListFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return limitListFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Financial Planner Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyFinancialPlanner\u003e readFinancialPlanner() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return readFinancialPlanner(recordListFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyFinancialPlanner\u003e readFinancialPlanner(Path recordListFilePath)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(recordListFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyFinancialPlanner\u003e financialPlannerOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cUniqueRecordList\u003e recordListOptional \u003d readRecordList(recordListFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (recordListOptional.isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            FinancialPlanner financialPlanner \u003d new FinancialPlanner();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            financialPlanner.resetData(recordListOptional.get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            financialPlannerOptional \u003d Optional.of(financialPlanner);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return financialPlannerOptional;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFinancialPlanner(ReadOnlyFinancialPlanner financialPlanner) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFinancialPlanner(financialPlanner, recordListFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFinancialPlanner(ReadOnlyFinancialPlanner financialPlanner, Path recordListFilePath)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        saveRecordList(financialPlanner, recordListFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Record List Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUniqueRecordList\u003e readRecordList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return readRecordList(recordListFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readRecordList()}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUniqueRecordList\u003e readRecordList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"FinancialPlanner file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableFinancialPlanner xmlFinancialPlanner \u003d XmlFileStorage.loadDataFromSaveFile(filePath,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableFinancialPlanner.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlFinancialPlanner.toModelType());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void saveRecordList(ReadOnlyFinancialPlanner financialPlanner) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        saveRecordList(financialPlanner, recordListFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Similar to {@link FinancialPlannerStorage#saveRecordList(ReadOnlyFinancialPlanner)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveRecordList(ReadOnlyFinancialPlanner financialPlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(financialPlanner);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableFinancialPlanner(financialPlanner));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Limit Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Optional\u003cDateBasedLimitList\u003e readLimitList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return readLimitList(limitListFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Optional\u003cDateBasedLimitList\u003e readLimitList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            logger.info(\"The LimitList file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        XmlSerializableLimitList xmlLimitList \u003d XmlFileStorage.loadDataFromSaveFile(filePath,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                XmlSerializableLimitList.class);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return Optional.of(xmlLimitList.toModelType());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void saveLimitList(ReadOnlyFinancialPlanner limitList) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        saveLimitList(limitList, limitListFilePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Similar to {@link FinancialPlannerStorage#saveRecordList(ReadOnlyFinancialPlanner)}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void saveLimitList(ReadOnlyFinancialPlanner limitList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(limitList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableLimitList(limitList));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 52,
      "-": 123
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/XmlSerializableLimitList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.DateBasedLimitList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.storage.xmljaxb.XmlSerializableClass;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * The limit list that is serializable to XML format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "@XmlRootElement(name \u003d \"LimitList\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableLimitList extends XmlSerializableClass\u003cDateBasedLimitList\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LIMIT \u003d \"There are redundant limits for the same period of time\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private List\u003cXmlAdaptedLimit\u003e limits;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public XmlSerializableLimitList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        limits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableLimitList(ReadOnlyFinancialPlanner src) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        limits.addAll(src.getLimitList().stream().map(XmlAdaptedLimit::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public DateBasedLimitList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        DateBasedLimitList dateBasedLimitList \u003d new DateBasedLimitList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        for (XmlAdaptedLimit l : limits) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            Limit limit \u003d l.toModelType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (dateBasedLimitList.hasSameDatesLimit(limit)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_LIMIT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            dateBasedLimitList.add(limit);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateBasedLimitList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        if (!(other instanceof XmlSerializableLimitList)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return limits.equals(((XmlSerializableLimitList) other).limits);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 48,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/xmljaxb/XmlSerializableFinancialPlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage.xmljaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.exceptions.DuplicateRecordException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable FinancialPlanner that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"financialplanner\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableFinancialPlanner extends XmlSerializableClass\u003cUniqueRecordList\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"Records list contains duplicate record(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedRecord\u003e records;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableFinancialPlanner."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableFinancialPlanner() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableFinancialPlanner(ReadOnlyFinancialPlanner src) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        records.addAll(src.getRecordList().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedRecord::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this RecordList into the model\u0027s {@code RecordList} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedRecord}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueRecordList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueRecordList recordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedRecord p : records) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Record record \u003d p.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                recordList.add(record);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicateRecordException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return recordList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: change this to follow the others"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableFinancialPlanner)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return records.equals(((XmlSerializableFinancialPlanner) other).records);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 1,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/CategoryBreakdown.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Control;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This UI component is responsible for displaying the breakdown of total income and expenses into categories"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * as a pie chart."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class CategoryBreakdown extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String FXML \u003d \"CategoryBreakdown.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private AnchorPane root;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e pieChartData;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public CategoryBreakdown(ObservableList\u003cChartData\u003e toDisplay, String label, Double total) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart \u003d new CustomPieChart(toDisplay, total);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        initPieChart(label);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        root.setStyle(\"-fx-background-color: grey\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        root.getChildren().add(pieChart);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Sets up the pieChart\u0027s format */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void initPieChart(String label) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart.setTitle(label);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart.setLabelsVisible(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart.setLabelLineLength(20);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart.setLegendSide(Side.RIGHT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart.setPrefSize(800, 400);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart.setMinSize(Control.USE_PREF_SIZE, Control.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart.maxHeight(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart.maxWidth(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart.minHeight(Control.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart.minHeight(Control.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        AnchorPane.setTopAnchor(pieChart, 0.0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        AnchorPane.setBottomAnchor(pieChart, 0.0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        AnchorPane.setRightAnchor(pieChart, 0.0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        AnchorPane.setLeftAnchor(pieChart, 0.0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void setPieChartSize(Double prefWidth, Double prefHeight) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (prefWidth !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            pieChart.setPrefWidth(prefWidth);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (prefHeight !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            pieChart.setPrefHeight(prefHeight);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void disableLegend() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void setTitlePosition(Side side) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        pieChart.setTitleSide(side);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 63,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ChartData.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This class represents any type of chart data that can be split into 2 parameters, key and the value which is a double"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class ChartData {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public final String key;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public final Double value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public ChartData(String key, Double value) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 14,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/CustomPieChart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.shape.Shape;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This class is a custom PieChart class that can be used to display statistics in FinancialPlanner"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class CustomPieChart extends PieChart {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String CSS_FILE \u003d \"view/DarkTheme.css\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public CustomPieChart(ObservableList\u003cChartData\u003e pieChartData, Double total) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        ObservableList\u003cData\u003e dataAsPercentages \u003d convertToPercentages(pieChartData, total);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        getStylesheets().add(CSS_FILE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        setLegend(new CustomLegend(this, pieChartData));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        setData(dataAsPercentages);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        dataAsPercentages.forEach(data -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                data.nameProperty().bind(Bindings.concat(data.getName(), \" \", data.pieValueProperty(), \"%\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Converts a given ObservableList containing {@see ChartData} to a list that can be read by {@link PieChart}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e convertToPercentages(ObservableList\u003cChartData\u003e data, Double total) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        List\u003cData\u003e dataList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (total \u003e 0.0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            dataList \u003d data.stream().map(d -\u003e new PieChart.Data(d.key, Double.parseDouble("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                    String.format(\"%.2f\", d.value / total * 100.0))))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            dataList \u003d data.stream().map(d -\u003e new PieChart.Data(d.key, d.value)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return FXCollections.observableList(dataList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * This class represents a customized legend panel for the pieChart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    class CustomLegend extends GridPane {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        CustomLegend(PieChart chart, ObservableList\u003cChartData\u003e pieChartData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            setHgap(10);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            setVgap(10);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            for (ChartData d : pieChartData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                Label legendText \u003d createLabel(d.key + \"   \" + convertToMoney(d.value));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                legendText.setWrapText(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                addRow(index, createSymbol(pieChartData.indexOf(d)), legendText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        private Label createLabel(String text) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            Label label \u003d new Label(text);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            label.getStyleClass().add(\"default-legend-text\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            return label;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        private String convertToMoney(Double data) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            return String.format(\"$%.2f\", data);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         * Creates the symbol to be placed at the side of the label"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        private Node createSymbol(int index) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            Shape symbol \u003d new Rectangle(10, 10, 10, 10);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            symbol.getStyleClass().add(String.format(\"default-color%d-chart-pie-legend\", index % 8));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            return symbol;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 70,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/DetailedRecordCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.RecordPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This UI component is responsible for displaying detailed information for each record"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class DetailedRecordCard extends UiPart\u003cRegion\u003e implements Switchable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String FXML \u003d \"DetailedRecordCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String DATE_LABEL \u003d \"Date:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String MONEYFLOW_LABEL \u003d \"Credit(+)/Debit(-):\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private GridPane detailedCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Label dateLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Label moneyFlowLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Label moneyFlow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private FlowPane biggerTags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public DetailedRecordCard() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        dateLabel.setText(DATE_LABEL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        moneyFlowLabel.setText(MONEYFLOW_LABEL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        detailedCard.setVisible(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Loads the detailed record panel with all record information"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param record"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void loadRecordPage(Record record) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (record !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            name.setText(record.getName().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            date.setText(record.getDate().toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            moneyFlow.setText(record.getMoneyFlow().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            biggerTags.getChildren().clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            record.getTags().forEach(tag -\u003e biggerTags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            hide();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        getRoot().toFront();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        detailedCard.setVisible(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        getRoot().toBack();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        detailedCard.setVisible(false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Handles RecordPanelSelectionChangedEvent passed from MainWindow\u0027s delegate function"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param event event to be handled"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void handleRecordPanelSelectionChangedEvent(RecordPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        loadRecordPage(event.getNewSelection());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 79,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.RecordPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ShowPieChartStatsEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ShowSummaryTableEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.UpdateWelcomePanelEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.Logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private RecordListPanel recordListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Panels in the main Ui Panel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private DetailedRecordCard detailedRecordCard;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatsDisplayPanel statsDisplayPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private WelcomePanel welcomePanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane mainUiPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane recordListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic, Model model) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        fillMainUiPanel();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        recordListPanel \u003d new RecordListPanel(logic.getFilteredRecordList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        recordListPanelPlaceholder.getChildren().add(recordListPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getFinancialPlannerFilePath());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills the main Ui Panel which will be used for all ui output like welcomePanel,statistics,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * summary or selection"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void fillMainUiPanel() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        statsDisplayPanel \u003d new StatsDisplayPanel();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        mainUiPanelPlaceholder.getChildren().add(statsDisplayPanel.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        detailedRecordCard \u003d new DetailedRecordCard();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        mainUiPanelPlaceholder.getChildren().add(detailedRecordCard.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        welcomePanel \u003d new WelcomePanel(model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        mainUiPanelPlaceholder.getChildren().add(welcomePanel.getRoot());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public RecordListPanel getRecordListPanel() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        return recordListPanel;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /* ------------------ Delegates for event management system for switching of panels ----------------------------- */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    //@@author tenvinc"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void handleShowSummaryTableEvent(ShowSummaryTableEvent event) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (Node node: mainUiPanelPlaceholder.getChildren()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            node.setVisible(false);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        statsDisplayPanel.handleShowSummaryTableEvent(event);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void handleShowPieCharStatsEvent(ShowPieChartStatsEvent event) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (Node node: mainUiPanelPlaceholder.getChildren()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            node.setVisible(false);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        statsDisplayPanel.handleShowPieChartStatsEvent(event);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void handleRecordPanelSelectionChangedEvent(RecordPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (Node node: mainUiPanelPlaceholder.getChildren()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            node.setVisible(false);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        detailedRecordCard.handleRecordPanelSelectionChangedEvent(event);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void handleUpdateWelcomePanelEvent(UpdateWelcomePanelEvent event) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (Node node: mainUiPanelPlaceholder.getChildren()) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            node.setVisible(false);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        welcomePanel.handleUpdateWelcomePanelEvent(event);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 37,
      "-": 225
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/RecordCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Record}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecordCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"RecordListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/financialplanner-level4/issues/336\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     *     The issue on FinancialPlanner level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Record record;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label moneyFlow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public RecordCard(Record record, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.record \u003d record;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(record.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        date.setText(record.getDate().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        moneyFlow.setText(record.getMoneyFlow().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        record.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RecordCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        RecordCard card \u003d (RecordCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 record.equals(card.record);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/StatsDisplayPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ShowPieChartStatsEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ShowSummaryTableEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.CategoryStatistic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This UI component is responsible for managing the tabs where the statistics will be displayed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class StatsDisplayPanel extends UiPart\u003cRegion\u003e implements Switchable {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String FXML \u003d \"StatsDisplayPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String untaggedLabel \u003d \"\u003c\u003cuntagged\u003e\u003e\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private TabPane tabManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public StatsDisplayPanel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        hide();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        getRoot().toFront();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        getRoot().toBack();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Removes all existing tabs from the {@code TabPane} */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void clearTabs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        tabManager.getTabs().clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Deletes existing tabs of the same text if any and creates a new one."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * This prevents the system from creating duplicates."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param tabs Can be 1 tab or multiple tabs given as input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void createTabs(Tab... tabs) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (Tab tab : tabs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            tabManager.getTabs().add(tab);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            tabManager.getSelectionModel().select(tab);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Creates the CategoryBreakdown object with the total expense and tag of each CategoryStatistic */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Node createTotalExpenseBreakdown(ObservableList\u003cCategoryStatistic\u003e data) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Pair\u003c ObservableList\u003cChartData\u003e, Double\u003e chartData \u003d extractExpenseChartData(data);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (chartData.getKey().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            Label label \u003d new Label(\"Nothing has been found! Please input a more appropriate range:)\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            label.getStyleClass().add(\"label-bright\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            return new AnchorPane(label);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new CategoryBreakdown(chartData.getKey(), \"Total Expense for the period\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                chartData.getValue()).getRoot();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Extracts the label and expense information and places it in a list of ChartData */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Pair\u003c ObservableList\u003cChartData\u003e, Double\u003e extractExpenseChartData(ObservableList\u003cCategoryStatistic\u003e data) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        List\u003cChartData\u003e chartDataList \u003d new ArrayList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Double totalExpense \u003d 0.0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (CategoryStatistic d : data) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            if (d.getTotalExpense() \u003e 0.0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                String label;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                if (d.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                    label \u003d untaggedLabel;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                    label \u003d d.getTags().toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                chartDataList.add(new ChartData(label, d.getTotalExpense()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                totalExpense +\u003d d.getTotalExpense();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new Pair\u003c\u003e(FXCollections.observableList(chartDataList), totalExpense);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Creates the CategoryBreakdown object with the total income and tag of each CategoryStatistic */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Node createTotalIncomeBreakdown(ObservableList\u003cCategoryStatistic\u003e data) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Pair\u003c ObservableList\u003cChartData\u003e, Double\u003e chartData \u003d extractIncomeChartData(data);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (chartData.getKey().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            Label label \u003d new Label(\"Nothing has been found! Please input a more appropriate range:)\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            label.getStyleClass().add(\"label-bright\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            return new AnchorPane(label);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new CategoryBreakdown(chartData.getKey(), \"Total Income for the period\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                chartData.getValue()).getRoot();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Extracts the label and income information and places it in a list of ChartData */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Pair\u003c ObservableList\u003cChartData\u003e, Double\u003e extractIncomeChartData(ObservableList\u003cCategoryStatistic\u003e data) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        List\u003cChartData\u003e chartDataList \u003d new ArrayList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Double totalIncome \u003d 0.0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (CategoryStatistic d : data) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            if (d.getTotalIncome() \u003e 0.0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                String label;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                if (d.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                    label \u003d untaggedLabel;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                    label \u003d d.getTags().toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                chartDataList.add(new ChartData(label, d.getTotalIncome()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                totalIncome +\u003d d.getTotalIncome();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new Pair\u003c\u003e(FXCollections.observableList(chartDataList), totalIncome);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Handles the ShowSummaryTableEvent that is passed from MainWindow\u0027s delegate function."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param event event to be handled"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void handleShowSummaryTableEvent(ShowSummaryTableEvent event) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Tab summaryTab \u003d new Tab(SummaryDisplay.LABEL , new SummaryDisplay(event.data).getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        clearTabs();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        createTabs(summaryTab);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        show();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Handles the ShowPieChartStatsEvent that is passed from MainWindow\u0027s delegate function."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param event event to be handled"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void handleShowPieChartStatsEvent(ShowPieChartStatsEvent event) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Tab categoryExpenseTab \u003d new Tab(\"Category Breakdown For Expenses\", createTotalExpenseBreakdown("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                event.data));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Tab categoryIncomeTab \u003d new Tab(\"Category Breakdown For Income\", createTotalIncomeBreakdown("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                event.data));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        clearTabs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        createTabs(categoryExpenseTab, categoryIncomeTab);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 140,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/SummaryDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This UI component is responsible for displaying the summary requested by the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class SummaryDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String LABEL \u003d \"Summary Table\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String FXML \u003d \"SummaryDisplay.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private ObservableList\u003cSummaryEntry\u003e data \u003d FXCollections.emptyObservableList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private TableView\u003cSummaryEntry\u003e summaryTable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private AnchorPane summaryDisplay;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private TableColumn dateColumn;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private TableColumn totalIncomeColumn;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private TableColumn totalExpenseColumn;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private TableColumn totalColumn;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryDisplay(ObservableList\u003cSummaryEntry\u003e toDisplay) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        init(toDisplay);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * This function links up all the columns of {@code TableView} with the parameters of {@code SummaryEntry}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void init(ObservableList\u003cSummaryEntry\u003e toDisplay) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        dateColumn.setCellValueFactory("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new PropertyValueFactory\u003cSummaryEntry, String\u003e(\"timeStamp\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        totalIncomeColumn.setCellValueFactory("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new PropertyValueFactory\u003cSummaryEntry, String\u003e(\"totalIncome\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        totalExpenseColumn.setCellValueFactory("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new PropertyValueFactory\u003cSummaryEntry, String\u003e(\"totalExpense\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        totalColumn.setCellValueFactory("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new PropertyValueFactory\u003cSummaryEntry, String\u003e(\"total\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summaryTable.setItems(toDisplay);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 52,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/SummaryEntry.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This represents a UI friendly summary entry."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class SummaryEntry {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final SimpleStringProperty timeStamp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final SimpleStringProperty totalIncome;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final SimpleStringProperty totalExpense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final SimpleStringProperty total;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryEntry(String timeStamp, String totalIncome, String totalExpense, String total) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.timeStamp \u003d new SimpleStringProperty(timeStamp);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.totalIncome \u003d new SimpleStringProperty(totalIncome);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.totalExpense \u003d new SimpleStringProperty(totalExpense);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.total \u003d new SimpleStringProperty(total);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public String getTimeStamp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return timeStamp.get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void setTimeStamp(String timeStamp) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.timeStamp.set(timeStamp);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public String getTotalIncome() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return totalIncome.get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void setTotalIncome(String totalIncome) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.totalIncome.set(totalIncome);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public String getTotalExpense() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return totalExpense.get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void setTotalExpense(String totalExpense) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.totalExpense.set(totalExpense);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public String getTotal() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return total.get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void setTotal(String total) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.total.set(total);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                || (other instanceof SummaryEntry // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 timeStamp.toString().equals(((SummaryEntry) other).timeStamp.toString())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 totalIncome.toString().equals(((SummaryEntry) other).totalIncome.toString())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 totalExpense.toString().equals(((SummaryEntry) other).totalExpense.toString())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u0026\u0026 total.toString().equals(((SummaryEntry) other).total.toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 60,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/WelcomePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.UpdateWelcomePanelEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.CategoryStatistic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.CategoryStatisticsList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * UI component that displays the default welcome page with statistic of the current month and a welcome message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class WelcomePanel extends UiPart\u003cRegion\u003e implements Switchable {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(WelcomePanel.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String FXML \u003d \"WelcomePanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final double prefPieChartWidth \u003d 300.0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final double prefPieChartHeight \u003d 300.0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private AnchorPane expenseStats;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private AnchorPane incomeStats;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Label welcomeMessage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public WelcomePanel(Model model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        welcomeMessage.setText(\"Welcome to FinancialPlanner!\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \"To start off, press F1 or type help into the command box above for the help windows! Enjoy!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        populateUi(new CategoryStatisticsList(model.getRecordsThisMonth()).getReadOnlyStatsList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        getRoot().toFront();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        getRoot().toBack();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Creates the CategoryBreakdown object with the total expense and tag of each CategoryStatistic */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Node createTotalExpenseBreakdown(Pair\u003cObservableList\u003cChartData\u003e, Double\u003e chartData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (chartData.getKey().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            Label label \u003d new Label(\"Nothing has been found! Please input a more appropriate range:)\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            return new AnchorPane(label);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        CategoryBreakdown categoryBreakdown \u003d new CategoryBreakdown(chartData.getKey(), \"Total Expense for the period\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                chartData.getValue());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        categoryBreakdown.setPieChartSize(prefPieChartWidth, prefPieChartHeight);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        categoryBreakdown.disableLegend();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        categoryBreakdown.setTitlePosition(Side.BOTTOM);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return categoryBreakdown.getRoot();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Extracts the label and expense information and places it in a list of ChartData */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Pair\u003c ObservableList\u003cChartData\u003e, Double\u003e extractExpenseChartData(ObservableList\u003cCategoryStatistic\u003e data) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        List\u003cChartData\u003e chartDataList \u003d new ArrayList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Double totalExpense \u003d 0.0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (CategoryStatistic d : data) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            if (d.getTotalExpense() \u003e 0.0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                chartDataList.add(new ChartData(d.getTags().toString(), d.getTotalExpense()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                totalExpense +\u003d d.getTotalExpense();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new Pair\u003c\u003e(FXCollections.observableList(chartDataList), totalExpense);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Creates the CategoryBreakdown object with the total income and tag of each CategoryStatistic */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Node createTotalIncomeBreakdown(Pair\u003cObservableList\u003cChartData\u003e, Double\u003e chartData) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (chartData.getKey().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            Label label \u003d new Label(\"Nothing has been found! Please input a more appropriate range:)\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            return new AnchorPane(label);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        CategoryBreakdown categoryBreakdown \u003d new CategoryBreakdown(chartData.getKey(), \"Total Income for the period\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                chartData.getValue());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        categoryBreakdown.setPieChartSize(prefPieChartWidth, prefPieChartHeight);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        categoryBreakdown.disableLegend();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        categoryBreakdown.setTitlePosition(Side.BOTTOM);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return categoryBreakdown.getRoot();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Extracts the label and income information and places it in a list of ChartData */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Pair\u003c ObservableList\u003cChartData\u003e, Double\u003e extractIncomeChartData(ObservableList\u003cCategoryStatistic\u003e data) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        List\u003cChartData\u003e chartDataList \u003d new ArrayList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Double totalIncome \u003d 0.0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (CategoryStatistic d : data) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            if (d.getTotalIncome() \u003e 0.0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                chartDataList.add(new ChartData(d.getTags().toString(), d.getTotalIncome()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                totalIncome +\u003d d.getTotalIncome();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new Pair\u003c\u003e(FXCollections.observableList(chartDataList), totalIncome);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /** Populates the welcome panel with its UI elements */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void populateUi(ObservableList\u003cCategoryStatistic\u003e toDisplay) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Pair\u003cObservableList\u003cChartData\u003e, Double\u003e expenseChartData \u003d extractExpenseChartData(toDisplay);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (expenseChartData.getKey().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            expenseStats.getChildren().clear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            Node expenseNode \u003d createTotalExpenseBreakdown(expenseChartData);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            expenseStats.getChildren().add(expenseNode);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Pair\u003cObservableList\u003cChartData\u003e, Double\u003e incomeChartData \u003d extractIncomeChartData(toDisplay);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (incomeChartData.getKey().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            incomeStats.getChildren().clear();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            Node incomeNode \u003d createTotalIncomeBreakdown(incomeChartData);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            incomeStats.getChildren().add(incomeNode);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Handles UpdateWelcomePanelEvent passed from MainWindow\u0027s delegate function"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param event event to be handled"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void handleUpdateWelcomePanelEvent(UpdateWelcomePanelEvent event) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        populateUi(event.data);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        show();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 125,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/CategoryBreakdown.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003c!-- @@author tenvinc --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"root\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 4,
      "-": 1
    }
  },
  {
    "path": "src/main/resources/view/DetailedRecordCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003c!-- @@author tenvinc --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003cGridPane fx:id\u003d\"detailedCard\" styleClass\u003d\"detail-pane_background\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "   \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"400\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "   \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "   \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"300\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "   \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "   \u003cVBox styleClass\u003d\"detail-pane_background\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"detail-pane_title_label\" text\u003d\"\\$name\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"biggerTags\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003cGridPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003cLabel fx:id\u003d\"dateLabel\" alignment\u003d\"TOP_LEFT\" minHeight\u003d\"20\" minWidth\u003d\"50\" prefWidth\u003d\"175.0\" styleClass\u003d\"detail-pane_bold_label\" text\u003d\"date:\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003cLabel fx:id\u003d\"date\" alignment\u003d\"TOP_LEFT\" styleClass\u003d\"detail-pane_small_label\" text\u003d\"\\$date\" underline\u003d\"true\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003cLabel fx:id\u003d\"moneyFlowLabel\" alignment\u003d\"TOP_LEFT\" minWidth\u003d\"175\" styleClass\u003d\"detail-pane_bold_label\" text\u003d\"money:\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003cLabel fx:id\u003d\"moneyFlow\" alignment\u003d\"BOTTOM_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" styleClass\u003d\"detail-pane_small_label\" text\u003d\"moneyflow\" underline\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003cLabel styleClass\u003d\"detail-pane_bold_label\" text\u003d\"Notes:\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003cTextArea promptText\u003d\"Enter your notes here...\" styleClass\u003d\"detail-pane_note\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 41,
      "-": 10
    }
  },
  {
    "path": "src/main/resources/view/StatsDisplayPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003c!-- @@author tenvinc --\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "   \u003cTabPane fx:id\u003d\"tabManager\" tabClosingPolicy\u003d\"UNAVAILABLE\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 5,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/SummaryDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003c!-- @@author tenvinc --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"summaryDisplay\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "   \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003cTableView fx:id\u003d\"summaryTable\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003ccolumns\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"dateColumn\" editable\u003d\"false\" minWidth\u003d\"100.0\" sortable\u003d\"false\" text\u003d\"DATE\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"totalIncomeColumn\" editable\u003d\"false\" minWidth\u003d\"200.0\" sortable\u003d\"false\" text\u003d\"TOTAL INCOME\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"totalExpenseColumn\" editable\u003d\"false\" minWidth\u003d\"200.0\" sortable\u003d\"false\" text\u003d\"TOTAL EXPENSE\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"totalColumn\" editable\u003d\"false\" minWidth\u003d\"300.0\" sortable\u003d\"false\" text\u003d\"NET MONEYFLOW\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003c/columns\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "   \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 16,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/WelcomePanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003c!-- @@author tenvinc --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" stylesheets\u003d\"DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003cVBox alignment\u003d\"TOP_CENTER\" styleClass\u003d\"box-welcome-panel\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \u003cGridPane gridLinesVisible\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"expenseStats\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"incomeStats\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                  \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            \u003cLabel fx:id\u003d\"welcomeMessage\" styleClass\u003d\"label-welcome\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                   text\u003d\"Label\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 24,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/SummaryDisplayHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.ui.SummaryEntry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * Provides a handle for {@code SummaryDisplay}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class SummaryDisplayHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String SUMMARY_DISPLAY_ID \u003d \"#summaryDisplay\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String SUMMARY_TABLE_ID \u003d \"#summaryTable\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private TableView summaryTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryDisplayHandle(AnchorPane node) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        super(node);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summaryTable \u003d getChildNode(SUMMARY_TABLE_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Checks whether the panel is visible to the user or not"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public boolean isPanelVisible() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return summaryTable.isVisible();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public ObservableList\u003cSummaryEntry\u003e getSummaryTableList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return summaryTable.getItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 27,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.getTypicalFinancialPlanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newRecord_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Record validRecord \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addRecord(validRecord);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitFinancialPlanner();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validRecord), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validRecord), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateRecord_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Record recordInList \u003d model.getFinancialPlanner().getRecordList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(recordInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 1,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.FinancialPlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_recordAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingRecordAdded modelStub \u003d new ModelStubAcceptingRecordAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Record validRecord \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validRecord).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validRecord), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validRecord), modelStub.recordsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateRecord_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Record validRecord \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validRecord);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRecord(validRecord);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Record alice \u003d new RecordBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Record bob \u003d new RecordBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addRecord(Record record) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteRecord(Record target) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void updateLimit(Limit target, Limit editedLimit) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyFinancialPlanner newData) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public ObservableList\u003cLimit\u003e getLimitList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyFinancialPlanner getFinancialPlanner() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cRecord\u003e getRecordsThisMonth() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void addLimit(Limit limit) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public Double getTotalSpend(Limit limit) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void deleteLimit(Limit limit) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public boolean hasSameDateLimit(Limit limit) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public boolean isExceededLimit (Limit limit) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        public void deleteListRecord(List\u003cRecord\u003e targetList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public String autoLimitCheck() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public String manualLimitCheck() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public String generateLimitOutput(boolean isExceeded, Double totalSpend, Limit limit) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public Limit getSameDatesLimit(Date dateStart, Date dateEnd) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        public void sortFilteredRecordList(String category, Boolean ascending) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoFinancialPlanner() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoFinancialPlanner() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoFinancialPlanner() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoFinancialPlanner() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitFinancialPlanner() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single record."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithRecord extends ModelStub {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Record record;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithRecord(Record record) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            this.record \u003d record;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.record.isSameRecord(record);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the record being added."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingRecordAdded extends ModelStub {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cRecord\u003e recordsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return recordsAdded.stream().anyMatch(record::isSameRecord);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addRecord(Record record) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            recordsAdded.add(record);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitFinancialPlanner() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyFinancialPlanner getFinancialPlanner() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FinancialPlanner();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 1,
      "nguyenngoclinhchi": 4,
      "oscarzeng": 61,
      "-": 214
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MONEYFLOW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.FinancialPlanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.EditRecordDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Payment from Amy\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Payment from Bob\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATE_AMY \u003d \"11-10-2004\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATE_BOB \u003d \"11-02-2004\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MONEYFLOW_INCOME_AMY \u003d \"+10.90\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MONEYFLOW_EXPENSE_BOB \u003d \"-11.50\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATE_START \u003d \"10-2-2018\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATE_END \u003d \"12-10-2018\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MONTH_START \u003d \"jan-2018\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MONTH_END \u003d \"dec-2018\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME \u003d \"James\u0026\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_DATE \u003d \"911a\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ILLOGICAL_DATE \u003d \"30-2-2018\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_LOGICAL_MONTH \u003d \"mon-2018\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_FORMAT_MONTH \u003d \"month-2018\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_MONEYFLOW \u003d \"11.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG \u003d \"hubby*\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DATE_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MONEYFLOW_INCOME_DESC_AMY \u003d \" \" + PREFIX_MONEYFLOW + VALID_MONEYFLOW_INCOME_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MONEYFLOW_EXPENSE_DESC_BOB \u003d \" \" + PREFIX_MONEYFLOW + VALID_MONEYFLOW_EXPENSE_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + INVALID_NAME; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + INVALID_DATE; // alphabets not allowed in date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_MONEYFLOW_DESC \u003d \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MONEYFLOW + INVALID_MONEYFLOW; // missing digit after decimal point"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + INVALID_TAG; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditRecordDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditRecordDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditRecordDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withDate(VALID_DATE_AMY).withMoneyFlow(VALID_MONEYFLOW_INCOME_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditRecordDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .withDate(VALID_DATE_BOB).withMoneyFlow(VALID_MONEYFLOW_EXPENSE_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the planner book and the filtered record list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FinancialPlanner expectedFinancialPlanner \u003d new FinancialPlanner(actualModel.getFinancialPlanner());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRecord\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredRecordList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFinancialPlanner, actualModel.getFinancialPlanner());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredRecordList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the record at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s planner book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: Look at this code again"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showRecordAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRecordList().size());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Record record \u003d model.getFilteredRecordList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d record.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredRecordList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredRecordList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the record"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * at the given {@code targetIndexInt} in the {@code model}\u0027s planner book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param targetIndexInt"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static void showRecordAtIndex(Model model, int targetIndexInt) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        assertTrue((targetIndexInt \u003c model.getFilteredRecordList().size()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        Record record \u003d model.getFilteredRecordList().get(targetIndexInt);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        final String[] splitName \u003d record.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        model.updateFilteredRecordList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        assertEquals(1, model.getFilteredRecordList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first record in {@code model}\u0027s filtered list from {@code model}\u0027s planner book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstRecord(Model model) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Record firstRecord \u003d model.getFilteredRecordList().get(0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deleteRecord(firstRecord);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitFinancialPlanner();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 10,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/DeleteCommandByDateEntryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.getTypicalFinancialPlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.testutil.TypicalDates;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.TypicalRecords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "public class DeleteCommandByDateEntryTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public void execute_validDateUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Date targetDate \u003d TypicalDates.DATE_FIRST_INDEX_DATE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRecord\u003e records \u003d filteredRecordList(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommandByDateEntry deleteCommandByDateEntry \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new DeleteCommandByDateEntry(TypicalDates.DATE_FIRST_INDEX_DATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommandByDateEntry.MESSAGE_DELETE_RECORDS_SUCCESS, TypicalDates.DATE_FIRST_INDEX_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d records.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (records.get(i).getDate().equals(targetDate)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedModel.deleteRecord(records.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                expectedModel.commitFinancialPlanner();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandTestUtil.assertCommandSuccess("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                deleteCommandByDateEntry, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        List\u003cRecord\u003e recordsToDelete \u003d listAllRecordToDelete(model, TypicalDates.DATE_FIRST_INDEX_DATE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        for (int i \u003d 0; i \u003c recordsToDelete.size() - 1; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            //ensure that only one record exists accordingly to the index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            List\u003cRecord\u003e records \u003d filteredRecordList(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            int targetIndexInt \u003d records.indexOf(recordsToDelete.get(i));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            CommandTestUtil.showRecordAtIndex(model, targetIndexInt);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            Index outOfBoundIndex \u003d TypicalIndexes.INDEX_LAST_RECORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            //ensure that outOfBoundIndex is still in bound of address book list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            assertTrue(outOfBoundIndex.getOneBased() \u003c model.getFinancialPlanner().getRecordList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteCommandByDateEntry deleteCommandByDateEntry \u003d new DeleteCommandByDateEntry("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    records.get(outOfBoundIndex.getZeroBased()).getDate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            CommandTestUtil.assertCommandFailure("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    deleteCommandByDateEntry, model, commandHistory,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    Messages.MESSAGE_NONEXISTENT_RECORD_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Date targetDate \u003d TypicalDates.DATE_FIRST_INDEX_DATE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRecord\u003e recordsToDelete \u003d listAllRecordToDelete(model, targetDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommandByDateEntry deleteCommandByDateEntry \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new DeleteCommandByDateEntry(TypicalDates.DATE_FIRST_INDEX_DATE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Record record : recordsToDelete) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.deleteRecord(record);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        expectedModel.commitFinancialPlanner();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        //delete the Records have required date"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        deleteCommandByDateEntry.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        //undo -\u003e reverts financialPlanner back to the prebious state and filtered record list to show all records"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        expectedModel.undoFinancialPlanner();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandTestUtil.assertCommandSuccess("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        //redo -\u003e same first record deleted again"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        expectedModel.redoFinancialPlanner();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandTestUtil.assertCommandSuccess("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_nonexistentDateUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Date outOfBoundDate \u003d TypicalRecords.OUT_OF_BOUND_DATE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommandByDateEntry deleteCommandByDateEntry \u003d new DeleteCommandByDateEntry(outOfBoundDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        //execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandTestUtil.assertCommandFailure("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                deleteCommandByDateEntry, model, commandHistory, Messages.MESSAGE_NONEXISTENT_RECORD_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        //single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * 1. Deletes a {@code Record} from a filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted record in the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the record object regardless of indexing."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_exsistentDateFilteredList_sameRecordDeleted() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommandByDateEntry deleteCommandByDateEntry \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                new DeleteCommandByDateEntry(TypicalDates.DATE_FIRST_INDEX_DATE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d TypicalDates.DATE_FIRST_INDEX_DATE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRecord\u003e records \u003d filteredRecordList(model);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRecord\u003e recordsToDelete \u003d listAllRecordToDelete(model, date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Record record : recordsToDelete) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.deleteRecord(record);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        expectedModel.commitFinancialPlanner();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        // delete -\u003e deletes second record in unfiltered record list / first record in filtered record list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        deleteCommandByDateEntry.execute(model, commandHistory);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        // undo -\u003e reverts address book back to previous state and filtered record list to show all records"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        expectedModel.undoFinancialPlanner();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(recordsToDelete, model.getFilteredRecordList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        // redo -\u003e deletes same second record in unfiltered record list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        expectedModel.redoFinancialPlanner();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        DeleteCommandByDateEntry deleteCommandByFirstDateEntry \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                new DeleteCommandByDateEntry(TypicalDates.DATE_FIRST_INDEX_DATE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        DeleteCommandByDateEntry deleteCommandByLastDateEntry \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                new DeleteCommandByDateEntry(TypicalDates.DATE_LAST_INDEX_DATE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommandByDateEntry deleteCommandByFirstDateEntryCopy \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                new DeleteCommandByDateEntry(TypicalDates.DATE_FIRST_INDEX_DATE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        Assert.assertTrue("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                deleteCommandByFirstDateEntry.equals(deleteCommandByFirstDateEntry));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        Assert.assertTrue("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                deleteCommandByFirstDateEntry.equals(deleteCommandByFirstDateEntryCopy));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                deleteCommandByFirstDateEntry.equals(TypicalDates.DATE_LAST_INDEX_DATE));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                deleteCommandByFirstDateEntry.equals(null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                deleteCommandByFirstDateEntry.equals(deleteCommandByLastDateEntry));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public List\u003cRecord\u003e filteredRecordList(Model model) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        return model.getFilteredRecordList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * List all the records whose date is required."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @param model model you want to test."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @param dateToDelete Date you require."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @return the list of records whose date is required."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public List\u003cRecord\u003e listAllRecordToDelete (Model model, Date dateToDelete) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        List\u003cRecord\u003e records \u003d filteredRecordList(model);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        List\u003cRecord\u003e recordsToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        for (Record recordToDelete : records) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            if (dateToDelete \u003d\u003d recordToDelete.getDate()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                recordsToDelete.add(recordToDelete);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        return recordsToDelete;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public void showNoRecord (Model model) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        model.updateFilteredRecordList(p -\u003e false);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        assertTrue (model.getFilteredRecordList().isEmpty());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 150,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/DeleteLimitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.LIMIT_100;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.LIMIT_ALL_DIFFERENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.getTypicalFinancialPlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.testutil.LimitBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * To test the functionality of deleteLimitCommand. including multiple tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class DeleteLimitCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void execute_validLimitDatesInList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Limit limitToDelete \u003d new LimitBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        model.addLimit(limitToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        DeleteLimitCommand deleteLimitCommand \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                new DeleteLimitCommand(limitToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        String expectedMessage \u003d DeleteLimitCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        expectedModel.deleteLimit(limitToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        expectedModel.commitFinancialPlanner();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertCommandSuccess(deleteLimitCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void execute_limitDatesNotInList_throwCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Limit limitNotInside \u003d new LimitBuilder(LIMIT_ALL_DIFFERENT).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        DeleteLimitCommand deleteLimitCommand \u003d new DeleteLimitCommand(limitNotInside);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertCommandFailure(deleteLimitCommand, model, commandHistory, Messages.MESSAGE_LIMITS_DO_NOT_EXIST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void executeUndoRedo_invalidDeleteLimitExecution_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Limit limitNotInside \u003d new LimitBuilder(LIMIT_ALL_DIFFERENT).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        DeleteLimitCommand deleteLimitCommand \u003d new DeleteLimitCommand(limitNotInside);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // execution failed -\u003e planner book state not added into model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertCommandFailure(deleteLimitCommand, model, commandHistory, Messages.MESSAGE_LIMITS_DO_NOT_EXIST);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // single planner book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void executeUndoRedo_validLimitDeletionExecution_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Limit limitToDelete \u003d new LimitBuilder(LIMIT_100).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        model.addLimit(limitToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        DeleteLimitCommand deleteLimitCommand \u003d new DeleteLimitCommand(limitToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        expectedModel.deleteLimit(limitToDelete);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        expectedModel.commitFinancialPlanner();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // delete -\u003e first limit deleted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        deleteLimitCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // undo -\u003e reverts financialplanner back to previous state."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        expectedModel.undoFinancialPlanner();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // redo -\u003e same first limit deleted again"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        expectedModel.redoFinancialPlanner();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        DeleteLimitCommand deleteFirstCommand \u003d new DeleteLimitCommand(LIMIT_100);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        DeleteLimitCommand deleteSecondCommand \u003d new DeleteLimitCommand(LIMIT_ALL_DIFFERENT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        DeleteLimitCommand deleteFirstCommandCopy \u003d new DeleteLimitCommand(LIMIT_100);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 111
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/FindTagCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_RECORDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.CAIFAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.INDO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.ZT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.getTypicalFinancialPlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tztzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tztzt"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindTagCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tztzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tztzt"
        },
        "content": "public class FindTagCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        TagsContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                new TagsContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        TagsContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                new TagsContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        FindTagCommand findFirstCommand \u003d new FindTagCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        FindTagCommand findSecondCommand \u003d new FindTagCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        FindTagCommand findFirstCommandCopy \u003d new FindTagCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public void execute_zeroKeywords_noRecordFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        TagsContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        FindTagCommand command \u003d new FindTagCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        expectedModel.updateFilteredRecordList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRecordList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public void execute_multipleKeywords_multipleRecordsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        TagsContainsKeywordsPredicate predicate \u003d preparePredicate(\"friends owesmoney\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        FindTagCommand command \u003d new FindTagCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        expectedModel.updateFilteredRecordList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertEquals(Arrays.asList(INDO, CAIFAN, ZT), model.getFilteredRecordList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    private TagsContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        return new TagsContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tztzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 68,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/LimitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.FinancialPlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.testutil.LimitBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class LimitCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void constructor_nullLimit_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        new LimitCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void execute_limitAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        ModelStubAcceptingLimitAdded modelStub \u003d new ModelStubAcceptingLimitAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Limit validLimit \u003d new LimitBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        CommandResult commandResult \u003d new LimitCommand(validLimit).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertEquals(modelStub.generateLimitOutput(false,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                modelStub.getTotalSpend(validLimit), validLimit), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertEquals(Arrays.asList(validLimit), modelStub.limitsAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void execute_sameDatesLimit_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Limit validLimit \u003d new LimitBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        LimitCommand limitCommand \u003d new LimitCommand(validLimit);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithLimit(validLimit);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expectMessage(LimitCommand.MESSAGE_LIMITS_SAME_DATE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        limitCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Limit limit \u003d new LimitBuilder().withMoneyFlow(\"-100\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Limit limitD \u003d new LimitBuilder().withDateStart(\"16-12-1998\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        LimitCommand limitCommand \u003d new LimitCommand(limit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        LimitCommand limitDCommand \u003d new LimitCommand(limitD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(limitCommand.equals(limitCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        LimitCommand limitCommandCopy \u003d new LimitCommand(limit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(limitCommand.equals(limitCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(limitCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(limitCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // different limit -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(limitCommand.equals(limitDCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void addRecord(Record record) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void deleteRecord(Record target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void updateRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void updateLimit(Limit target, Limit editedLimit) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void resetData(ReadOnlyFinancialPlanner newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public ObservableList\u003cRecord\u003e getRecordsThisMonth() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public ObservableList\u003cLimit\u003e getLimitList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public ReadOnlyFinancialPlanner getFinancialPlanner() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void addLimit(Limit limit) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public Double getTotalSpend(Limit limit) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void deleteLimit(Limit limit) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public boolean hasSameDateLimit(Limit limit) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public Limit getSameDatesLimit(Date dateStart, Date dateEnd) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public boolean isExceededLimit (Limit limit) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void deleteListRecord(List\u003cRecord\u003e targetList) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public String autoLimitCheck() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public String manualLimitCheck() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public String generateLimitOutput(boolean isExceeded, Double totalSpend, Limit limit) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void sortFilteredRecordList(String category, Boolean ascending) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public boolean canUndoFinancialPlanner() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public boolean canRedoFinancialPlanner() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void undoFinancialPlanner() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void redoFinancialPlanner() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void commitFinancialPlanner() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * A Model stub that contains a single limit."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private class ModelStubWithLimit extends ModelStub {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        private final Limit limit;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        ModelStubWithLimit(Limit limit) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            requireNonNull(limit);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            this.limit \u003d limit;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public boolean hasSameDateLimit(Limit limit) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            requireNonNull(limit);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return this.limit.isSameLimitDates(limit);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public Double getTotalSpend(Limit limit) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            requireNonNull(limit);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return this.getTotalSpend(limit);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * A Model stub that always accept the record being added."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private class ModelStubAcceptingLimitAdded extends ModelStub {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        final ArrayList\u003cLimit\u003e limitsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public boolean hasSameDatesLimit(Limit limit) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            requireNonNull(limit);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return limitsAdded.stream().anyMatch(limit::isSameLimitDates);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void addLimit(Limit limit) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            requireNonNull(limit);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            limitsAdded.add(limit);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public void commitFinancialPlanner() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public ReadOnlyFinancialPlanner getFinancialPlanner() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return new FinancialPlanner();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 284
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.showRecordAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.TYPICAL_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.TYPICAL_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.getTypicalFinancialPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.DateIsWithinIntervalPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.FinancialPlannerBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Model emptyModel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Model expectedEmptyModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        ReadOnlyFinancialPlanner emptyFinancialPlanner \u003d new FinancialPlannerBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        emptyModel \u003d new ModelManager(emptyFinancialPlanner, new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        expectedEmptyModel \u003d emptyModel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void execute_listIsFilteredWithDefault_showsEverything() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    // TODO: Should I hardcode this?"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Tests that the list shown after filtering according to date interval given is equal to the expected model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * after the same filter"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void execute_listIsFilteredWithDateIntervals_showsCorrectList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Model expectedModelAfterFilter \u003d filterListWithSpecificDateInterval("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                expectedModel, TYPICAL_START_DATE, TYPICAL_END_DATE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(new ListCommand(TYPICAL_START_DATE, TYPICAL_END_DATE), model, commandHistory,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS, expectedModelAfterFilter);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void execute_emptyListFiltered_showsCorrectList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(new ListCommand(TYPICAL_START_DATE, TYPICAL_END_DATE), emptyModel, commandHistory,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS, expectedEmptyModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Filters a model based on the predicate DateIsWithinIntervalPredicate"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param toFilter"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param startDate all dates must be later or equal to this date"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param endDate all dates must be earlier or equal to this date"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @return Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Model filterListWithSpecificDateInterval(Model toFilter, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Predicate\u003cRecord\u003e predicate \u003d new DateIsWithinIntervalPredicate(startDate, endDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        toFilter.updateFilteredRecordList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Model filtered \u003d toFilter;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return filtered;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 66,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/DeleteCommandByDateEntryParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.logic.commands.DeleteCommandByDateEntry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.testutil.TypicalDates;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "public class DeleteCommandByDateEntryParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private DeleteCommandByDateEntryParser parser \u003d new DeleteCommandByDateEntryParser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommandByDateEntry() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                parser, TypicalDates.DATE_FIRST_INDEX_DATE.value,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                new DeleteCommandByDateEntry(TypicalDates.DATE_FIRST_INDEX_DATE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        CommandParserTestUtil.assertParseFailure("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                parser, \"31/02/1999\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommandByDateEntry.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 25
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/FinancialPlannerParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.logic.commands.DeleteCommandByDateEntry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.EditRecordDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.RecordUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.testutil.TypicalDates;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class FinancialPlannerParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FinancialPlannerParser parser \u003d new FinancialPlannerParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Record record \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(RecordUtil.getAddCommand(record));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(record), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_RECORD), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public void parseCommand_deleteByDateEntry() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        DeleteCommandByDateEntry command \u003d (DeleteCommandByDateEntry) parser.parseCommand("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "                DeleteCommandByDateEntry.COMMAND_WORD + \" \" + TypicalDates.DATE_FIRST_INDEX_DATE.value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "        assertEquals(new DeleteCommandByDateEntry(TypicalDates.DATE_FIRST_INDEX_DATE), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Record record \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder(record).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_RECORD.getOneBased() + \" \" + RecordUtil.getEditRecordDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_RECORD, descriptor), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_RECORD), command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 7,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/FindTagCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.FindTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tztzt"
        },
        "content": "public class FindTagCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    private FindTagCommandParser parser \u003d new FindTagCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        FindTagCommand expectedFindTagCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                new FindTagCommand(new TagsContainsKeywordsPredicate(Arrays.asList(\"friends\", \"owesmoney\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertParseSuccess(parser, \"friends owesmoney\", expectedFindTagCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertParseSuccess(parser, \" \\n friends \\n \\t owesmoney  \\t\", expectedFindTagCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tztzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 29,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/ListCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.TYPICAL_END_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.TYPICAL_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String WHITESPACE \u003d \"\\t \\n \\r\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_nonEmptyArgWithoutDatePrefix_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, \" \" + TYPICAL_START_DATE + WHITESPACE + TYPICAL_END_DATE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_emptyArgument_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseSuccess(parser, WHITESPACE, new ListCommand());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_oneArgument_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_DATE + WHITESPACE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + TYPICAL_START_DATE, new ListCommand(TYPICAL_START_DATE, TYPICAL_START_DATE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_twoArgumentWithDatePrefixInCorrectOrder_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand(TYPICAL_START_DATE, TYPICAL_END_DATE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_DATE + WHITESPACE + TYPICAL_START_DATE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + WHITESPACE + TYPICAL_END_DATE, expectedListCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_DATE + WHITESPACE + TYPICAL_START_DATE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + WHITESPACE + TYPICAL_START_DATE, new ListCommand(TYPICAL_START_DATE, TYPICAL_START_DATE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_twoArgumentWithDatePrefixInWrongOrder_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, \" \" + TYPICAL_END_DATE + WHITESPACE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + TYPICAL_START_DATE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_invalidArgumentWithDatePrefix_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // More than 2 arguments are not allowed"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE + WHITESPACE + TYPICAL_START_DATE + WHITESPACE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + TYPICAL_END_DATE + WHITESPACE + TYPICAL_END_DATE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE + WHITESPACE + TYPICAL_START_DATE + WHITESPACE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + INVALID_DATE, Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE + WHITESPACE + INVALID_DATE + WHITESPACE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + TYPICAL_END_DATE, Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE + WHITESPACE + INVALID_DATE + WHITESPACE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + INVALID_DATE, Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 55,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/SummaryCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.ILLOGICAL_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_FORMAT_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.INVALID_LOGICAL_MONTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_DATE_END;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_DATE_START;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MONTH_END;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MONTH_START;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_MONEYFLOW;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.Month.MESSAGE_MONTH_CONSTRAINTS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.Month.MESSAGE_MONTH_LOGICAL_CONSTRAINTS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.record.Date.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.record.Date.MESSAGE_DATE_LOGICAL_CONSTRAINTS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.SummaryByDateCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.SummaryByMonthCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Month;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class SummaryCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final SummaryCommandParser parser \u003d new SummaryCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private final String invalidKeyword \u003d \"mth\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_dateModeValid_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        SummaryCommand expectedCommand \u003d new SummaryByDateCommand("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new Date(VALID_DATE_START), new Date(VALID_DATE_END));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + PREFIX_DATE + \" \" + VALID_DATE_START + \" \" + VALID_DATE_END;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseSuccess(parser, test, expectedCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // leading and trailing whitespaces do not affect"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + PREFIX_DATE + PREAMBLE_WHITESPACE + \" \" + VALID_DATE_START"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + PREAMBLE_WHITESPACE + \" \" + VALID_DATE_END + PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseSuccess(parser, test, expectedCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_monthModeValid_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        SummaryCommand expectedCommand \u003d new SummaryByMonthCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new Month(VALID_MONTH_START), new Month(VALID_MONTH_END));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + PREFIX_DATE + \" \" + VALID_MONTH_START + \" \" + VALID_MONTH_END;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseSuccess(parser, test, expectedCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // leading and trailing whitespaces do not affect"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + PREFIX_DATE + PREAMBLE_WHITESPACE + \" \" + VALID_MONTH_START"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + PREAMBLE_WHITESPACE + \" \" + VALID_MONTH_END + PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseSuccess(parser, test, expectedCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_noKeywordFound_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SummaryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // Correct argument but missing \"date\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String test \u003d \" \" + PREFIX_DATE + \" \" + VALID_DATE_START + \" \" + VALID_DATE_END;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // Correct argument but missing \"month\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + PREFIX_DATE + \" \" + VALID_MONTH_START + \" \" + VALID_MONTH_END;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_wrongKeyword_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SummaryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String test \u003d \" \" + invalidKeyword + \" \" + PREFIX_DATE + \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + VALID_DATE_START + \" \" + VALID_DATE_END;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_invalidPrefix_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SummaryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // empty command argument"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String test \u003d PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + VALID_DATE_START + \" \" + VALID_DATE_END;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + VALID_MONTH_START + \" \" + VALID_MONTH_END;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // incorrect prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + PREFIX_MONEYFLOW + \" \" + VALID_DATE_START + \" \" + VALID_DATE_END;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + PREFIX_MONEYFLOW + \" \" + VALID_MONTH_START + \" \" + VALID_MONTH_END;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_invalidArgumentCount_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SummaryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // Single argument after prefix (Date mode)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + VALID_DATE_END;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // Single argument after prefix (Month mode)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + VALID_MONTH_END;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // More than 2 argument after prefix (Date mode)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + VALID_DATE_START"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + VALID_DATE_START + \" \" + VALID_DATE_END;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // More than 2 argument after prefix (Month mode)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + VALID_MONTH_START"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + VALID_MONTH_START + \" \" + VALID_MONTH_END;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // No arguments (Date mode)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // No arguments (Date mode)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + \" \" + PREFIX_DATE + \" \";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_dateModeInvalidArgumentOrder_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SummaryByDateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + VALID_DATE_END"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + VALID_DATE_START;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_monthModeInvalidArgumentOrder_failure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SummaryByMonthCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \" + \" \" + PREFIX_DATE + \" \" + VALID_MONTH_END"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + VALID_MONTH_START;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, expectedMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_dateModeInvalidDate_failure() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // both dates have invalid format"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + INVALID_DATE"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + INVALID_DATE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // 1 date has invalid format"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + INVALID_DATE"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + VALID_DATE_END;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + VALID_DATE_START"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + INVALID_DATE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // both dates are invalid"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + ILLOGICAL_DATE"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + ILLOGICAL_DATE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_DATE_LOGICAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // 1 date is invalid"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + ILLOGICAL_DATE"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + VALID_DATE_END;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_DATE_LOGICAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + VALID_DATE_START"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + ILLOGICAL_DATE;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_DATE_LOGICAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_monthModeInvalidMonth_failure() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // both months have invalid format"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + INVALID_FORMAT_MONTH"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + INVALID_FORMAT_MONTH;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // 1 month has invalid format"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + INVALID_FORMAT_MONTH"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + VALID_MONTH_END;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + VALID_MONTH_START"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + INVALID_FORMAT_MONTH;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // both months are invalid"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + INVALID_LOGICAL_MONTH"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + INVALID_LOGICAL_MONTH;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_MONTH_LOGICAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // 1 month is invalid"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + INVALID_LOGICAL_MONTH"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + VALID_MONTH_END;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_MONTH_LOGICAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + VALID_MONTH_START"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + INVALID_LOGICAL_MONTH;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_MONTH_LOGICAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_monthModeInvalidDateInvalidFormat_throwsFirstException() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + INVALID_DATE"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + ILLOGICAL_DATE;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByDateCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + ILLOGICAL_DATE"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + INVALID_DATE;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_DATE_LOGICAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void parse_monthModeInvalidMonthInvalidFormat_throwsFirstException() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + INVALID_FORMAT_MONTH"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + INVALID_LOGICAL_MONTH;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        test \u003d \" \" + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + INVALID_LOGICAL_MONTH"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + \" \" + INVALID_FORMAT_MONTH;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertParseFailure(parser, test, MESSAGE_MONTH_LOGICAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 210,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/FinancialPlannerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_MONEYFLOW_EXPENSE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.INDO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.getTypicalFinancialPlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.DateBasedLimitList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.exceptions.DuplicateRecordException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FinancialPlannerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FinancialPlanner financialPlanner \u003d new FinancialPlanner();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), financialPlanner.getRecordList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        financialPlanner.resetData((UniqueRecordList) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyFinancialPlanner_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FinancialPlanner newData \u003d getTypicalFinancialPlanner();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        financialPlanner.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, financialPlanner);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicateRecords_throwsDuplicateRecordException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two records with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Record editedIndo \u003d new RecordBuilder(INDO).withMoneyFlow(VALID_MONEYFLOW_EXPENSE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRecord\u003e newRecords \u003d Arrays.asList(INDO, editedIndo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        FinancialPlannerStub newData \u003d new FinancialPlannerStub(newRecords);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicateRecordException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        financialPlanner.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasRecord_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        financialPlanner.hasRecord(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasRecord_recordNotInFinancialPlanner_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(financialPlanner.hasRecord(INDO));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasRecord_recordInFinancialPlanner_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        financialPlanner.addRecord(INDO);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(financialPlanner.hasRecord(INDO));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasRecord_recordWithSameIdentityFieldsInFinancialPlanner_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        financialPlanner.addRecord(INDO);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Record editedIndo \u003d new RecordBuilder(INDO).withMoneyFlow(VALID_MONEYFLOW_EXPENSE_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(financialPlanner.hasRecord(editedIndo));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getRecordList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        financialPlanner.getRecordList().remove(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyFinancialPlanner whose records list can violate interface constraints."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class FinancialPlannerStub implements ReadOnlyFinancialPlanner {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cRecord\u003e records \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        private final ObservableList\u003cLimit\u003e limits \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        FinancialPlannerStub(Collection\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            this.records.setAll(records);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return records;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        public ObservableList\u003cLimit\u003e getLimitList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            return limits;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setLimitList(DateBasedLimitList limitList) {} //see as above"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 8,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/record/DateBasedLimitListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.LIMIT_100;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.LIMIT_500;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.exceptions.LimitNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.exceptions.RedundantLimitDatesException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class DateBasedLimitListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private final DateBasedLimitList dateBasedLimitList \u003d new DateBasedLimitList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void check_nullLimitList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.hasSameDatesLimit(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void hasSameDates_limitsNotInside_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(dateBasedLimitList.hasSameDatesLimit(LIMIT_100));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void hasSameDates_limitInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.add(LIMIT_100);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(dateBasedLimitList.hasSameDatesLimit(LIMIT_100));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void hasSameDates_limitWithSameDatesInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.add(LIMIT_100);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(dateBasedLimitList.hasSameDatesLimit(LIMIT_500));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void add_nullLimit_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.add(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void add_redundantLimit_throwsDuplicateRecordException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.add(LIMIT_100);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(RedundantLimitDatesException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.add(LIMIT_500);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimit_nullTargetLimit_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.setLimit(null, LIMIT_100);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimit_nullEditedLimit_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.setLimit(LIMIT_100, null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimit_targetLimitNotInList_throwsRecordNotFoundException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(LimitNotFoundException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.setLimit(LIMIT_100, LIMIT_100);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimit_editedLimitIsSameLimit_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.add(LIMIT_100);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.setLimit(LIMIT_100, LIMIT_100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        DateBasedLimitList expectedDateBasedLimitList \u003d new DateBasedLimitList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        expectedDateBasedLimitList.add(LIMIT_100);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(expectedDateBasedLimitList.equals(dateBasedLimitList));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimit_editedLimitHasDifferentMoneyFlow_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.add(LIMIT_100);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.setLimit(LIMIT_100, LIMIT_DATE_START_DIFF);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        DateBasedLimitList expectedDateBasedLimitList \u003d new DateBasedLimitList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        expectedDateBasedLimitList.add(LIMIT_DATE_START_DIFF);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertEquals(expectedDateBasedLimitList, dateBasedLimitList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void remove_nullLimit_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.remove(null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void remove_limitDoesNotExist_throwsLimitNotFoundException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(LimitNotFoundException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.remove(LIMIT_100);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void remove_existingLimit_removesRecord() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        DateBasedLimitList expectedDateBasedLimitList \u003d dateBasedLimitList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.add(LIMIT_100);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.remove(LIMIT_100);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertEquals(expectedDateBasedLimitList, dateBasedLimitList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimits_nullDateBasedLimitList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.setLimits((DateBasedLimitList) null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimits_uniqueLimitList_replacesOwnListWithProvidedUniqueLimitList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.add(LIMIT_100);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        DateBasedLimitList expectedDateBasedLimitList \u003d new DateBasedLimitList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        expectedDateBasedLimitList.add(LIMIT_500);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.setLimits(expectedDateBasedLimitList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertEquals(expectedDateBasedLimitList, dateBasedLimitList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     }*/"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimits_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.setLimits((List\u003cLimit\u003e) null);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimits_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        DateBasedLimitList expectedDateBasedLimitList \u003d dateBasedLimitList;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.add(LIMIT_100);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        List\u003cLimit\u003e limitList \u003d Collections.singletonList(LIMIT_DATE_START_DIFF);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.setLimits(limitList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        expectedDateBasedLimitList.add(LIMIT_DATE_START_DIFF);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertEquals(expectedDateBasedLimitList, dateBasedLimitList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     }*/"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void setLimits_listWithRedundantDateLimits_throwsDuplicateRecordException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        List\u003cLimit\u003e listWithRedundantDateLimits \u003d Arrays.asList(LIMIT_100, LIMIT_100);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(RedundantLimitDatesException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.setLimits(listWithRedundantDateLimits);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateBasedLimitList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 166
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/record/DateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void isValidDateFormat() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // null day parameter"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDateFormat(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // invalid date format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Date.isValidDateFormat(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Date.isValidDateFormat(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Date.isValidDateFormat(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Date.isValidDateFormat(\"dates\")); // non-numeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Date.isValidDateFormat(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Date.isValidDateFormat(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Date.isValidDateFormat(\"93121534\")); // Missing a \"-\" in the format of dd-mm-yyyy"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Date.isValidDateFormat(\"931-21-34\")); // \u0027dd\u0027 parameter has more than 2 digits"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Date.isValidDateFormat(\"-21-34\")); // \u0027dd\u0027 parameter has less than 1 digit"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Date.isValidDateFormat(\"93-215-34\")); // \u0027mm\u0027 parameter has more than 2 digits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Date.isValidDateFormat(\"93--34\")); // \u0027mm\u0027 parameter has less than 1 digit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Date.isValidDateFormat(\"93-21-34\")); // \u0027yyyy\u0027 does not have exactly 4 digits"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // valid date format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertTrue(Date.isValidDateFormat(\"11-11-1911\")); // exactly in the form dd-mm-yyyy"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertTrue(Date.isValidDateFormat(\"1-1-1911\")); // dd or mm can be 1 digit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Test whether a given day and month belongs to a valid and logical date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(DateUtil.isValidDate(29, 2)); // The number of days in the specified month is wrong"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse((DateUtil.isValidDate(10, 100))); // The month does not exist"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertTrue(DateUtil.isValidDate(28, 2)); // There are 28 days in the month of February"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Test whether different representations of date gives same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_differentRepresentationsForDate_sameObject() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new Date(\"10-1-2018\"), new Date(\"10-01-2018\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new Date(\"1-10-2018\"), new Date(\"01-10-2018\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new Date(\"1-1-2018\"), new Date(\"01-01-2018\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 63,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/record/LimitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.LIMIT_100;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.LIMIT_500;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.LIMIT_5000;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.LIMIT_ALL_DIFFERENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.LIMIT_DATE_END_DIFF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.LIMIT_DATE_START_DIFF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.LIMIT_WEEKS_RANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.TYPICAL_END_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.TYPICAL_LIMIT_EXCEEDED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.TYPICAL_LIMIT_MONEY_100;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.TYPICAL_LIMIT_MONEY_101;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.TYPICAL_LIMIT_MONEY_EARNED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.TYPICAL_LIMIT_NOT_EXCEEDED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.TYPICAL_NOT_INSIDE_DATE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.TYPICAL_START_DATE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalLimits.TYPICAL_WITHIN_DATE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.INDO;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LimitTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void isSameLimit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(LIMIT_100.isSameLimitDates(LIMIT_100));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.isSameLimitDates(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // different date parameter and income -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.isSameLimitDates(LIMIT_DATE_START_DIFF));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.isSameLimitDates(LIMIT_DATE_END_DIFF));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        //different dates and moneyflow -\u003e return false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.isSameLimitDates(LIMIT_ALL_DIFFERENT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // different moneyflow -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(LIMIT_100.isSameLimitDates(LIMIT_500));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(LIMIT_100.isSameLimitDates(LIMIT_5000));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void isLimitExceeded() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // limit exceeded -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(LIMIT_100.isExceeded(TYPICAL_LIMIT_MONEY_101.toDouble()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(LIMIT_5000.isExceeded(TYPICAL_LIMIT_EXCEEDED.toDouble()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.isExceeded(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // limit not exceeded -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_5000.isExceeded(TYPICAL_LIMIT_MONEY_101.toDouble()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.isExceeded(TYPICAL_LIMIT_NOT_EXCEEDED.toDouble()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        //limit money equals to money spend -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.isExceeded(TYPICAL_LIMIT_MONEY_100.toDouble()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        //user have earned money -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.isExceeded(TYPICAL_LIMIT_MONEY_EARNED.toDouble()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void isInsideDatesPeriod () {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        //date inside range -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Record recordInside \u003d new RecordBuilder(INDO).withDate(TYPICAL_WITHIN_DATE.toString()).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(LIMIT_100.isInsideDatePeriod(recordInside));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        //date outside range -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Record recordOutSide \u003d new RecordBuilder(INDO).withDate(TYPICAL_NOT_INSIDE_DATE.toString()).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.isInsideDatePeriod(recordOutSide));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        //dateStart is same -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Record recordSameStartDate \u003d new RecordBuilder(INDO).withDate(TYPICAL_START_DATE.toString()).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(LIMIT_100.isInsideDatePeriod(recordSameStartDate));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        //dateEnd is same -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        Record recordSameEndDate \u003d new RecordBuilder(INDO).withDate(TYPICAL_END_DATE.toString()).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(LIMIT_100.isInsideDatePeriod(recordSameEndDate));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        //Limit limitCopy \u003d new LimitBuilder(LIMIT_100).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        //assertEquals(LIMIT_100,limitCopy);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertTrue(LIMIT_100.equals(LIMIT_100));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.equals(5));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // different limit -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.equals(LIMIT_500));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // different moneyFlow -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.equals(LIMIT_500));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        // different dates parameter -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        assertFalse(LIMIT_100.equals(LIMIT_WEEKS_RANGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 117,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/record/MoneyFlowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class MoneyFlowTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void isValidMoneyFlow() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // null money flow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e MoneyFlow.isValidMoneyFlow(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // invalid money flow"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(MoneyFlow.isValidMoneyFlow(\"\")); // empty string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(MoneyFlow.isValidMoneyFlow(\" \")); // spaces only"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(MoneyFlow.isValidMoneyFlow(\"Blk 456, Den Road, #01-355\")); // letters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(MoneyFlow.isValidMoneyFlow(\"**\")); // Symbols which are not \u0027-\u0027, \u0027+\u0027, \u0027.\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(MoneyFlow.isValidMoneyFlow(\"+-123.0\")); // Can only have 1 \u0027+\u0027 or \u0027-\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(MoneyFlow.isValidMoneyFlow(\"+\")); // Must have a number after the sign"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(MoneyFlow.isValidMoneyFlow(\"+123.442.456\")); // multiple decimal points"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(MoneyFlow.isValidMoneyFlow(\"-01.23\")); // whole number can only start with 0 if it is 1 digit"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(MoneyFlow.isValidMoneyFlow(\"-1.\")); // there must be at least 1 digit after the decimal point"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(MoneyFlow.isValidMoneyFlow(\"-.1\")); // there must be at least 1 digit before decimal point"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // valid money flow"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertTrue(MoneyFlow.isValidMoneyFlow(\"-0\")); // 0 is valid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertTrue(MoneyFlow.isValidMoneyFlow(\"-123456789.00\")); // long moneyflow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertTrue(MoneyFlow.isValidMoneyFlow(\"+12.30\")); // standard moneyflow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertTrue(MoneyFlow.isValidMoneyFlow(\"+12\")); // no need for the decimal point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertTrue(MoneyFlow.isValidMoneyFlow(\"-123.0011\")); // moneyflow with decimal places greater than 2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    // TODO: Check whether the data has been parsed correctly"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 31,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/record/TagsContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tztzt"
        },
        "content": "public class TagsContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        TagsContainsKeywordsPredicate firstPredicate \u003d new TagsContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        TagsContainsKeywordsPredicate secondPredicate \u003d new TagsContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        TagsContainsKeywordsPredicate firstPredicateCopy \u003d new TagsContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public void test_tagsContainKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        TagsContainsKeywordsPredicate predicate \u003d new TagsContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withTags(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withTags(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withTags(\"Alice\", \"Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withTags(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public void test_tagsDoNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        TagsContainsKeywordsPredicate predicate \u003d new TagsContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertFalse(predicate.test(new RecordBuilder().withTags(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertFalse(predicate.test(new RecordBuilder().withTags(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        // Keywords match name parameters, money flow and date but not tags"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        predicate \u003d new TagsContainsKeywordsPredicate(Arrays.asList(\"12-3-1945\", \"11.24\", \"Main\", \"-10.24\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertFalse(predicate.test(new RecordBuilder().withName(\"Alice\").withDate(\"12-3-1945\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                .withMoneyFlow(\"-10.24\").withTags(\"Girl\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tztzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 73,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/summary/MonthTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.Month.STANDARD_MONTHS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class MonthTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Month(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_invalidMonth_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String invalidMonth \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Month(invalidMonth));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_diffRepresentations_sameMonth() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new Month(\"fEb-2018\"), new Month(\"FEB-2018\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new Month(\"feb-2018\"), new Month(\"FEB-2018\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Checks the mapping between standard representation and the month number"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_valid_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String yearString \u003d \"2018\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        int monthNum \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (String m : STANDARD_MONTHS) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            String testInput \u003d m + \"-\" + yearString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            int year \u003d Integer.parseInt(yearString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            assertEquals(new Month(testInput), new Month(monthNum, year));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            monthNum++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void isValidMonthFormat() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // null day parameter"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Month.isValidMonth(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // invalid month format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isValidMonth(\"\")); // empty string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isValidMonth(\" \")); // spaces only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isValidMonth(\"apr-18\")); // 2-digit year"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isValidMonth(\"dates-2018\")); // not 3-letter word"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isValidMonth(\"-2018\")); // no word present before year"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isValidMonth(\"apr-\")); // no number present before month"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isValidMonth(\"apr -2018\")); // spaces in between month and year"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isValidMonth(\"apr2018\")); // Missing a \"-\" in the format of mmm-yyyy"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isValidMonth(\"apr/2018\")); // slashes are not allowed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isValidMonth(\"april-2018\")); // word is more than 3 letters"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isValidMonth(\"ap-2018\")); // word is less than 3 letters"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isValidMonth(\"apr--2018\")); // only 1 \u0027-\u0027 is needed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // valid month format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertTrue(Month.isValidMonth(\"apr-2018\")); // exactly in the form mmm-yyyy"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Test whether a given month is logical"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void isValidMonth() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // invalid months"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertFalse(Month.isLogicalMonth(\"tem\")); // There is no such month"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertTrue(Month.isLogicalMonth(\"apr\")); // APR exists"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertTrue(Month.isLogicalMonth(\"Apr\")); // argument is non case-sensitive"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Test whether 2 valid representations of the same Month object gives same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_differentValidRepresentations_sameObject() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new Month(\"APR-2018\"), new Month(\"apr-2018\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new Month(\"aPr-2018\"), new Month(\"apr-2018\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 80,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/summary/SummaryListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.Model.PREDICATE_SHOW_ALL_RECORDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.CAIFAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.CHICKENRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.INDO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.MALA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.RANDOM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.WORK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.ZT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.DateIsWithinIntervalPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.SummaryBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This test tests both SummaryByDateList and SummaryByMonthList because this 2 classes"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * share a great number of similarities"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class SummaryListTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final RecordBuilder recordBuilder \u003d new RecordBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final SummaryBuilder summaryBuilder \u003d new SummaryBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Record CAIFAN_JAN \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            new Record(CAIFAN.getName(), new Date(\"1-1-2018\"), CAIFAN.getMoneyFlow(), CAIFAN.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Record INDO_FEB \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            new Record(INDO.getName(), new Date(\"2-2-2018\"), INDO.getMoneyFlow(), INDO.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Record INDO_JAN \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            new Record(INDO.getName(), new Date(\"1-1-2018\"), INDO.getMoneyFlow(), INDO.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Record RANDOM_MAR \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            new Record(RANDOM.getName(), new Date(\"3-3-2018\"), RANDOM.getMoneyFlow(), RANDOM.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Record WORK_APR \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            new Record(WORK.getName(), new Date(\"4-4-2018\"), WORK.getMoneyFlow(), WORK.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Record MALA_APR \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            new Record(MALA.getName(), new Date(\"4-4-2018\"), MALA.getMoneyFlow(), MALA.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Record MALA_MAY \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            new Record(MALA.getName(), new Date(\"5-5-2018\"), MALA.getMoneyFlow(), MALA.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Record ZT_JUN \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            new Record(ZT.getName(), new Date(\"6-6-2018\"), ZT.getMoneyFlow(), ZT.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final Record CHICKEN_RICE_JUL \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            new Record(CHICKENRICE.getName(), new Date(\"7-7-2018\"), CHICKENRICE.getMoneyFlow(), CHICKENRICE.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final List\u003cRecord\u003e recordListAllUniqueDates \u003d Arrays.asList(CAIFAN_JAN, INDO_FEB, RANDOM_MAR,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            WORK_APR, MALA_MAY, ZT_JUN, CHICKEN_RICE_JUL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static List\u003cRecord\u003e recordListOverlappingDates \u003d Arrays.asList(CAIFAN_JAN, INDO_JAN, RANDOM_MAR,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            WORK_APR, MALA_APR, ZT_JUN, CHICKEN_RICE_JUL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_nullParam_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SummaryByDateList(null, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SummaryByDateList(recordListAllUniqueDates, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SummaryByDateList("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                null, PREDICATE_SHOW_ALL_RECORDS));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SummaryByMonthList(null, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SummaryByMonthList(recordListAllUniqueDates, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SummaryByMonthList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                null, PREDICATE_SHOW_ALL_RECORDS));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_recordListWithUniqueDatesNoFilter_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        HashMap\u003cDate, Summary\u003e expectedMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (Record r : recordListAllUniqueDates) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            expectedMap.put(r.getDate(), new DaySummary(r));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new SummaryByDateList(recordListAllUniqueDates, PREDICATE_SHOW_ALL_RECORDS).getSummaryMap(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                expectedMap);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_recordListWithUniqueMonthsNoFilter_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        HashMap\u003cMonth, Summary\u003e expectedMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (Record r : recordListAllUniqueDates) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            Month month \u003d new Month(r.getDate().getMonth(), r.getDate().getYear());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            expectedMap.put(month, new MonthSummary(r));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new SummaryByMonthList(recordListAllUniqueDates, PREDICATE_SHOW_ALL_RECORDS).getSummaryMap(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                expectedMap);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_recordListWithOverlappingDatesNoFilter_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        DaySummary summaryJan \u003d new DaySummary(CAIFAN_JAN);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summaryJan.add(INDO_JAN);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        DaySummary summaryApr \u003d new DaySummary(WORK_APR);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summaryApr.add(MALA_APR);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        List\u003cDaySummary\u003e summaryListOverLappingDates \u003d Arrays.asList(summaryJan, new DaySummary(RANDOM_MAR), summaryApr,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DaySummary(ZT_JUN), new DaySummary(CHICKEN_RICE_JUL));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        HashMap\u003cDate, Summary\u003e expectedMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (DaySummary s : summaryListOverLappingDates) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            expectedMap.put(s.getDate(), s);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new SummaryByDateList(recordListOverlappingDates, PREDICATE_SHOW_ALL_RECORDS).getSummaryMap(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                expectedMap);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_recordListWithOverlappingMonthsNoFilter_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MonthSummary summaryJan \u003d new MonthSummary(CAIFAN_JAN);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summaryJan.add(INDO_JAN);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MonthSummary summaryApr \u003d new MonthSummary(WORK_APR);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summaryApr.add(MALA_APR);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        List\u003cMonthSummary\u003e summaryListOverLappingDates \u003d Arrays.asList(summaryJan, new MonthSummary(RANDOM_MAR),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                summaryApr, new MonthSummary(ZT_JUN), new MonthSummary(CHICKEN_RICE_JUL));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        HashMap\u003cMonth, Summary\u003e expectedMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (MonthSummary s : summaryListOverLappingDates) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            expectedMap.put(s.getMonth(), s);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new SummaryByMonthList(recordListOverlappingDates, PREDICATE_SHOW_ALL_RECORDS).getSummaryMap(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                expectedMap);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * This test tests whether the filter method is working as intended."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_recordListWithUniqueDatesFilter_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Date startTestDate \u003d new Date(\"1-1-2018\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Date endTestDate \u003d new Date(\"5-6-2018\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        DateIsWithinIntervalPredicate predicate \u003d new DateIsWithinIntervalPredicate(startTestDate, endTestDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        FilteredList\u003cRecord\u003e filteredList \u003d new FilteredList(FXCollections.observableList(recordListAllUniqueDates));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        filteredList.setPredicate(predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        HashMap\u003cDate, Summary\u003e expectedMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (Record r : filteredList) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            expectedMap.put(r.getDate(), new DaySummary(r));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new SummaryByDateList(recordListAllUniqueDates, predicate).getSummaryMap(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                expectedMap);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @see #constructor_recordListWithUniqueDatesFilter_success"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_recordListWithUniqueMonthsFilter_success() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Date startTestDate \u003d new Date(\"1-1-2018\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Date endTestDate \u003d new Date(\"30-6-2018\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        DateIsWithinIntervalPredicate predicate \u003d new DateIsWithinIntervalPredicate(startTestDate, endTestDate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        FilteredList\u003cRecord\u003e filteredList \u003d new FilteredList(FXCollections.observableList(recordListAllUniqueDates));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        filteredList.setPredicate(predicate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        HashMap\u003cMonth, Summary\u003e expectedMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        for (Record r : filteredList) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            Month month \u003d new Month(r.getDate().getMonth(), r.getDate().getYear());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            expectedMap.put(month, new MonthSummary(r));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(new SummaryByMonthList(recordListAllUniqueDates, predicate).getSummaryMap(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                expectedMap);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 144,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/summary/SummaryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.SummaryBuilder.DEFAULT_TOTAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.SummaryBuilder.DEFAULT_TOTAL_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.SummaryBuilder.DEFAULT_TOTAL_INCOME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.MoneyUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.SummaryBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * This tests both the DaySummary and MonthSummary classes"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class SummaryTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String DEFAULT_DATE \u003d \"10-2-2018\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String DEFAULT_MONTH \u003d \"feb-2018\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String DEFAULT_MONEYFLOW_EXPENSE \u003d \"-10.00\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String DEFAULT_MONEYFLOW_INCOME \u003d \"+100\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String DEFAULT_MONEYFLOW_TOTAL \u003d \"+90\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final SummaryBuilder summaryBuilder \u003d new SummaryBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_nullRecordDaySummary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new DaySummary(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_nullRecordMonthSummary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new MonthSummary(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_nullParamDaySummary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new DaySummary(null,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new MoneyFlow(DEFAULT_MONEYFLOW_EXPENSE), new MoneyFlow(DEFAULT_MONEYFLOW_INCOME),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new MoneyFlow(DEFAULT_MONEYFLOW_TOTAL)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new DaySummary(new Date(DEFAULT_DATE),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                null, new MoneyFlow(DEFAULT_MONEYFLOW_INCOME),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new MoneyFlow(DEFAULT_MONEYFLOW_TOTAL)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new DaySummary(new Date(DEFAULT_DATE),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new MoneyFlow(DEFAULT_MONEYFLOW_EXPENSE), null,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new MoneyFlow(DEFAULT_MONEYFLOW_TOTAL)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new DaySummary(new Date(DEFAULT_DATE),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new MoneyFlow(DEFAULT_MONEYFLOW_EXPENSE), new MoneyFlow(DEFAULT_MONEYFLOW_INCOME),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void constructor_nullParamMonthSummary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new MonthSummary(null,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new MoneyFlow(DEFAULT_MONEYFLOW_EXPENSE), new MoneyFlow(DEFAULT_MONEYFLOW_INCOME),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new MoneyFlow(DEFAULT_MONEYFLOW_TOTAL)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new MonthSummary(new Month(DEFAULT_MONTH),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                null, new MoneyFlow(DEFAULT_MONEYFLOW_INCOME), new MoneyFlow(DEFAULT_MONEYFLOW_TOTAL)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new MonthSummary(new Month(DEFAULT_MONTH),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new MoneyFlow(DEFAULT_MONEYFLOW_EXPENSE), null,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new MoneyFlow(DEFAULT_MONEYFLOW_TOTAL)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new MonthSummary(new Month(DEFAULT_MONTH),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new MoneyFlow(DEFAULT_MONEYFLOW_EXPENSE), new MoneyFlow(DEFAULT_MONEYFLOW_INCOME),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void add_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        final Summary daySummary \u003d summaryBuilder.buildDaySummary();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e daySummary.add(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        final Summary monthSummary \u003d summaryBuilder.buildMonthSummary();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e monthSummary.add(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void add_recordWithExpenseMoneyFlowToDaySummary_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Summary summary \u003d summaryBuilder.buildDaySummary();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        RecordBuilder recordBuilder \u003d new RecordBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Record toAdd \u003d recordBuilder.withDate(DEFAULT_DATE).withMoneyFlow(DEFAULT_MONEYFLOW_EXPENSE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summary.add(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        SummaryBuilder toCompareBuilder \u003d new SummaryBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MoneyFlow targetTotalExpense \u003d MoneyUtil.add(new MoneyFlow(DEFAULT_TOTAL_EXPENSE), toAdd.getMoneyFlow());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MoneyFlow targetTotal \u003d MoneyUtil.add(new MoneyFlow(DEFAULT_TOTAL), toAdd.getMoneyFlow());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(summary, toCompareBuilder.withTotalExpense(targetTotalExpense.value)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                .withTotal(targetTotal.value).buildDaySummary());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void add_recordWithExpenseMoneyFlowToMonthSummary_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Summary summary \u003d summaryBuilder.buildMonthSummary();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        RecordBuilder recordBuilder \u003d new RecordBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Record toAdd \u003d recordBuilder.withDate(DEFAULT_DATE).withMoneyFlow(DEFAULT_MONEYFLOW_EXPENSE).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summary.add(toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        SummaryBuilder toCompareBuilder \u003d new SummaryBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MoneyFlow targetTotalExpense \u003d MoneyUtil.add(new MoneyFlow(DEFAULT_TOTAL_EXPENSE), toAdd.getMoneyFlow());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MoneyFlow targetTotal \u003d MoneyUtil.add(new MoneyFlow(DEFAULT_TOTAL), toAdd.getMoneyFlow());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Month targetMonth \u003d new Month(toAdd.getDate().getMonth(), toAdd.getDate().getYear());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(summary, toCompareBuilder.withMonth(targetMonth.value).withTotalExpense(targetTotalExpense.value)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                .withTotal(targetTotal.value).buildMonthSummary());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void add_recordWithIncomeMoneyFlowToDaySummary_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Summary summary \u003d summaryBuilder.buildDaySummary();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        RecordBuilder recordBuilder \u003d new RecordBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Record toAdd \u003d recordBuilder.withDate(DEFAULT_DATE).withMoneyFlow(DEFAULT_MONEYFLOW_INCOME).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summary.add(toAdd);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        SummaryBuilder toCompareBuilder \u003d new SummaryBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MoneyFlow targetTotalIncome \u003d MoneyUtil.add(new MoneyFlow(DEFAULT_TOTAL_INCOME), toAdd.getMoneyFlow());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MoneyFlow targetTotal \u003d MoneyUtil.add(new MoneyFlow(DEFAULT_TOTAL), toAdd.getMoneyFlow());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(summary, toCompareBuilder.withTotalIncome(targetTotalIncome.value)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                .withTotal(targetTotal.value).buildDaySummary());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void add_recordWithIncomeMoneyFlowToMonthSummary_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Summary summary \u003d summaryBuilder.buildMonthSummary();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        RecordBuilder recordBuilder \u003d new RecordBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Record toAdd \u003d recordBuilder.withDate(DEFAULT_DATE).withMoneyFlow(DEFAULT_MONEYFLOW_INCOME).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summary.add(toAdd);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        SummaryBuilder toCompareBuilder \u003d new SummaryBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MoneyFlow targetTotalIncome \u003d MoneyUtil.add(new MoneyFlow(DEFAULT_TOTAL_INCOME), toAdd.getMoneyFlow());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        MoneyFlow targetTotal \u003d MoneyUtil.add(new MoneyFlow(DEFAULT_TOTAL), toAdd.getMoneyFlow());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Month targetMonth \u003d new Month(toAdd.getDate().getMonth(), toAdd.getDate().getYear());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertEquals(summary, toCompareBuilder.withMonth(targetMonth.value).withTotalIncome(targetTotalIncome.value)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                .withTotal(targetTotal.value).buildMonthSummary());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 126,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/planner/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.getTypicalFinancialPlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.model.FinancialPlannerChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.model.LimitListChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.FinancialPlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFinancialPlannerStorage financialPlannerStorage \u003d new XmlFinancialPlannerStorage("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTempFilePath(\"ab\"), getTempFilePath(\"limitList\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(financialPlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void financialPlannerReadSave() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlFinancialPlannerStorage} class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlFinancialPlannerStorageTest} class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FinancialPlanner original \u003d getTypicalFinancialPlanner();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveFinancialPlanner(original);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyFinancialPlanner retrieved \u003d storageManager.readFinancialPlanner().get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new FinancialPlanner(retrieved));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getRecordListFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getRecordListFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getLimitListFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getLimitListFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleFinancialPlannerChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlFinancialPlannerStorageExceptionThrowingStub("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                Paths.get(\"dummy\"), Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleFinancialPlannerChangedEvent(new FinancialPlannerChangedEvent(new FinancialPlanner()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleLimitListChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlFinancialPlannerStorageExceptionThrowingStub("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                Paths.get(\"dummy\"), Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleLimitListChangedEvent(new LimitListChangedEvent(new FinancialPlanner()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlFinancialPlannerStorageExceptionThrowingStub extends XmlFinancialPlannerStorage {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlFinancialPlannerStorageExceptionThrowingStub(Path recordListFilePath, Path limitListFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            super(recordListFilePath, limitListFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveFinancialPlanner(ReadOnlyFinancialPlanner financialPlanner) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveRecordList(ReadOnlyFinancialPlanner financialPlanner, Path recordListFilePath)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveLimitList(ReadOnlyFinancialPlanner financialPlanner, Path limitListFilePath)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 6,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/planner/storage/XmlFinancialPlannerStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.BURSARY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.IDA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.INDO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.getTypicalFinancialPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.FinancialPlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyFinancialPlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.DateBasedLimitList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFinancialPlannerStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"XmlFinancialPlannerStorageTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: Test(readRecordList, readLimitList throws null pointer exception)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readFinancialPlanner_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        readFinancialPlanner(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readRecordList_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        readRecordList(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readLimitList_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        readLimitList(null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: Test(read utility functions)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFinancialPlanner\u003e readFinancialPlanner(String filePath) throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlFinancialPlannerStorage(Paths.get(filePath), Paths.get(filePath))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .readFinancialPlanner(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cUniqueRecordList\u003e readRecordList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlFinancialPlannerStorage(Paths.get(filePath), Paths.get(filePath))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .readRecordList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cDateBasedLimitList\u003e readLimitList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlFinancialPlannerStorage(Paths.get(filePath), Paths.get(filePath))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .readLimitList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: Test(path generator)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: Test(missing files)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFiles_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readFinancialPlanner(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readRecordList(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readLimitList(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: Test(not XML)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_recordListNotXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        readRecordList(\"NotXmlFormatRecordList.xml\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_limitListNotXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readLimitList(\"NotXmlFormatLimitList.xml\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: Test(not correct format)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readRecordList_invalidRecordRecordList_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        readRecordList(\"invalidRecord_RecordList.xml\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readLimitList_invalidLimitLimitList_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        readLimitList(\"invalidLimit_LimitList.xml\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: Test(incorrect then correct format)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readRecordList_invalidAndValidRecordRecordList_throwDataConversionException()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        readFinancialPlanner(\"invalidAndValidRecordRecordList.xml\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readLimitList_invalidAndValidLimitLimitList_throwDataConversionException()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        readLimitList(\"invalidAndValidLimitLimitList.xml\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: Refactor the storage into 3 different storage"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveFinancialPlanner_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Path recordListFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempFinancialPlanner.xml\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Path limitListFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempLimitList.xml\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        FinancialPlanner original \u003d getTypicalFinancialPlanner();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFinancialPlannerStorage xmlFinancialPlannerStorage \u003d new XmlFinancialPlannerStorage(recordListFilePath,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                limitListFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back, save each file separately"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlFinancialPlannerStorage.saveRecordList(original, recordListFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlFinancialPlannerStorage.saveLimitList(original, limitListFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        //Read back the data into 3 components"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueRecordList recordList \u003d xmlFinancialPlannerStorage.readRecordList(recordListFilePath).get();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        DateBasedLimitList limitList \u003d xmlFinancialPlannerStorage.readLimitList(limitListFilePath).get();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        //Recreate the readback financial planner"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        FinancialPlanner readBack \u003d new FinancialPlanner();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        //TODO: @Oscar add your limit in resetdata"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack.resetData(recordList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        readBack.resetLimit(limitList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new FinancialPlanner(readBack));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addRecord(BURSARY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removeRecord(INDO);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlFinancialPlannerStorage.saveRecordList(original, recordListFilePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlFinancialPlannerStorage.saveLimitList(original, limitListFilePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        recordList \u003d xmlFinancialPlannerStorage.readRecordList(recordListFilePath).get();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        limitList \u003d xmlFinancialPlannerStorage.readLimitList(limitListFilePath).get();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d new FinancialPlanner();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        readBack.resetLimit(limitList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack.resetData(recordList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new FinancialPlanner(readBack));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addRecord(IDA);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        xmlFinancialPlannerStorage.saveRecordList(original); //file path not specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlFinancialPlannerStorage.saveLimitList(original);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        recordList \u003d xmlFinancialPlannerStorage.readRecordList(recordListFilePath).get();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        limitList \u003d xmlFinancialPlannerStorage.readLimitList(limitListFilePath).get();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d new FinancialPlanner();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack.resetData(recordList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        readBack.resetLimit(limitList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new FinancialPlanner(readBack));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: test(savenullobject_throwsNull)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveRecordList_nullRecordList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        saveRecordList(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveLimitList_nullLimitList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLimitList(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO:test(save everything) utility"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves record list of {@code financialPlanner} at the specified {@code filePath}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveRecordList(ReadOnlyFinancialPlanner financialPlanner, String filePath) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlFinancialPlannerStorage(Paths.get(filePath), Paths.get(filePath))"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveRecordList(financialPlanner, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves limit list of {@code financialPlanner} at the specified {@code filePath}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveLimitList(ReadOnlyFinancialPlanner financialPlanner, String filePath) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlFinancialPlannerStorage(Paths.get(filePath), Paths.get(filePath))"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveLimitList(financialPlanner, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: test(save without filepath)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveRecordList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        saveRecordList(new FinancialPlanner(), null);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveLimitList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLimitList(new FinancialPlanner(), null);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 10,
      "-": 227
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/LimitBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * A utility class to help with building Limit objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class LimitBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String DEFAULT_DATE_START \u003d \"01-01-2001\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String DEFAULT_DATE_END \u003d \"01-02-2001\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final String DEFAULT_MONEYFLOW \u003d \"-11.30\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private Date dateStart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private Date dateEnd;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private MoneyFlow moneyFlow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public LimitBuilder () {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateStart \u003d new Date(DEFAULT_DATE_START);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateEnd \u003d new Date(DEFAULT_DATE_END);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        moneyFlow \u003d new MoneyFlow(DEFAULT_MONEYFLOW);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Initializes the LimitBuilder with the data of {@code limitToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public LimitBuilder (Limit limitToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateStart \u003d limitToCopy.getDateStart();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        dateEnd \u003d limitToCopy.getDateEnd();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        moneyFlow \u003d limitToCopy.getLimitMoneyFlow();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Sets the {@code dateStart} of the {@code Limit} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public LimitBuilder withDateStart(String dateStart) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.dateStart \u003d new Date(dateStart);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Parses the date and set it to the {@code Limti} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public LimitBuilder withDateEnd(String dateEnd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.dateEnd \u003d new Date(dateEnd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Sets the {@code MoneyFlow} of the {@code Limit} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public LimitBuilder withMoneyFlow(String moneyFlow) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        this.moneyFlow \u003d new MoneyFlow(moneyFlow);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public Limit build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new Limit(dateStart, dateEnd, moneyFlow);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 66
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/SummaryBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Month;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.DaySummary;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.MonthSummary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.Summary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " * A utility class to help buildDaySummary Summary objects for testing"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class SummaryBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"10-2-2018\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String DEFAULT_TOTAL_EXPENSE \u003d \"-10\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String DEFAULT_TOTAL_INCOME \u003d \"+300\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String DEFAULT_TOTAL \u003d \"+290\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public static final String DEFAULT_MONTH \u003d \"feb-2018\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private MoneyFlow totalExpense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private MoneyFlow totalIncome;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private MoneyFlow total;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        month \u003d new Month(DEFAULT_MONTH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        totalExpense \u003d new MoneyFlow(DEFAULT_TOTAL_EXPENSE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        totalIncome \u003d new MoneyFlow(DEFAULT_TOTAL_INCOME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        total \u003d new MoneyFlow(DEFAULT_TOTAL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryBuilder(DaySummary summaryToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        date \u003d summaryToCopy.getDate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        totalExpense \u003d summaryToCopy.getTotalExpense();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        totalIncome \u003d summaryToCopy.getTotalIncome();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        total \u003d summaryToCopy.getTotal();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryBuilder(MonthSummary summaryToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        month \u003d summaryToCopy.getMonth();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        totalExpense \u003d summaryToCopy.getTotalExpense();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        totalIncome \u003d summaryToCopy.getTotalIncome();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        total \u003d summaryToCopy.getTotal();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Sets the {@code date} of the {@code Summary} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryBuilder withDate(String date) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Sets the {@code month} of the {@code Summary} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryBuilder withMonth(String month) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.month \u003d new Month(month);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Sets the {@code totalExpense} of the {@code Summary} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryBuilder withTotalExpense(String totalExpense) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.totalExpense \u003d new MoneyFlow(totalExpense);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Sets the {@code totalIncome} of the {@code Summary} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryBuilder withTotalIncome(String totalIncome) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.totalIncome \u003d new MoneyFlow(totalIncome);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Sets the {@code total} of the {@code Summary} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public SummaryBuilder withTotal(String total) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        this.total \u003d new MoneyFlow(total);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public Summary buildDaySummary() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new DaySummary(date, totalExpense, totalIncome, total);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public Summary buildMonthSummary() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        return new MonthSummary(month, totalExpense, totalIncome, total);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 89,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/TypicalDates.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.getTypicalFinancialPlanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": " * A utility class containing a list of {@code Date} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "public class TypicalDates {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private static Model model \u003d new ModelManager(getTypicalFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final Date DATE_FIRST_INDEX_DATE \u003d model.getFilteredRecordList().get("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            TypicalIndexes.INDEX_FIRST_RECORD.getZeroBased()).getDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Date DATE_SECOND_INDEX_DATE \u003d model.getFilteredRecordList().get("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            TypicalIndexes.INDEX_SECOND_RECORD.getZeroBased()).getDate();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    public static final Date DATE_THIRD_INDEX_DATE \u003d model.getFilteredRecordList().get("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "            TypicalIndexes.INDEX_THIRD_RECORD.getZeroBased()).getDate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Date DATE_LAST_INDEX_DATE \u003d model.getFilteredRecordList().get("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            TypicalIndexes.INDEX_LAST_RECORD.getZeroBased()).getDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 20,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.getTypicalFinancialPlanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyenngoclinhchi"
        },
        "content": "    private static Model model \u003d new ModelManager(getTypicalFinancialPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int FIRST \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int SECOND \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int THIRD \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int LAST \u003d model.getFilteredRecordList().size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_RECORD \u003d Index.fromOneBased(FIRST);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_RECORD \u003d Index.fromOneBased(SECOND);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_RECORD \u003d Index.fromOneBased(THIRD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_LAST_RECORD \u003d Index.fromOneBased(LAST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyenngoclinhchi": 6,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/planner/testutil/TypicalLimits.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "package seedu.planner.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.FinancialPlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.Limit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "import seedu.planner.model.record.MoneyFlow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " * A utility class containing a list of {@code Limit} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "public class TypicalLimits {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final Limit LIMIT_100 \u003d new LimitBuilder().withDateStart(\"01-02-2018\").withDateEnd(\"5-02-2018\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            .withMoneyFlow(\"-100\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final Limit LIMIT_500 \u003d new LimitBuilder().withDateStart(\"01-02-2018\").withDateEnd(\"5-02-2018\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            .withMoneyFlow(\"-500\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final Limit LIMIT_5000 \u003d new LimitBuilder().withDateStart(\"01-02-2018\").withDateEnd(\"5-02-2018\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            .withMoneyFlow(\"-5000\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final Limit LIMIT_WEEKS_RANGE \u003d new LimitBuilder().withDateStart(\"01-02-2018\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            .withDateEnd(\"07-02-2018\").withMoneyFlow(\"-100\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final Limit LIMIT_DATE_START_DIFF \u003d new LimitBuilder().withDateStart(\"09-01-2018\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            .withDateEnd(\"05-02-2018\").withMoneyFlow(\"-100\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final Limit LIMIT_DATE_END_DIFF \u003d new LimitBuilder().withDateStart(\"01-02-2018\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            .withDateEnd(\"01-07-2019\").withMoneyFlow(\"-100\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final Limit LIMIT_ALL_DIFFERENT \u003d new LimitBuilder().withDateStart(\"01-01-2017\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            .withDateEnd(\"21-05-2019\").withMoneyFlow(\"-367\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    // Manually added - Record\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final MoneyFlow TYPICAL_LIMIT_MONEY_101 \u003d new MoneyFlow(\"-101\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final MoneyFlow TYPICAL_LIMIT_MONEY_100 \u003d new MoneyFlow(\"-100\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final MoneyFlow TYPICAL_LIMIT_EXCEEDED \u003d new MoneyFlow(\"-999999\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final MoneyFlow TYPICAL_LIMIT_NOT_EXCEEDED \u003d new MoneyFlow(\"-1\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final MoneyFlow TYPICAL_LIMIT_MONEY_EARNED \u003d new MoneyFlow(\"+100\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final Date TYPICAL_START_DATE \u003d new Date(\"01-02-2018\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final Date TYPICAL_WITHIN_DATE \u003d new Date(\"03-02-2018\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final Date TYPICAL_END_DATE \u003d new Date(\"05-02-2018\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static final Date TYPICAL_NOT_INSIDE_DATE \u003d new Date (\"30-03-2028\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    private TypicalLimits() {} // prevents instantiation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     * Returns an {@code FinancialPlanner} with all the typical records."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static FinancialPlanner getTypicalFinancialPlanner() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        FinancialPlanner ab \u003d new FinancialPlanner();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        for (Limit limit : getTypicalLimits()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "            ab.addLimit(limit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    public static List\u003cLimit\u003e getTypicalLimits() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LIMIT_100, LIMIT_500, LIMIT_5000, LIMIT_DATE_START_DIFF, LIMIT_WEEKS_RANGE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "                LIMIT_DATE_END_DIFF, LIMIT_ALL_DIFFERENT));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarzeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarzeng": 68
    }
  },
  {
    "path": "src/test/java/systemtests/FindTagCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tztzt"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_RECORDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.CAIFAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.INDO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.ZT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tztzt"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.FindTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindTagCommandSystemTest extends FinancialPlannerSystemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple records in planner book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tztzt"
        },
        "content": "         * -\u003e 2 records found"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tztzt"
        },
        "content": "         */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        String command \u003d \"   \" + FindTagCommand.COMMAND_WORD + \" friends      \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CAIFAN, INDO, ZT); // these names contain the tag \"friends\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        /* Case: repeat previous find command where record list is displaying the records we are finding"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tztzt"
        },
        "content": "         * -\u003e 2 records found"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tztzt"
        },
        "content": "         */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" \" + \"friends\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        /* Case: find record where record list is not displaying the record we are finding -\u003e 1 record found */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" work\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, IDA);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple records in planner book, 2 keywords -\u003e 2 records found */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" friends work\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CAIFAN, INDO, ZT, IDA);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple records in planner book, 2 keywords in reversed order -\u003e 2 records found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" work friends\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple records in planner book, 2 keywords with 1 repeat -\u003e 2 records found */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" work friends work\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CAIFAN, INDO, ZT, IDA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple records in planner book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tztzt"
        },
        "content": "         * -\u003e 2 records found"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tztzt"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" work friends NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same records in planner book after deleting 1 of them -\u003e 1 record found */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFinancialPlanner().getRecordList().contains(INDO));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" work friends\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CAIFAN, ZT, IDA);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find record in planner book, keyword is same as tag but of different case -\u003e 1 record found */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" frIENds\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find record in planner book, keyword is substring of tags -\u003e 0 records found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" ends\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find record in planner book, tag is substring of keyword -\u003e 0 records found */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" owesmoneytome\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find record not in planner book -\u003e 0 records found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" family\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find date of record in planner book -\u003e 0 records found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" \" + ZT.getDate().value;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find money flow of record in planner book -\u003e 0 records found */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" \" + ZT.getMoneyFlow().value;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find name of record in planner book -\u003e 0 records found */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" \" + ZT.getName().fullName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        /* Case: find while a record is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        showAllRecords();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        selectRecord(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertFalse(getRecordListPanel().getHandleToSelectedCard().getName().equals(ZT.getName().fullName));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" work\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, IDA);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find record in empty planner book -\u003e 0 records found */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        deleteAllRecords();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d FindTagCommand.COMMAND_WORD + \" friends\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ZT);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        command \u003d \"fINDtAG friends\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * box displays {@code Messages#MESSAGE_RECORDS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code FinancialPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FinancialPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tztzt"
        },
        "content": "                MESSAGE_RECORDS_LISTED_OVERVIEW, expectedModel.getFilteredRecordList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code FinancialPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FinancialPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tztzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tztzt"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tztzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tztzt"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tztzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tztzt": 156,
      "-": 32
    }
  },
  {
    "path": "src/test/java/systemtests/SummaryCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.DateUtil.generateFirstOfMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.DateUtil.generateLastOfMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.BURSARY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.CAIFAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.IDA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.JAP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.KOREAN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.testutil.TypicalRecords.ZT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static systemtests.SummaryCommandSystemTest.Mode.BY_DATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static systemtests.SummaryCommandSystemTest.Mode.BY_MONTH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.SummaryByDateCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.SummaryByMonthCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.FinancialPlanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Month;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.record.DateIsWithinIntervalPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.SummaryByDateList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.summary.SummaryByMonthList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.ui.SummaryEntry;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "//@@author tenvinc"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "public class SummaryCommandSystemTest extends FinancialPlannerSystemTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String START_DATE \u003d \"25-3-2018\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String END_DATE \u003d \"25-5-2018\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String START_MONTH \u003d \"MAR-2018\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private static final String END_MONTH \u003d \"MAY-2018\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    public void summary() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        SummaryByDateList summariesByDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        SummaryByMonthList summariesByMonth;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String defaultSummaryByDateCommand \u003d \"   \" + SummaryCommand.COMMAND_WORD + \"  \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + SummaryByDateCommand.COMMAND_MODE_WORD + \"  \" + PREFIX_DATE + \" \" + START_DATE + \" \" + END_DATE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String defaultSummaryByMonthCommand \u003d \" \" + SummaryCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                + SummaryByMonthCommand.COMMAND_MODE_WORD + \" \" + PREFIX_DATE + \" \" + START_MONTH + \" \" + END_MONTH;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* ------------------------ Check starting state of program ------------------------------------------------- */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* Case: Perform an initial summaryByDate operation -\u003e Success */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByDate \u003d new SummaryByDateList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(START_DATE, END_DATE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByDateCommand, model, summariesByDate.getSummaryList(), BY_DATE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* Case: Perform an initialSummaryByMonthOperation -\u003e Success */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByMonth \u003d new SummaryByMonthList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(generateFirstOfMonth(new Month(START_MONTH)),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                        generateLastOfMonth(new Month(END_MONTH))));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByMonthCommand, model, summariesByMonth.getSummaryList(), BY_MONTH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* ------------------------ Clear starting state and check state -------------------------------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* Case: Clear initial financial planner -\u003e nothing in summary table */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        clearModel(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByDateCommand, model, FXCollections.emptyObservableList(), BY_DATE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByMonthCommand, model, FXCollections.emptyObservableList(), BY_MONTH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* ---------------Add records into the program and check state -----------------------------------------------*/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* Case: Add 2 records (CAIFAN, ZT) different in date and month, then do summary by date and by month"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        -\u003e 2 entries in summary table */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        addRecord(model, CAIFAN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        addRecord(model, ZT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByDate \u003d new SummaryByDateList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(START_DATE, END_DATE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByDateCommand, model, summariesByDate.getSummaryList(), BY_DATE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByMonth \u003d new SummaryByMonthList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(generateFirstOfMonth(new Month(START_MONTH)),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                        generateLastOfMonth(new Month(END_MONTH))));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByMonthCommand, model, summariesByMonth.getSummaryList(), BY_MONTH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* Case: Add 2 records with same date as ZT, then do summary by date and by month"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        -\u003e 2 entries in summary table */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        addRecord(model, JAP);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        addRecord(model, KOREAN);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByDate \u003d new SummaryByDateList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(START_DATE, END_DATE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByDateCommand, model, summariesByDate.getSummaryList(), BY_DATE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByMonth \u003d new SummaryByMonthList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(generateFirstOfMonth(new Month(START_MONTH)),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                        generateLastOfMonth(new Month(END_MONTH))));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByMonthCommand, model, summariesByMonth.getSummaryList(), BY_MONTH);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* Case: Add 2 records with a date that is not tracked by summary, then do summary by date and by month"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         -\u003e no change */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        addRecord(model, IDA);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        addRecord(model, BURSARY);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByDateCommand, model, summariesByDate.getSummaryList(), BY_DATE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByMonthCommand, model, summariesByMonth.getSummaryList(), BY_MONTH);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* --------------------- Edit existing records and check state -----------------------------------------------*/"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* Case: Finds the CAIFAN record and edit it with another date that is tracked by summary,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         then do summary by date and by month -\u003e change is reflected in summary table"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "          */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        findRecord(model, CAIFAN);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        editRecord(model, 1, \"1-4-2018\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByDate \u003d new SummaryByDateList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(START_DATE, END_DATE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByDateCommand, model, summariesByDate.getSummaryList(), BY_DATE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByMonth \u003d new SummaryByMonthList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(generateFirstOfMonth(new Month(START_MONTH)),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                        generateLastOfMonth(new Month(END_MONTH))));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByMonthCommand, model, summariesByMonth.getSummaryList(), BY_MONTH);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* Case: Finds the ZT record and edit it with another date that is not tracked by summary,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         then do summary by date and by month -\u003e change is still reflected in summary table"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        findRecord(model, ZT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        editRecord(model, 1, \"1-4-2019\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByDate \u003d new SummaryByDateList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(START_DATE, END_DATE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByDateCommand, model, summariesByDate.getSummaryList(), BY_DATE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByMonth \u003d new SummaryByMonthList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(generateFirstOfMonth(new Month(START_MONTH)),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                        generateLastOfMonth(new Month(END_MONTH))));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByMonthCommand, model, summariesByMonth.getSummaryList(), BY_MONTH);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* --------------------- Deletes existing records and check state --------------------------------------------*/"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* Case: Removes all records of a single date then do summary by date and by month"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        -\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        deleteRecordByDate(model, KOREAN.getDate().value);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByDate \u003d new SummaryByDateList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(START_DATE, END_DATE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByDateCommand, model, summariesByDate.getSummaryList(), BY_DATE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByMonth \u003d new SummaryByMonthList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(generateFirstOfMonth(new Month(START_MONTH)),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                        generateLastOfMonth(new Month(END_MONTH))));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByMonthCommand, model, summariesByMonth.getSummaryList(), BY_MONTH);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* Case: Removes records not tracked by summary and then do summary"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        -\u003e No change in summary table"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        findRecord(model, BURSARY);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        deleteRecord(model, 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByDateCommand, model, summariesByDate.getSummaryList(), BY_DATE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByMonthCommand, model, summariesByMonth.getSummaryList(), BY_MONTH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        findRecord(model, IDA);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        deleteRecord(model, 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByDateCommand, model, summariesByDate.getSummaryList(), BY_DATE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByMonthCommand, model, summariesByMonth.getSummaryList(), BY_MONTH);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        /* ----------------------------------- Undo, redo and check state --------------------------------------------*/"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        undoModel(model);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByDate \u003d new SummaryByDateList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(START_DATE, END_DATE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByDateCommand, model, summariesByDate.getSummaryList(), BY_DATE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByMonth \u003d new SummaryByMonthList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(generateFirstOfMonth(new Month(START_MONTH)),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                        generateLastOfMonth(new Month(END_MONTH))));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByMonthCommand, model, summariesByMonth.getSummaryList(), BY_MONTH);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        redoModel(model);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByDate \u003d new SummaryByDateList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(START_DATE, END_DATE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByDateCommand, model, summariesByDate.getSummaryList(), BY_DATE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        summariesByMonth \u003d new SummaryByMonthList(model.getFinancialPlanner().getRecordList(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                new DateIsWithinIntervalPredicate(generateFirstOfMonth(new Month(START_MONTH)),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                        generateLastOfMonth(new Month(END_MONTH))));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandSuccess(defaultSummaryByMonthCommand, model, summariesByMonth.getSummaryList(), BY_MONTH);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Executes the ClearCommand on the ui and updates the expected model"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @param model expectedModel to update"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    protected void clearModel(Model model) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        model.resetData(new FinancialPlanner());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        model.commitFinancialPlanner();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Executes the {@code SummaryCommand} that queries the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code SummaryCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * 4. {@code Storage} and {@code RecordListPanel} remains unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * 5. Selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * {@code FinancialPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @see FinancialPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "                                      ObservableList\u003cSummaryEntry\u003e expectedList, Mode mode) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        requireAllNonNull();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        String expectedResultMessage;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        if (mode.equals(BY_DATE)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            expectedResultMessage \u003d String.format(SummaryByDateCommand.MESSAGE_SUCCESS, expectedList.size());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else if (mode.equals(BY_MONTH)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            expectedResultMessage \u003d String.format(SummaryByMonthCommand.MESSAGE_SUCCESS, expectedList.size());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "            expectedResultMessage \u003d \"\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertSummaryDisplayShownCorrectly(expectedList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * {@code FinancialPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * Also verifies that the selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     * @see FinancialPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    enum Mode {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "        BY_DATE, BY_MONTH"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Tenvinc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tenvinc": 208,
      "-": 30
    }
  }
]
