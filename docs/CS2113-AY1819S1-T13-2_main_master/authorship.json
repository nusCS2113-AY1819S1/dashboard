[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d Forum Book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image:https://travis-ci.org/CS2113-AY1819S1-T13-2/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/CS2113-AY1819S1-T13-2/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "https://ci.appveyor.com/project/xllx1/main[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-T13-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-T13-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d\u003d Objective"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* This is a desktop Forum application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* This project aims to provide a convenient place for NUS students to discuss the modules details before bidding"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d\u003d Supported Platform"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* Main stream OSes, Windows, MacOS, Linux"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* Java 9 runtime and above is required"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* Keyboard and monitor obviously"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* This forum book is build on top of AddressBook-Level4 project that was created by https://github.com/se-edu/[SE-EDU] initiative"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 11,
      "xllx1": 4,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "  \"authors\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "      \"githubId\": \"Meowzz95\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "      \"displayName\": \"Zhao Mingda\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        \"Meowzz95\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        \"mimimi\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "      \"githubId\": \"xllx1\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "      \"displayName\": \"Cai Xiaolin\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    },"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "      \"githubId\": \"HansKoh\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "      \"displayName\": \"Xu Hanhui\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "      \"githubId\": \"E0191729\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "      \"displayName\": \"Dinesh Durai\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 24
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            test.include \u0027com/t13g2/forum/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            test.include \u0027com/t13g2/forum/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            test.exclude \u0027com/t13g2/forum/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "xllx1": 3,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 was developed by CS2113 T13 Group 2 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Zhao Mingda"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::meowzz95.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/Meowzz95[github]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Leader +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibility"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Xu Hanhui"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::hanskoh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/HansKoh[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Dinesh Mangalanathadurai"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::e0191729.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/E0191729[github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Cai Xiaolin"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::xllx1.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/xllx1[github]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "xllx1": 4,
      "-": 44
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003d Forum Book - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-T13-2/main/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "By: `Team CS2113 T13-2`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ". Run the `MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xllx1"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/t13g2/forum/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xllx1"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete m/CS2113 i/1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xllx1"
        },
        "content": ".Component interactions for `delete m/CS2113 i/1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Note how the `Model` simply raises a `ForumBookChangedEvent` when the Forum Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xllx1"
        },
        "content": ".Component interactions for `delete m/CS2113 i/1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xllx1"
        },
        "content": "*API* : link:{repoURL}/src/main/java/t13g2/forum/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xllx1"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ModuleListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xllx1"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/t13g2/forum/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xllx1"
        },
        "content": "link:{repoURL}/src/main/java/t13g2/forum/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xllx1"
        },
        "content": ".  `Logic` uses the `ForumBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete m/CS2113 i/1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xllx1"
        },
        "content": ".Interactions Inside the Logic Component for the `delete m/CS2113 i/1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::DeleteThreadSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xllx1"
        },
        "content": "*API* : link:{repoURL}/src/main/java/t13g2/forum/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* stores the Forum Book data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cThread\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xllx1"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Forum Book`, which `Thread` can reference. This would allow `Forum Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xllx1"
        },
        "content": "*API* : link:{repoURL}/src/main/java/t13g2/forum/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* can save the Forum Book data in object string binary format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Classes used by multiple components are in the `t13g2.forum.commons` package."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "// tag::CURD feature"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "\u003d\u003d\u003d CURD feature"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "CURD is refers to `create`, `update`, `read` and `delete`. This feature is implemented to achieve basic functionalities of the Forum Book. It extends `ForumBook` with various commands and supports the following operations:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `createThread`: Create a new thread under a specific module with comment."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `updateThread`: Update a existing thread title created by its user."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `listModule`: List out all the modules in the Forum Book."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `selectModule`: Select a specific module and list out all the threads under the module."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `selectThread`: Select a specific thread and list out all the comments under the thread."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `deleteThread`: Delete a specific thread."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Given below is an example usage scenario and how the CURD can be operated by user at each step."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Step 1. The user launches the application, executes `createThread mCode/CS2113 tTitle/Exam Information cContent/What is the topic coverage for the final?` to create and add the thread into storage file. The createThread command calls `UnitOfWork.commit()`, saving the modified forum book state into ForumBookStorage."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Step 2. The user executes `updateThread tId/123 tTitle/Mid-term Test` to update the specific thread\u0027s title from storage file. The updateThread command calls `UnitOfWork.getForumThreadRepository().getThread(threadId)`，`forumThread.setTitle()` and lastly `UnitOfWork.commit()`, saving the modified forum book state into ForumBookStorage."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Step 3. The user executes `listModule` to retrieve all the existing modules from storage file. The `listModule` command calls `UnitOfWork.getModuleRepository().getAllModule()` which returns the module list to be shown in the panel."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Step 4. The user executes `selectModule mCode/CS2113` to retrieve the module with module code CS2113 and its thread list from storage file. The `selectModule` command calls `UnitOfWork.getModuleRepository().getModuleByCode(moduleCode)` and `UnitOfWork.getForumThreadRepository().getThreadsByModule(module)` to return the module and thread list to be shown in the panel."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Step 5. The user executes `selectThread tId/123` to retrieve the thread with ID 123 and its comments from storage file. The `selectModule` command calls `UnitOfWork.getForumThreadRepository().getThread(threadId)` and `UnitOfWork.getCommentRepository().getCommentsByThread(threadId)` to return the thread and comment list to be shown in the panel."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Step 6. The user executes `deleteThread tId/123` to delete/remove the thread with ID 123 from storage file. The deleteThread command calls `UnitOfWork.getForumThreadRepository().deleteThread(threadId)` and `UnitOfWork.commit()` to save the modified forum book state."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "If the syntax of a command is wrong, the program will prompt the user to try again and show a suggested command format."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//end of CURD feature"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedForumBook`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "It extends `ForumBook` with an undo/redo history, stored internally as an `ForumBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `VersionedForumBook#commit()` -- Saves the current forum Book state in its history."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `VersionedForumBook#undo()` -- Restores the previous forum Book state from its history."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `VersionedForumBook#redo()` -- Restores a previously undone forum Book state from its history."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitForumBook()`, `Model#undoForumBook()` and `Model#redoForumBook()` respectively."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedForumBook` will be initialized with the initial forum Book state, and the `currentStatePointer` pointing to that single forum Book state."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "Step 2. The user executes `delete m/CS2113 i/1` command to delete the 1st forumThread under module CS2113 in the forum Book. The `delete` command calls `Model#commitForumBook()`, causing the modified state of the forum Book after the `delete m/CS2113 i/1` command executes to be saved in the `ForumBookStateList`, and the `currentStatePointer` is shifted to the newly inserted forum Book state."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "Step 3. The user executes `reply m/CS2113 i/1 ...` to comment 1st forumThread under module CS2113 . The `reply` command also calls `Model#commitForumBook()`, causing another modified forum Book state to be saved into the `ForumBookStateList`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "If a command fails its execution, it will not call `Model#commitForumBook()`, so the forum Book state will not be saved into the `ForumBookStateList`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoForumBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous forum Book state, and restores the forum Book to that state."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial forum Book state, then there are no previous forum Book states to restore. The `undo` command uses `Model#canUndoForumBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoForumBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the forum Book to that state."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "If the `currentStatePointer` is at index `ForumBookStateList.size() - 1`, pointing to the latest forum Book state, then there are no undone forum Book states to restore. The `redo` command uses `Model#canRedoForumBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the forum Book, such as `list`, will usually not call `Model#commitForumBook()`, `Model#undoForumBook()` or `Model#redoForumBook()`. Thus, the `ForumBookStateList` remains unchanged."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitForumBook()`. Since the `currentStatePointer` is not pointing at the end of the `ForumBookStateList`, all forum Book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire forum Book."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of forum Book states."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedForumBook`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d\u003d\u003d Storage"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "As the basis of the whole program, storage should be robust, efficient and stable at all the time."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "Data consistency and multi-thread access should be specially taken care of."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "ForumBook\u0027s storage consists of six(6) parts."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* User"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "** Stores user information like username, password, email etc."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* Announcement"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "** Stores announcement set by admin, multiple announcements can be saved in the storage."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* Module"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "** Stores module information like module name, code etc."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* ForumThread"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "** Stores threads posted by users"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* Comment"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "** Stores comments under threads"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* RunningId"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "** Used for generating auto incremented ID, each the above entity has a unique ID"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "These components are stored separately in six files for performance, see below for detailed process of loading and saving."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d\u003d\u003d\u003d Storage Structure"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "To avoid unnecessary disk IO, each part of the storage is saved in a file located in `forumData` directory."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "All data manipulation must be done within an `IUnitOfWork` where developer has to commit if the data"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "should be persistent on disk, and rollback if the exception is thrown somewhere during the transaction."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "`IStorage` defines interface to access file systems, this handles how our program actually get/read data."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "By default, we have `FileStorage` which stores and reads data from local hard disk. More storage options"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " can be achieved by implementing this interface. eg: `FtpStorage`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "`IForumBookStorage` defines interface to access data entities"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "`I*Repository` defines interface to how we can manipulate different entities."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "Each entity is managed by a repository, eg: `IUserRepository`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "`*Storage` is a thin wrapper for the ease of serializing data into `ObjectStream`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "Data are saved in ObjectStream"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "`RunningId` does not work as the other entities do, it has its own logic to make sure IDs are consistent among processes"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "if the user runs more than one instance of the program."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "E0191729"
        },
        "content": "\u003d\u003d\u003d User management"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "E0191729"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "E0191729"
        },
        "content": "The user management is facilitated by various commands. It extends `ForumBook` with a user management tool. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "E0191729"
        },
        "content": "* `AddUserCommand` -- Add user to forum book."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "E0191729"
        },
        "content": "* `LoginCommand`: login to forum book."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "E0191729"
        },
        "content": "* `LogoutCommand`: logout from the forum book."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "E0191729"
        },
        "content": "* `UpdateCommand`: Update a certain user\u0027s password, email and/or phone."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "E0191729"
        },
        "content": "Given below is an example usage scenario and how the admin management behaves at each step."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "E0191729"
        },
        "content": "This Section below until Admin Management need to be edited :("
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "E0191729"
        },
        "content": "Step 1. The admin launches the application, executes `announce aTitle/Urgent! aContent/System maintenance from 3PM to 6PM.` to add the announcement to storage file. The `announce` command calls `UnitOfWork.getAnnouncementRepository.addAnnouncement(announcement)` and then `UnitOfWork.commit()`, causing a modified forum book state to be saved into `ForumBookStorage`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "E0191729"
        },
        "content": "image::SDAnnounce.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "E0191729"
        },
        "content": "Step 2. The admin/user executes `checkAnnounce` to check for the latest announcement in storage file. The `checkAnnounce` calls the `UnitOfWork.getAnnouncementRepository().getLatestAnnouncement()` which returns an announcement to be shown in the message dialog."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "E0191729"
        },
        "content": "image::SDCheckAnnounce.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "E0191729"
        },
        "content": "Step 3. The admin executes `block uName/john` to block john from creating new threads or comments. The `block` calls `User.setIsBlock(true)` and then `UnitOfWork.commit()`, causing another modified forum book state to be saved into `ForumBookStorage`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "E0191729"
        },
        "content": "image::SDBlockUserFromCreating.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "E0191729"
        },
        "content": "Step 4. The admin executes `setAdmin uName/john set/true` to set a certain user as admin or to revert an admin to user. The `setAdmin` calls the `User.setAdmin(true)` and then `UnitOfWork.commit()`, causing another modified forum book state to be saved into `ForumBookStorage`."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "E0191729"
        },
        "content": "image::SDSetAdmin.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "E0191729"
        },
        "content": "Step 5. The admin executes `createModule mCode/CS2113 mTitle/Software Engineering and OOP` to create the specific module. The `createModule` calls the `UnitOfWork.getModuleRepository().addModule(module)` and then `UnitOfWork.commit()`, causing another modified forum book state to be save into `ForumBookStorage`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "E0191729"
        },
        "content": "image::SDCreateModule.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "E0191729"
        },
        "content": "Step 6. The admin executes `deleteModule mCode/CS2113` to delete specific module. The `deleteModule` calls the `UnitOfWork.getModuleRepository().removeModule(module);` and then `UnitOfWork.commit()`, causing another modified forum book state to be save into `ForumBookStorage`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "E0191729"
        },
        "content": "image::SDDeleteModule.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "E0191729"
        },
        "content": "Step 7. The admin executes `updatePass uName/john uPass/098` to update the user john\u0027s password. The `updatePass` calls the `UnitOfWork.getUserRepository().updateUser(user)` and then `UnitOfWork.commit()`, causing another modified forum book state to be save into `ForumBookStorage`."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "E0191729"
        },
        "content": "image::SDUpdatePass.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "E0191729"
        },
        "content": "Step 8. The admin executes `deleteUser uName/john` to delete the user john. The `deleteUser` calls the ` UnitOfWork.getUserRepository().deleteUser(userToDelete)` and then `UnitOfWork.commit()`, causing another modified forum book state to be save into `ForumBookStorage`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "E0191729"
        },
        "content": "image::SDDeleteUser.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "E0191729"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "E0191729"
        },
        "content": "If the syntax of a command is wrong, the program will prompt the user to try again and show a suggested command format."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "E0191729"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003d\u003d\u003d Admin management"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "xllx1"
        },
        "content": "The admin management is facilitated by various commands. It extends `ForumBook` with a admin management tool. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `AnnounceCommand` -- Posts new announcement."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `CheckAnnouncementCommand`: Checks for latest announcement."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `BlockUserFromCreatingCommand`: Blocks a user from posting either new threads or comments."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `SetAdminCommand`: Sets a user as admin or reverts an admin to user."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `CreateModuleCommand`: Creates a module by admin."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `AdminUpdatePasswordCommand`: Updates a certain user\u0027s password by admin."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `DeleteUserCommand`: Deletes a certain user by admin."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Given below is an example usage scenario and how the admin management behaves at each step."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Step 1. The admin launches the application, executes `announce aTitle/Urgent! aContent/System maintenance from 3PM to 6PM.` to add the announcement to storage file. The `announce` command calls `UnitOfWork.getAnnouncementRepository.addAnnouncement(announcement)` and then `UnitOfWork.commit()`, causing a modified forum book state to be saved into `ForumBookStorage`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::SDAnnounce.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Step 2. The admin/user executes `checkAnnounce` to check for the latest announcement in storage file. The `checkAnnounce` calls the `UnitOfWork.getAnnouncementRepository().getLatestAnnouncement()` which returns an announcement to be shown in the message dialog."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::SDCheckAnnounce.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Step 3. The admin executes `block uName/john` to block john from creating new threads or comments. The `block` calls `User.setIsBlock(true)` and then `UnitOfWork.commit()`, causing another modified forum book state to be saved into `ForumBookStorage`."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::SDBlockUserFromCreating.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Step 4. The admin executes `setAdmin uName/john set/true` to set a certain user as admin or to revert an admin to user. The `setAdmin` calls the `User.setAdmin(true)` and then `UnitOfWork.commit()`, causing another modified forum book state to be saved into `ForumBookStorage`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::SDSetAdmin.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Step 5. The admin executes `createModule mCode/CS2113 mTitle/Software Engineering and OOP` to create the specific module. The `createModule` calls the `UnitOfWork.getModuleRepository().addModule(module)` and then `UnitOfWork.commit()`, causing another modified forum book state to be save into `ForumBookStorage`."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::SDCreateModule.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Step 6. The admin executes `deleteModule mCode/CS2113` to delete specific module. The `deleteModule` calls the `UnitOfWork.getModuleRepository().removeModule(module);` and then `UnitOfWork.commit()`, causing another modified forum book state to be save into `ForumBookStorage`."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::SDDeleteModule.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Step 7. The admin executes `updatePass uName/john uPass/098` to update the user john\u0027s password. The `updatePass` calls the `UnitOfWork.getUserRepository().updateUser(user)` and then `UnitOfWork.commit()`, causing another modified forum book state to be save into `ForumBookStorage`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::SDUpdatePass.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Step 8. The admin executes `deleteUser uName/john` to delete the user john. The `deleteUser` calls the ` UnitOfWork.getUserRepository().deleteUser(userToDelete)` and then `UnitOfWork.commit()`, causing another modified forum book state to be save into `ForumBookStorage`."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "xllx1"
        },
        "content": "image::SDDeleteUser.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "xllx1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "xllx1"
        },
        "content": "If the syntax of a command is wrong, the program will prompt the user to try again and show a suggested command format."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003d\u003d\u003d Data Encryption"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "Data encryption is done in a transparent layer between `ForumBookStorage` and `FileStorage`."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `t13g2.forum.ui` package."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "e.g. `t13g2.forum.commons.StringUtilTest`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "e.g. `StorageManagerTest`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "e.g. `LogicManagerTest`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "E0191729"
        },
        "content": "* has a need to share and read comments related to modules"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "E0191729"
        },
        "content": "*Value proposition*: Read a share comments faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "|`* * *` |user |add a new forumThread |"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "|`* * *` |user |delete his own forumThread |remove forumThread that I no longer relevant"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "|`* * *` |user |find a forumThread under a target module by keyword |locate the desired threat without having to go through the entire list of forumThread under a given module"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "|`* *` |user |like a forumThread under a target module | indicate the usefulness of a forumThread under a given module"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "|`* *` |user |dislike a forumThread under a target module | express my change in opinion on a forumThread which I previously indicated as useful"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "E0191729"
        },
        "content": "|`*` |user whom prefer to read the most liked threads |sort threads by the number of likes |locate threads which are liked the most by other users for a given module"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 48,
      "Meowzz95": 61,
      "E0191729": 57,
      "xllx1": 81,
      "-": 901
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "\u003d ForumBook - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ":repoURL:https://github.com/CS2113-AY1819S1-T13-2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "By: `Team CS2113-AY1819S1-T13-2`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "ForumBook (FB) is for those who *prefer to use a desktop app for module ForumBook*. More importantly, FB is optimized for those who *prefer to work with a Command Line Interface (CLI)* while still having the benefits of a Graphical User Interface (GUI). If you can type fast, FB can be a great place to learn and share comments regarding modules offered in NUS.This can be done faster than traditional GUI apps. Can\u0027t wait? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ".  Download the latest `ForumBook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Forum Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* **`find m/CS2113 java`** : finding threads associated with content, `java`, under module `CS2113`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* **`create m/CS2113 t/Is there mid-terms?`** : create a forumThread tittled as `Is there mid-terms?` under module `CS2113`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "* **`like m/CS2113 i/1`** : like the forumThread with `index 1` in module `CS2113`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* Items in square brackets are optional e.g `create m/MODULE_NAME t/THREAD_NAME [c/REPLY_MESSAGE]` can be used as `create m/CS2113 t/what is this module like? c/I heard that the workload is very heavy` or as `create m/CS2113 t/what is this module like?`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `m/CS2113 t/Is there mid-terms?`, `t/Is there mid-terms? m/CS2113` is also acceptable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d\u003d\u003d Creating a new forumThread : `create`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "Create a new forumThread under a specific module +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Format: `create m/MODULE_NAME t/THREAD_NAME [c/REPLY_MESSAGE]...`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `create m/CS2113 t/what is this module like? c/I heard that the workload is very heavy`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `create m/CS2113 t/Is there mid-terms?`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d\u003d\u003d Replying to a forumThread : `reply`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "Reply to a forumThread under a specific forumThread. +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Format: `reply m/MODULE_NAME i/THREAD_INDEX c/REPLY_MESSAGE`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `reply m/CS2113 i/1 c/It is Heavy but you get to learn a lot for it.`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `reply m/CS2113 i/2 c/I\u0027m not too sure. I\u0027m confused too!`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d\u003d\u003d Finding a forumThread : `find`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Finds a list of threads that match the given arguments. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Format: `find [m/MOD_CODE] keywords`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* The search is case insensitive. e.g CS2113 will match cs2113"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `find m/CS2113 java`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `find fun`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d\u003d\u003d Liking a forumThread : `like`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "Gives like to a forumThread under a specific module +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Format: `like m/MODULE_NAME i/THREAD_INDEX`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `like m/CS2113 i/1` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "give like to forumThread index 1 under module CS2113"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d\u003d\u003d Sorting a forumThread by most like : `sortdate`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Sort the threads under a specific module by date. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Format: `sortdate m/MODULE_NAME`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `sortdate m/CS2113`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003d\u003d\u003d Sorting a forumThread by most like : `sortlike`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Sort the threads under a specific module by most like. +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Format: `sortlike m/MODULE_NAME`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* `sortlike m/CS2113`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003d\u003d\u003d Announcing new command : `announce`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Announce the new announcement created by admin. +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Format: `announce aTitle/ANNOUNCEMENT_TITLE aContent/ANNOUNCEMENT_CONTENT`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `announce aTitle/Urgent! aContent/System maintenance from 4pm to 5pm.`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003d\u003d\u003d Checking for the latest announcement : `checkAnnounce`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Check for the latest announcement. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Format: `checkAnnounce`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003d\u003d\u003d Blocking a user from creating thread or comment : `block`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Block a specific user that match the given argument by admin. +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Format: `block uName/USER_NAME`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `block uName/john`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003d\u003d\u003d Setting a user as admin or revert an admin to user : `setAdmin`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Set a user as an admin or revert an admin to user. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Format: `setAdmin uName/USER_NAME set/SET_OR_REVERT`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `setAdmin uName/john set/true`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `setAdmin uName/john set/false`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003d\u003d\u003d Creating a new module : `createModule`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Create a new module by admin. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Format: `createModule mCode/MODULE_CODE mTitle/MODULE_TITLE`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `createModule mCode/CS2113 mTitle/Software Engineering and OOP`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003d\u003d\u003d Deleting a module : `deleteModule`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Delete an existing module by admin. +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Format: `deleteModule mCode/MODULE_CODE`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `deleteModule mCode/CS2113`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003d\u003d\u003d Updating password : `updatePass`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Update the given user\u0027s password by admin. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Format: `updatePass uName/USER_NAME uPass/USER_PASSWORD`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `updatePass uName/john uPass/098`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003d\u003d\u003d Delete a user : `deleteUser`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Delete a given user by admin. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Format: `deleteUser uName/USER_NAME`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xllx1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* `deleteUser uName/john`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "Forum book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xllx1"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Forum Book folder.`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* *Announce* : `announce aTitle/ANNOUNCEMENT_TITLE aContent/ANNOUNCEMENT_CONTENT` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xllx1"
        },
        "content": "e.g `announce aTitle/Urgent! aContent/System maintenance from 4pm to 5pm.`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* *CheckAnnounce* : `checkAnnounce`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* *Block* : `block uName/USER_NAME` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xllx1"
        },
        "content": "e.g `block uName/john`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* *SetAdmin* : `setAdmin uName/USER_NAME set/SET_OR_REVERT` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "xllx1"
        },
        "content": "e.g `setAdmin uName/john set/true`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* *CreateModule* : `createModule mCode/MODULE_CODE mTitle/MODULE_TITLE` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xllx1"
        },
        "content": "e.g `createModule mCode/CS2113 mTitle/Software Engineering and OOP`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* *DeleteModule* : `deleteModule mCode/MODULE_CODE` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "xllx1"
        },
        "content": "e.g `deleteModule mCode/CS2113`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* *UpdatePass* : `updatePass uName/USER_NAME uPass/USER_PASSWORD` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xllx1"
        },
        "content": "e.g `updatePass uName/john uPass/098`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xllx1"
        },
        "content": "* *DeleteUser* : `deleteUser uName/USER_NAME` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xllx1"
        },
        "content": "e.g `deleteUser uName/john`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* *Help*"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* *Create* : `create m/MODULE_NAME t/THREAD_NAME [c/REPLY_MESSAGE]` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "e.g `create m/CS2113 t/what is this module like? c/I heard that the workload is very heavy`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* *Reply* : `reply m/MODULE_NAME i/THREAD_INDEX c/REPLY_MESSAGE` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "e.g. `reply m/CS2113 i/1 c/It\u0027s Heavy but you get to learn a lot for it.`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* *Find* : `find [m/MOD_CODE] keywords` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "e.g. `find m/CS2113 java`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* *Like* : `like m/MODULE_NAME i/THREAD_INDEX` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "e.g. `like m/CS2113 i/1`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* *Sortdate* : `sortdate m/MODULE_NAME` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "e.g `sortdate m/CS2113`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "* *Sortlike* : `sortlike m/CS2113` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "e.g `sortdate m/CS2113`"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 41,
      "Meowzz95": 12,
      "xllx1": 63,
      "-": 123
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 60
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ReadOnlyForumBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.ForumBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.XmlForumBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ForumBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage forumBookStorage \u003d new XmlForumBookStorage(userPrefs.getForumBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        storage \u003d new StorageManager(forumBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Optional\u003cReadOnlyForumBook\u003e forumBookOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ReadOnlyForumBook initialData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            forumBookOptional \u003d storage.readForumBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            if (!forumBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ForumBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            initialData \u003d forumBookOptional.orElseGet(SampleDataUtil::getSampleForumBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ForumBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            initialData \u003d new ForumBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ForumBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            initialData \u003d new ForumBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ForumBook\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        logger.info(\"Starting ForumBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 41,
      "-": 168
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String appTitle \u003d \"Address App\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 43
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(windowWidth, o.windowWidth)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 126
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_NOT_LOGIN \u003d \"Sorry! You have to login to proceed.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_BLOCKED_USER \u003d \"You have been blocked for creating new thread and comment!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_NOT_THREAD_OWNER \u003d \"Sorry! You are not the owner of this thread.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_NOT_COMMENT_OWNER \u003d \"Sorry! You are not the owner of this comment.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_CODE \u003d \"Invalid Module Code!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_INVALID_THREAD_ID \u003d \"Invalid Thread ID!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMENT_ID \u003d \"Invalid Comment ID!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 9,
      "Meowzz95": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/events/model/AddressBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ReadOnlyForumBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "/** Indicates the ForumBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public final ReadOnlyForumBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public AddressBookChangedEvent(ReadOnlyForumBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"number of persons \" + data.getPersonList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 6,
      "-": 13
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/events/model/ShowAnnouncementEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/** Shows announcement pop up*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class ShowAnnouncementEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public final String announcementTitle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public final String announcementContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public ShowAnnouncementEvent(String aTitle, String aContent) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.announcementTitle \u003d aTitle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.announcementContent \u003d aContent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return \"Showing announcement\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 21
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/events/model/UserLoginEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/** Indicates the user has logged in*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class UserLoginEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public final String userName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public final boolean userType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public UserLoginEvent(String uName, boolean uType) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.userName \u003d uName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.userType \u003d uType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return \"User logged in, user name: \" + userName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 21
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/events/storage/DataSavingExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates an exception during a file saving"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataSavingExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataSavingExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/events/ui/ExitAppRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request for App termination"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitAppRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request to jump to the list of persons"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/events/ui/ModulePanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Represents a selection change in the Module List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class ModulePanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private final Module newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public ModulePanelSelectionChangedEvent(Module newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public Module getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HansKoh": 27
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewResultAvailableEvent(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/events/ui/PersonPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a selection change in the Person List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonPanelSelectionChangedEvent(Person newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 23
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/events/ui/ShowHelpRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ShowHelpRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/exceptions/NotLoggedInException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * not logged in exception"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class NotLoggedInException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public NotLoggedInException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public NotLoggedInException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 10,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/util/Extensions.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.BaseModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " * This class provides utility methods"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class Extensions {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Utility methods to update a object in a list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * @param object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * @param \u003cT\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public static \u003cT extends BaseModel\u003e void updateObjectInList(List\u003cT\u003e list, T object) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            if (list.get(i).getId() \u003d\u003d object.getId()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            list.set(index, object);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 31
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via ,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \"  + filePath + \" not found\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 139
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/util/RestrictiveCommandUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * A Utility class to restrict commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class RestrictiveCommandUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_NOT_LOGIN \u003d \"Sorry! You have to login to proceed.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_BLOCKED_USER \u003d \"You have been blocked for creating new thread and comment!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_NOT_THREAD_OWNER \u003d \"Sorry! You are not the owner of this thread.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_NOT_COMMENT_OWNER \u003d \"Sorry! You are not the owner of this comment.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * check for login status"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static boolean checkLogin() throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!Context.getInstance().isLoggedIn()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 26
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/commons/util/XmlUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Helps with reading from and writing to XML files."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the xml data in the file as an object of the specified type."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classToConvert The class corresponding to the xml data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T getDataFromFile(Path file, Class\u003cT\u003e classToConvert)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(classToConvert);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((T) um.unmarshal(file.toFile()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the data in the file in xml format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *             Cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               into xml and writing to the file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveDataToFile(Path file, T data) throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        m.marshal(data, file.toFile());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 69
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 6,
      "-": 22
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 11,
      "-": 42
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.commitForumBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 11,
      "-": 58
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/AddUserCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0191729"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0191729"
        },
        "content": "public class AddUserCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addUser\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add user to forum book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        + PREFIX_USER_NAME + \"USER NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        + PREFIX_USER_PASSWORD + \"PASSWORD \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        + PREFIX_USER_NAME + \"John Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        + PREFIX_USER_PASSWORD + \"1234 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"WELCOME : %1$s. You had been successfully been registered.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    //public static final String MESSAGE_FAIL \u003d \"No user named %1$s found or password is wrong\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This user name already exists, Please use another name.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    private final User userToAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public AddUserCommand(User newUser) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        requireNonNull(newUser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        this.userToAdd \u003d newUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            boolean exist \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0191729"
        },
        "content": "                if (userToAdd \u003d\u003d unitOfWork.getUserRepository().getUserByUsername(userToAdd.getUsername())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0191729"
        },
        "content": "                    exist \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_DUPLICATE_PERSON));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0191729"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            } catch (EntityDoesNotExistException ex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0191729"
        },
        "content": "                if (!exist) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0191729"
        },
        "content": "                    unitOfWork.getUserRepository().addUser(userToAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0191729"
        },
        "content": "                    unitOfWork.commit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0191729"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0191729"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, userToAdd.getUsername()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0191729"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0191729": 55,
      "Meowzz95": 1,
      "xllx1": 11
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/AdminUpdatePasswordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.exceptions.NotLoggedInException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Updates a certain user\u0027s password."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class AdminUpdatePasswordCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"updatePass\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates a certain user\u0027s password. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_USER_NAME + \"USER NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_USER_PASSWORD + \"USER PASSWORD \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_USER_NAME + \"john \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_USER_PASSWORD + \"456\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Password for %1$s is now %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_INVALID_USER \u003d \"No user named %1$s found. Please try again!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private final String userNameToUpdate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private final String userPassToUpdate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Creates an AdminUpdatePasswordCommand to update password for the the specified {@code toUpdate}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public AdminUpdatePasswordCommand(String uName, String uPass) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(uName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(uPass);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.userNameToUpdate \u003d uName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.userPassToUpdate \u003d uPass;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // if user has not login or is not admin, then throw exception"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            if (!Context.getInstance().isCurrentUserAdmin()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                throw new CommandException(User.MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (NotLoggedInException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(User.MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            User userToUpdate \u003d unitOfWork.getUserRepository().getUserByUsername(userNameToUpdate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            userToUpdate.setPassword(userPassToUpdate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            unitOfWork.getUserRepository().updateUser(userToUpdate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            unitOfWork.commit();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_USER, userNameToUpdate));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, userNameToUpdate, userPassToUpdate));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 75
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/AnnounceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_ANNOUNCE_CONTENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_ANNOUNCE_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.events.model.ShowAnnouncementEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.exceptions.NotLoggedInException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.Announcement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Announce new announcement."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class AnnounceCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"announce\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Post new announcement. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_ANNOUNCE_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_ANNOUNCE_CONTENT + \"CONTENT \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_ANNOUNCE_TITLE + \"Urgent! \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_ANNOUNCE_CONTENT + \"System maintenance from tomorrow 3PM to 5PM.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New announcement posted: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private final Announcement toAnnounce;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Creates an AnnounceCommand to announce the specified {@code toAnnounce}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public AnnounceCommand(Announcement toAnnounce) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(toAnnounce);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.toAnnounce \u003d toAnnounce;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // if user has not login or is not admin, then throw exception"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            if (!Context.getInstance().isCurrentUserAdmin()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                throw new CommandException(User.MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (NotLoggedInException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(User.MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            toAnnounce.setCreatedByUserId(Context.getInstance().getCurrentUser().getId());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            unitOfWork.getAnnouncementRepository().addAnnouncement(toAnnounce);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            unitOfWork.commit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            EventsCenter.getInstance().post(new ShowAnnouncementEvent(toAnnounce.getTitle(), toAnnounce.getContent()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAnnounce));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "xllx1": 68
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/BlockUserFromCreatingCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_BLOCK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.exceptions.NotLoggedInException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Allow admin to block user from posting a new thread."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class BlockUserFromCreatingCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"blockUser\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Blocks a certain user from posting new thread.\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_USER_NAME + \"USER NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_BLOCK + \"BLOCK OR UNBLOCK\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_USER_NAME + \"john\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_BLOCK + \"true\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"User %1$s successfully: %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_INVALID_USER \u003d \"This user: %s does not exist.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BLOCK \u003d \"This user has already been blocked.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_UNBLOCK \u003d \"This user has not been block.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private final String userNameToBlock;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private final boolean block;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Creates an BlockUserFromCreatingCommand to block the specified {@code User}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public BlockUserFromCreatingCommand(String userName, boolean block) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(userName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        userNameToBlock \u003d userName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.block \u003d block;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        User user \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // if user has not login or is not admin, then throw exception"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            if (!Context.getInstance().isCurrentUserAdmin()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                throw new CommandException(User.MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (NotLoggedInException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(User.MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            user \u003d unitOfWork.getUserRepository().getUserByUsername(userNameToBlock);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            if (block \u0026\u0026 user.isBlock()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_BLOCK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            } else if (!block \u0026\u0026 !user.isBlock()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_DUPLICATE_UNBLOCK, userNameToBlock));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                user.setIsBlock(block);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                unitOfWork.getUserRepository().updateUser(user);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                unitOfWork.commit();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_USER, userNameToBlock));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, (block ? \"blocked\" : \"unblocked\"), user));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 85
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/CheckAnnouncmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.events.model.ShowAnnouncementEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.Announcement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Allow user to check if there is any announcement"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class CheckAnnouncmentCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkAnnounce\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing new announcement: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"There is no announcement at the moment\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Announcement announcement \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // if user has not login or is not admin, then throw exception"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!Context.getInstance().isLoggedIn()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(User.MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Announcement latestAnnouncement \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            latestAnnouncement \u003d unitOfWork.getAnnouncementRepository().getLatestAnnouncement();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            latestAnnouncement \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (latestAnnouncement !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            EventsCenter.getInstance().post(new ShowAnnouncementEvent(latestAnnouncement.getTitle(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                latestAnnouncement.getContent()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, latestAnnouncement));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 52
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.resetData(new ForumBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.commitForumBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 6,
      "-": 19
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/CreateCommentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_BLOCKED_USER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_INVALID_THREAD_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_LOGIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_COMMENT_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_THREAD_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.Comment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Create a new comment to the forum book under certain module"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class CreateCommentCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"createComment\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a comment to a thread. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_THREAD_ID + \"THREAD ID \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_COMMENT_CONTENT + \"COMMENT...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_THREAD_ID + \"1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_COMMENT_CONTENT + \"This is a new comment\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New comment added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private final int threadId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private final String contentToAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private Comment comment;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private int moduleId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private int commentId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Creates a CreateCommentCommand to create the specified {@code Comment}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CreateCommentCommand(int threadId, String contentToAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(threadId);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(contentToAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.threadId \u003d threadId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.contentToAdd \u003d contentToAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.comment \u003d new Comment(); //instantiate a new comment"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!Context.getInstance().isLoggedIn()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            if (Context.getInstance().isCurrentUserBlocked()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                throw new CommandException(MESSAGE_BLOCKED_USER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            //get the respective module by moduleCode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            ForumThread forumThread \u003d unitOfWork.getForumThreadRepository().getThread(threadId);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            comment.setThreadId(forumThread.getId()); //set thread ID to the comment"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            comment.setCreatedByUserId(Context.getInstance().getCurrentUser().getId()); //set owner ID to the comment"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            comment.setContent(contentToAdd); //pass content to the comment"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            commentId \u003d comment.getId();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            moduleId \u003d forumThread.getModuleId();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            //add this comment to unitOfWork meaning save it to the memory repository"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            unitOfWork.getCommentRepository().addComment(comment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            unitOfWork.commit(); //commit meaning add the forum thread update to local database"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_THREAD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String message \u003d \"\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"Module ID: \" + moduleId + \"\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"Thread ID: \" + threadId + \"\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"Comment ID: \" + commentId + \"\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"Comment Content: \" + contentToAdd;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, message));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                || (other instanceof CreateCommentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                \u0026\u0026 comment.equals(((CreateCommentCommand) other).comment));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 93
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/CreateModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_MODULE_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.exceptions.NotLoggedInException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Creates a module to the forum book by admin"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class CreateModuleCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"createModule\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a module. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_MODULE_TITLE + \"MODULE TITLE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_MODULE_CODE + \"CS2113 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_MODULE_TITLE + \"Software Engineering and OOP\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s now is added to module\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"%1$s has been added previously\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private final Module moduleToAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Creates an CreateModuleCommand to create the specified {@code module}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public CreateModuleCommand(Module module) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        moduleToAdd \u003d module;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // if user has not login or is not admin, then throw exception"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            if (!Context.getInstance().isCurrentUserAdmin()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                throw new CommandException(User.MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (NotLoggedInException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(User.MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        boolean exist \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            unitOfWork.getModuleRepository().getModuleByCode(moduleToAdd.getModuleCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                moduleToAdd.getModuleCode()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            exist \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!exist) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                moduleToAdd.setCreatedByUserId(Context.getInstance().getCurrentUser().getId());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                unitOfWork.getModuleRepository().addModule(moduleToAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                unitOfWork.commit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, moduleToAdd.getModuleCode()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 83
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/CreateThreadCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_BLOCKED_USER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_INVALID_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_LOGIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_COMMENT_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_THREAD_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.Comment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Create a new thread to the forum book under certain module"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class CreateThreadCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"createThread\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a thread to the forum book. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_THREAD_TITLE + \"THREAD TITILE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_COMMENT_CONTENT + \"COMMENT...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2113 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_THREAD_TITLE + \"EXAM DISCUSSION \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_COMMENT_CONTENT + \"Hi fellows, what is the topic coverage for the final?\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New thread added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private ForumThread forumThread;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private Comment comment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Creates a CreateThreadCommand to create the specified {@code ForumThread}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CreateThreadCommand(String moduleCode, ForumThread forumThread, Comment comment) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(forumThread);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(comment);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.forumThread \u003d forumThread;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!Context.getInstance().isLoggedIn()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            if (Context.getInstance().isCurrentUserBlocked()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                throw new CommandException(MESSAGE_BLOCKED_USER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            //get the respective module by moduleCode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            Module module \u003d unitOfWork.getModuleRepository().getModuleByCode(moduleCode);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            forumThread.setModuleId(module.getId()); //pass the module ID to this forum thread"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            forumThread.setCreatedByUserId(Context.getInstance().getCurrentUser().getId());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            comment.setThreadId(forumThread.getId()); //pass the thread ID to this comment"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            comment.setCreatedByUserId(Context.getInstance().getCurrentUser().getId());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            //add this forum thread to unitOfWork meaning save it to the memory repository"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            unitOfWork.getForumThreadRepository().addThread(forumThread);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            //add this comment to unitOfWork meaning save it to the memory repository"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            unitOfWork.getCommentRepository().addComment(comment);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            unitOfWork.commit(); //commit meaning add the forum thread update to local database"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODULE_CODE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String message \u003d \"\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"Module: \" + moduleCode + \"\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"Thread Title: \" + forumThread.getTitle() + \"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"Comment: \" + comment.getContent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, message));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                || (other instanceof CreateThreadCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                \u0026\u0026 forumThread.equals(((CreateThreadCommand) other).forumThread));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 91,
      "xllx1": 6
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.commitForumBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 8,
      "-": 47
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/DeleteCommentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_INVALID_COMMENT_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_COMMENT_OWNER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_LOGIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_COMMENT_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.Comment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Delete a certain comment. Only admin could delete comments from others,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * user could only delete comment created by his/her own."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class DeleteCommentCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteComment\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete a certain comment \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_COMMENT_ID + \"COMMENT ID \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_COMMENT_ID + \"1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Comment deleted: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static String commentContentToDelete;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private final int commentId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Creates an DeleteCommentCommand to delete the specified {@code Comment}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public DeleteCommentCommand(int commentId) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(commentId);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.commentId \u003d commentId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!Context.getInstance().isLoggedIn()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        commentContentToDelete \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            Comment comment \u003d unitOfWork.getCommentRepository().getComment(commentId);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            commentContentToDelete \u003d comment.getContent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            if (Context.getInstance().getCurrentUser().getId() !\u003d comment.getCreatedByUserId()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                throw new CommandException(MESSAGE_NOT_COMMENT_OWNER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            //delete the comment according to the commentId from the memory repository"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            unitOfWork.getCommentRepository().deleteComment(commentId);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            //update to local database"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            unitOfWork.commit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_COMMENT_ID);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String message \u003d \"\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"Comment ID: \" + commentId + \"\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"Comment Content: \" + commentContentToDelete + \"\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, message));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 72
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/DeleteModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.exceptions.NotLoggedInException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Deletes a module to the forum book by admin"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteModule\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a module. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_MODULE_CODE + \"CS2113\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s is now deleted.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE \u003d \"There is no module matching %1$s.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private final String moduleCodeToDelete;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Creates an DeleteModuleCommand to create the specified {@code module}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public DeleteModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        moduleCodeToDelete \u003d moduleCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // if user has not login or is not admin, then throw exception"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            if (!Context.getInstance().isCurrentUserAdmin()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                throw new CommandException(User.MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (NotLoggedInException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(User.MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            Module moduleToDelete \u003d unitOfWork.getModuleRepository().getModuleByCode(moduleCodeToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            unitOfWork.getModuleRepository().removeModule(moduleToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            unitOfWork.commit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_MODULE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                moduleCodeToDelete));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, moduleCodeToDelete));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 69
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/DeleteThreadCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_INVALID_THREAD_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_LOGIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_THREAD_OWNER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_THREAD_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Delete a certain thread. Only admin could delete threads from others,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * user could only delete threads created by his/her own."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class DeleteThreadCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteThread\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete a certain thread \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        + PREFIX_THREAD_ID + \"THREAD ID \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        + PREFIX_THREAD_ID + \"1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Thread deleted: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private final int threadId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Creates an DeleteThreadCommand to delete the specified {@code ForumThread}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public DeleteThreadCommand(int threadId) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(threadId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.threadId \u003d threadId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!Context.getInstance().isLoggedIn()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            if (Context.getInstance().getCurrentUser().getId()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                    !\u003d unitOfWork.getForumThreadRepository().getThread(threadId).getCreatedByUserId()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                throw new CommandException(MESSAGE_NOT_THREAD_OWNER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            //delete the thread according to the threadId from the memory repository"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            unitOfWork.getForumThreadRepository().deleteThread(threadId);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            //update to local database"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            unitOfWork.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_THREAD_ID);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String message \u003d \"\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"Thread ID: \" + threadId + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, message));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 60,
      "xllx1": 9
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/DeleteUserCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.events.model.UserLoginEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.exceptions.NotLoggedInException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Deletes a specific user by admin"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class DeleteUserCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteUser\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a certain user. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_USER_NAME + \"USER NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_USER_NAME + \"john \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s successfully deleted.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_INVALID_USER \u003d \"No user named %1$s found. Please try again!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private final String userNameToDelete;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Creates an DeleteUserCommand to delete the specified {@code userName}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public DeleteUserCommand(String uName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(uName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.userNameToDelete \u003d uName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // if user has not login or is not admin, then throw exception"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            if (!Context.getInstance().isCurrentUserAdmin()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                throw new CommandException(User.MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (NotLoggedInException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(User.MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            User userToDelete \u003d unitOfWork.getUserRepository().getUserByUsername(userNameToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            unitOfWork.getUserRepository().deleteUser(userToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            unitOfWork.commit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_USER, userNameToDelete));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String currentUserName \u003d Context.getInstance().getCurrentUser().getUsername();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (userNameToDelete.equals(currentUserName)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            EventsCenter.getInstance().post(new UserLoginEvent(\"\", false));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, userNameToDelete));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 71
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.commitForumBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 20,
      "-": 207
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 5,
      "-": 18
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 5,
      "-": 38
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/ListModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_LOGIN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * List out all the modules in the forum book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class ListModuleCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listModule\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all the modules in the forum book.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all modules: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"\\n****************************************************************************\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"%s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static String message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!Context.getInstance().isLoggedIn()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            List\u003cModule\u003e moduleList \u003d unitOfWork.getModuleRepository().getAllModule();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            message \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            for (Module module : moduleList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                message +\u003d module.getModuleCode() + \": \" + module.getTitle() + \"\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                message +\u003d \"----------------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, message));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 43,
      "Meowzz95": 1,
      "xllx1": 4
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0191729"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.events.model.UserLoginEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0191729"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": login to forum book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            + PREFIX_USER_NAME + \"USER NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            + PREFIX_USER_PASSWORD + \"PASSWORD \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            + PREFIX_USER_NAME + \"John Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            + PREFIX_USER_PASSWORD + \"1234 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"WELCOME : %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"No user named %s found or password is wrong\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    private final String userName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    private final String userPassword;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public LoginCommand(String userName, String userPassword) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        requireNonNull(userName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        requireNonNull(userPassword);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        this.userPassword \u003d userPassword;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        User exist \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            exist \u003d unitOfWork.getUserRepository().authenticate(userName, userPassword);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            exist \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Context.getInstance().setCurrentUser(exist);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (exist !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            EventsCenter.getInstance().post(new UserLoginEvent(userName, exist.isAdmin()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, userName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            EventsCenter.getInstance().post(new UserLoginEvent(\"\", false));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAIL, userName));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0191729"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0191729": 34,
      "xllx1": 30
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/LogoutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0191729"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.events.model.UserLoginEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0191729"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0191729"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0191729"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0191729"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logout\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": logout from the forum book. \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Good bye : %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"No user logged in to Logout\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    private Boolean canLogout;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public LogoutCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        if (Context.getInstance().getCurrentUser() !\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            this.userName \u003d Context.getInstance().getCurrentUser().getUsername();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            Context.getInstance().setCurrentUser(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            canLogout \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            canLogout \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        if (canLogout) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            EventsCenter.getInstance().post(new UserLoginEvent(\"\", false));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, userName));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_FAIL, userName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0191729"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0191729": 40,
      "Meowzz95": 1,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (!model.canRedoForumBook()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.redoForumBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 7,
      "-": 23
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 9,
      "-": 48
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/SelectModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_INVALID_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_LOGIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.ui.DisplayFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * List out all the threads under certain module in the forum book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class SelectModuleCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"selectModule\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \": List all the threads under certain module in the forum book.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2113\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static String message;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static String moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public SelectModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String messageSuccess \u003d \"Listed all threads under Module Code: \" + moduleCode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"\\n****************************************************************************\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"%s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!Context.getInstance().isLoggedIn()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            Module module \u003d unitOfWork.getModuleRepository().getModuleByCode(moduleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            List\u003cForumThread\u003e threadList \u003d unitOfWork.getForumThreadRepository().getThreadsByModule(module);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            message \u003d DisplayFormatter.diplayThreadList(threadList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODULE_CODE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new CommandResult(String.format(messageSuccess, message));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 55,
      "Meowzz95": 1,
      "xllx1": 5
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/SelectThreadCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_INVALID_THREAD_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_LOGIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_THREAD_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.Comment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.ui.DisplayFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * List out all the comments under certain thread in the forum book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class SelectThreadCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"selectThread\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \": List out all the comments under certain thread in the forum book.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_THREAD_ID + \"1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static String message;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static int threadId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static String threadTitle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public SelectThreadCommand(int threadId) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(threadId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.threadId \u003d threadId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String messageSuccess \u003d \"Listed all comments under Thread ID(%s) with title: %s\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"\\n****************************************************************************\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                + \"%s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!Context.getInstance().isLoggedIn()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            List\u003cComment\u003e commentList \u003d unitOfWork.getCommentRepository().getCommentsByThread(threadId);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            message \u003d DisplayFormatter.displayCommentList(commentList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            threadTitle \u003d unitOfWork.getForumThreadRepository().getThread(threadId).getTitle();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_THREAD_ID);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new CommandResult(String.format(messageSuccess, threadId, threadTitle, message));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 55,
      "Meowzz95": 1,
      "xllx1": 5
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/SetAdminCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_ADMIN_SET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.exceptions.NotLoggedInException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Set a certain user as admin or set the admin as user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class SetAdminCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setAdmin\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Set/Revert (true/false) a user as admin. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_USER_NAME + \"USER NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_ADMIN_SET + \"SET/REVERT \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_USER_NAME + \"john \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        + PREFIX_ADMIN_SET + \"true  \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s now is %2$s.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_INVALID_USER \u003d \"This user does not exist.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SET \u003d \"This user is already an admin.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REVERT \u003d \"%1$s is not an admin, unable to revert.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private final String userNametoSetAdmin;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private final boolean setAdmin;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Creates an SetAdminCommand to set the specified {@code userName}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public SetAdminCommand(String userName, boolean set) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(userName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        userNametoSetAdmin \u003d userName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        setAdmin \u003d set;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String isAdmin \u003d \"an admin\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        User userToSet \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // if user has not login or is not admin, then throw exception"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            if (!Context.getInstance().isCurrentUserAdmin()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                throw new CommandException(User.MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (NotLoggedInException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(User.MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            userToSet \u003d unitOfWork.getUserRepository().getUserByUsername(userNametoSetAdmin);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            if (setAdmin \u0026\u0026 userToSet.isAdmin()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_SET);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            } else if (!setAdmin \u0026\u0026 !userToSet.isAdmin()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_DUPLICATE_REVERT, userToSet.getUsername()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                userToSet.setAdmin(!userToSet.isAdmin());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                unitOfWork.getUserRepository().updateUser(userToSet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                unitOfWork.commit();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            if (!setAdmin) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                isAdmin \u003d \"a user\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_USER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, userNametoSetAdmin, isAdmin));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xllx1": 89
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (!model.canUndoForumBook()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.undoForumBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 7,
      "-": 23
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/UpdateCommentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_INVALID_COMMENT_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_COMMENT_OWNER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_LOGIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_COMMENT_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_COMMENT_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.Comment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Update a existing comment content in the forum book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * User could only update comment content created by his/her own."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class UpdateCommentCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"updateComment\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \": Update a existing comment title created by its user in the forum book.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_COMMENT_ID + \"123 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_COMMENT_CONTENT + \"This is a new title\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static int commentId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static String contentToUpdate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public UpdateCommentCommand(int commentId, String contentToUpdate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(commentId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(contentToUpdate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.commentId \u003d commentId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.contentToUpdate \u003d contentToUpdate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!Context.getInstance().isLoggedIn()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String messageSuccess \u003d \"Updated comment \" + commentId + \" to a new title: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            Comment comment \u003d unitOfWork.getCommentRepository().getComment(commentId);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            if (Context.getInstance().getCurrentUser().getId() !\u003d comment.getCreatedByUserId()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                throw new CommandException(MESSAGE_NOT_COMMENT_OWNER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            comment.setContent(contentToUpdate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            unitOfWork.commit();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_COMMENT_ID);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new CommandResult(String.format(messageSuccess, contentToUpdate));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 66
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/UpdateThreadCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_INVALID_THREAD_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_LOGIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_NOT_THREAD_OWNER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_THREAD_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_THREAD_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Update a existing thread title in the forum book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * User could only update thread title created by his/her own."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class UpdateThreadCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"updateThread\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \": Update a existing thread title created by its user in the forum book.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_THREAD_ID + \"123 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            + PREFIX_THREAD_TITLE + \"This is a new title\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static int threadId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static String threadTitleToUpdate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public UpdateThreadCommand(int threadId, String threadTitleToUpdate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(threadId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(threadTitleToUpdate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.threadId \u003d threadId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        this.threadTitleToUpdate \u003d threadTitleToUpdate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!Context.getInstance().isLoggedIn()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String messageSuccess \u003d \"Updated thread \" + threadId + \" to a new title: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            ForumThread forumThread \u003d unitOfWork.getForumThreadRepository().getThread(threadId);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            if (Context.getInstance().getCurrentUser().getId() !\u003d forumThread.getCreatedByUserId()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                throw new CommandException(MESSAGE_NOT_THREAD_OWNER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            forumThread.setTitle(threadTitleToUpdate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            unitOfWork.getForumThreadRepository().updateThread(forumThread);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            unitOfWork.commit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_THREAD_ID);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new CommandResult(String.format(messageSuccess, threadTitleToUpdate));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 67
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/UpdateUserCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0191729"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0191729"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0191729"
        },
        "content": " * Deletes a specific user by admin"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0191729"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0191729"
        },
        "content": "public class UpdateUserCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"updateUser\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Update a certain user\u0027s password, email and/or phone. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        + PREFIX_USER_NAME + \"USER NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        + PREFIX_USER_NAME + \"john \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s successfully updated.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_INVALID_USER \u003d \"No user named %1$s found. Please verify and try again!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    private final String userNameToUpdate \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    private final Person userToUpdate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0191729"
        },
        "content": "     * Creates an DeleteUserCommand to delete the specified {@code userName}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0191729"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public UpdateUserCommand(Person personToUpdate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        requireNonNull(personToUpdate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        this.userToUpdate \u003d personToUpdate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        // if user has not login or is not admin, then throw exception"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // if user has not login or is not admin, then throw exception"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!Context.getInstance().isLoggedIn()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            throw new CommandException(User.MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            User userToUpdate \u003d unitOfWork.getUserRepository().getUserByUsername(userNameToUpdate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_USER, userNameToUpdate));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //model.updatePerson(userNameToUpdate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, userNameToUpdate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0191729"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0191729": 47,
      "xllx1": 12
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 4,
      "Meowzz95": 12,
      "-": 44
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/AddUserCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0191729"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.logic.commands.AddUserCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0191729"
        },
        "content": "public class AddUserCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0191729"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0191729"
        },
        "content": "     * and returns an LoginCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0191729"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0191729"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0191729"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public AddUserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0191729"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_USER_NAME, PREFIX_USER_PASSWORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USER_NAME, PREFIX_USER_PASSWORD)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0191729"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                AddUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        String userName \u003d ParserUtil.parseUserName(argMultimap.getValue(PREFIX_USER_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        String userPassword \u003d ParserUtil.parseUserPassword(argMultimap.getValue(PREFIX_USER_PASSWORD).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        boolean admin \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (userName.equals(\"admin\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            admin \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        User user \u003d new User (userName, userPassword, admin, false, \" \", \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        return new AddUserCommand(user);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0191729"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0191729": 30,
      "xllx1": 15
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.AddUserCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.AdminUpdatePasswordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.AnnounceCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.BlockUserFromCreatingCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.CheckAnnouncmentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.CreateCommentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.CreateModuleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.CreateThreadCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.DeleteCommentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.DeleteThreadCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.DeleteUserCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.ListModuleCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import com.t13g2.forum.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.SelectModuleCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.SelectThreadCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.SetAdminCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.UpdateCommentCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.UpdateThreadCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //     return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //     return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //     return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //     return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //     return new ClearCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //     return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //     return new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //     return new UndoCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        // case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //     return new RedoCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        case AnnounceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            return new AnnounceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        case CheckAnnouncmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            return new CheckAnnouncmentCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        case BlockUserFromCreatingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            return new BlockUserFromPostingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        case SetAdminCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            return new SetAdminCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        case AdminUpdatePasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            return new AdminUpdatePasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        case CreateModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            return new CreateModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            return new DeleteModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        case DeleteUserCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            return new DeleteUserCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        //@@author HansKoh"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        case CreateThreadCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return new CreateThreadCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        case CreateCommentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return new CreateCommentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        case UpdateThreadCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return new UpdateThreadCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        case UpdateCommentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return new UpdateCommentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        case DeleteThreadCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return new DeleteThreadCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        case DeleteCommentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return new DeleteCommentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        case ListModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return new ListModuleCommand();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        case SelectModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return new SelectModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        case SelectThreadCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return new SelectThreadCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        case AddUserCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return new AddUserCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            return new LogoutCommand();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 47,
      "Meowzz95": 4,
      "E0191729": 1,
      "xllx1": 68,
      "-": 44
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/AdminUpdatePasswordCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.AdminUpdatePasswordCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Parses input arguments and creates a new AdminUpdatePasswordCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class AdminUpdatePasswordCommandParser implements Parser\u003cAdminUpdatePasswordCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AdminUpdatePasswordCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * and returns an AdminUpdatePasswordCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public AdminUpdatePasswordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_USER_NAME, PREFIX_USER_PASSWORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USER_NAME, PREFIX_USER_PASSWORD)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                AdminUpdatePasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String userName \u003d ParserUtil.parseUserName(argMultimap.getValue(PREFIX_USER_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String userPassword \u003d ParserUtil.parseUserPassword(argMultimap.getValue(PREFIX_USER_PASSWORD).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new AdminUpdatePasswordCommand(userName, userPassword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 45
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/AnnounceCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_ANNOUNCE_CONTENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_ANNOUNCE_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.AnnounceCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.Announcement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Parses input arguments and creates a new AnnounceCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class AnnounceCommandParser implements Parser\u003cAnnounceCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AnnounceCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * and returns an AnnounceCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public AnnounceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_ANNOUNCE_TITLE, PREFIX_ANNOUNCE_CONTENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ANNOUNCE_TITLE, PREFIX_ANNOUNCE_CONTENT)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                AnnounceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Announcement announcement \u003d ParserUtil.parseAnnouncement(argMultimap.getValue(PREFIX_ANNOUNCE_TITLE).get(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            argMultimap.getValue(PREFIX_ANNOUNCE_CONTENT).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new AnnounceCommand(announcement);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 48
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/BlockUserFromPostingCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_BLOCK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.BlockUserFromCreatingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Parses input arguments and block a certain user from posting."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class BlockUserFromPostingCommandParser implements Parser\u003cBlockUserFromCreatingCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BlockUserFromCreatingCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * and returns an BlockUserFromCreatingCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public BlockUserFromCreatingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_USER_NAME, PREFIX_BLOCK);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USER_NAME, PREFIX_BLOCK)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                BlockUserFromCreatingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String userName \u003d ParserUtil.parseUserName(argMultimap.getValue(PREFIX_USER_NAME).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        boolean block;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BLOCK).get().equals(\"true\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            block \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_BLOCK).get().equals(\"false\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            block \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                BlockUserFromCreatingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new BlockUserFromCreatingCommand(userName, block);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 53
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_COMMENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_THREAD \u003d new Prefix(\"th/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /* Prefix for Announcement */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_ANNOUNCE_TITLE \u003d new Prefix(\"aTitle/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_ANNOUNCE_CONTENT \u003d new Prefix(\"aContent/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /* Prefix for Thread */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_THREAD_ID \u003d new Prefix(\"tId/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_THREAD_TITLE \u003d new Prefix(\"tTitle/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /* Prefix for User */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_USER_ID \u003d new Prefix(\"uID/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_USER_NAME \u003d new Prefix(\"uName/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_USER_PASSWORD \u003d new Prefix(\"uPass/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_USER_EMAIL \u003d new Prefix(\"uEmail/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_USER_PHONE \u003d new Prefix(\"uPhone/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_USER_IS_ADMIN \u003d new Prefix(\"uAdmin/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /* Prefix for Module */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_MODULE_TITLE \u003d new Prefix(\"mTitle/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"mCode/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /* Prefix for Comment */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_COMMENT_CONTENT \u003d new Prefix(\"cContent/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final Prefix PREFIX_COMMENT_ID \u003d new Prefix(\"cId/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /* Prefix for setAdmin */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_ADMIN_SET \u003d new Prefix(\"set/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /* Prefix for blockUser */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final Prefix PREFIX_BLOCK \u003d new Prefix(\"block/\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 1,
      "Meowzz95": 1,
      "xllx1": 27,
      "-": 13
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/CreateCommentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_COMMENT_CONTENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_THREAD_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.CreateCommentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Parses input arguments and creates a new CreateCommentCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class CreateCommentCommandParser implements Parser\u003cCreateCommentCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateCommentCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * and returns an CreateCommentCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CreateCommentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_THREAD_ID, PREFIX_COMMENT_CONTENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_THREAD_ID, PREFIX_COMMENT_CONTENT)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                    CreateCommentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        int threadId \u003d Integer.parseInt(ParserUtil.parseThreadId(argMultimap.getValue(PREFIX_THREAD_ID).get()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String commentToAdd \u003d ParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENT_CONTENT).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new CreateCommentCommand(threadId, commentToAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 47
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/CreateModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_MODULE_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.CreateModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Parses input arguments and create a module to forum book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class CreateModuleCommandParser implements Parser\u003cCreateModuleCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateModuleCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * and returns an CreateModuleCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public CreateModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE_TITLE, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                CreateModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Module module \u003d ParserUtil.parseModule(argMultimap.getValue(PREFIX_MODULE_TITLE).get(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new CreateModuleCommand(module);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 46
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/CreateThreadCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_COMMENT_CONTENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_THREAD_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.CreateThreadCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.Comment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Parses input arguments and creates a new CreateThreadCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class CreateThreadCommandParser implements Parser\u003cCreateThreadCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateThreadCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * and returns an CreateThreadCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public CreateThreadCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_THREAD_TITLE, PREFIX_COMMENT_CONTENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_COMMENT_CONTENT, PREFIX_THREAD_TITLE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                CreateThreadCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String moduleCode \u003d ParserUtil.parseModule(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String threadTitle \u003d ParserUtil.parseThread(argMultimap.getValue(PREFIX_THREAD_TITLE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String commentContent \u003d ParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENT_CONTENT).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        ForumThread forumThread \u003d new ForumThread(); //instantiate a new forum thread"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        forumThread.setTitle(threadTitle); //pass the thread title to this new forum thread"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        Comment comment \u003d new Comment(); //instantiate a new comment"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        comment.setContent(commentContent); //pass the comment content to this new comment"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new CreateThreadCommand(moduleCode, forumThread, comment);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 51,
      "xllx1": 6
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 6,
      "-": 22
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/DeleteCommentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_COMMENT_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.DeleteCommentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Parses input arguments and creates a new DeleteCommentCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class DeleteCommentCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * and returns an DeleteCommentCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public DeleteCommentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COMMENT_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_COMMENT_ID)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                    DeleteCommentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        int commentId \u003d Integer.parseInt(ParserUtil.parseCommentId(argMultimap.getValue(PREFIX_COMMENT_ID).get()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new DeleteCommentCommand(commentId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 43
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/DeleteModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Parses input arguments and deletes a module from forum book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class DeleteModuleCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * and returns an DeleteModuleCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new DeleteModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 43
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/DeleteThreadCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_THREAD_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.DeleteThreadCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Parses input arguments and creates a new DeleteThreadCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class DeleteThreadCommandParser implements Parser\u003cDeleteThreadCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public DeleteThreadCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_THREAD_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_THREAD_ID)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                 DeleteThreadCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        int threadId \u003d Integer.parseInt(ParserUtil.parseThreadId(argMultimap.getValue(PREFIX_THREAD_ID).get()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new DeleteThreadCommand(threadId);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 39,
      "xllx1": 5
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/DeleteUserCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.DeleteUserCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Parses input arguments and deletes a user from forum book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class DeleteUserCommandParser implements Parser\u003cDeleteUserCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteUserCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * and returns an DeleteUserCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public DeleteUserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_USER_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USER_NAME)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                DeleteUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String userName \u003d argMultimap.getValue(PREFIX_USER_NAME).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new DeleteUserCommand(userName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 44
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_PHONE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                        CliSyntax.PREFIX_EMAIL, CliSyntax.PREFIX_ADDRESS, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                    Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                    EditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(CliSyntax.PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            editPersonDescriptor.setAddress("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                    ParserUtil.parseAddress(argMultimap.getValue(CliSyntax.PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(CliSyntax.PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 24,
      "-": 58
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 7,
      "-": 26
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0191729"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0191729"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0191729"
        },
        "content": "public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0191729"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0191729"
        },
        "content": "     * and returns an LoginCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0191729"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0191729"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0191729"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public LoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0191729"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_USER_NAME, PREFIX_USER_PASSWORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USER_NAME, PREFIX_USER_PASSWORD)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0191729"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        String userName \u003d argMultimap.getValue(PREFIX_USER_NAME).get().trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        String userPassword \u003d argMultimap.getValue(PREFIX_USER_PASSWORD).get().trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        return new LoginCommand(userName, userPassword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0191729"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0191729": 31,
      "xllx1": 10
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.Announcement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.Comment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static String parseUserName(String userName) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String trimmedUserName \u003d userName.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!User.isValidUserName(trimmedUserName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(User.MESSAGE_USER_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return trimmedUserName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @param userPassword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static String parseUserPassword(String userPassword) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        String trimmedUserPassword \u003d userPassword.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        if (!User.isValidUserName(trimmedUserPassword)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0191729"
        },
        "content": "            throw new ParseException(User.MESSAGE_USER_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        return trimmedUserPassword;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    //@@author xllx1"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Parses {@code title, content} into a {@code Announcement}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static Announcement parseAnnouncement(String title, String content) throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!Announcement.isValidAnnouncement(trimmedTitle, trimmedContent)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(Announcement.MESSAGE_ANNOUNCEMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new Announcement(trimmedTitle, trimmedContent);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Parse {@code }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static Module parseModule(String moduleTitle, String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(moduleTitle);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String trimmedModuleTitle \u003d moduleTitle.trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!isValidModule(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(Module.MESSAGE_MODULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new Module(trimmedModuleTitle, trimmedModuleCode);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    //@@author HansKoh"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * moduleCode"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static String parseModule(String module) throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String trimmedModule \u003d module.trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!isValidModule(trimmedModule)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(Module.MESSAGE_MODULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return trimmedModule;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    //Returns true if a given string is a valid module."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static boolean isValidModule(String trimmedModule) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return trimmedModule.matches(Module.MODULE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * threadTitle"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static String parseThread(String threadTitle) throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(threadTitle);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String trimmedThreadTitle \u003d threadTitle.trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!isValidThreadTitle(trimmedThreadTitle)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(ForumThread.MESSAGE_THREAD_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return trimmedThreadTitle;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    //Returns true if a given string is a valid thread title."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static boolean isValidThreadTitle(String trimmedThreadTitle) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return trimmedThreadTitle.matches(ForumThread.THREAD_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * threadId"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static String parseThreadId(String threadId) throws ParseException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(threadId);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String trimmedThreadId \u003d threadId.trim();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!isValidThreadId(trimmedThreadId)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(ForumThread.MESSAGE_THREAD_ID_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return trimmedThreadId;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    //Returns true if a given string is a valid thread id."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static boolean isValidThreadId(String trimmedThreadId) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return trimmedThreadId.matches(ForumThread.THREAD_ID_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * commentId"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static String parseCommentId(String commentId) throws ParseException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(commentId);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String trimmedCommentId \u003d commentId.trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!isValidCommentId(trimmedCommentId)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(Comment.MESSAGE_COMMENT_ID_CONSTRAINTS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return trimmedCommentId;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    //Returns true if a given string is a valid comment id."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static boolean isValidCommentId(String trimmedCommentId) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return trimmedCommentId.matches(Comment.COMMENT_ID_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * comment content"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static String parseComment(String comment) throws ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        requireNonNull(comment);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String trimmedComment \u003d comment.trim();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        // if (!isValidComment(trimmedComment)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        //    throw new ParseException(Comment.MESSAGE_COMMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return trimmedComment;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    //Returns true if a given string is a valid comment content."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static boolean isValidComment(String trimmedComment) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return trimmedComment.matches(Comment.COMMENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 85,
      "Meowzz95": 10,
      "E0191729": 7,
      "xllx1": 50,
      "-": 114
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 6,
      "-": 21
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/SelectModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.SelectModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Parses input arguments and creates a new SelectModuleCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class SelectModuleCommandParser implements Parser\u003cSelectModuleCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectModuleCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * and returns an SelectModuleCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public SelectModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                SelectModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String moduleCode \u003d ParserUtil.parseModule(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new SelectModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 35,
      "xllx1": 6
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/SelectThreadCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_THREAD_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.SelectThreadCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Parses input arguments and creates a new SelectThreadCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class SelectThreadCommandParser implements Parser\u003cSelectThreadCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectThreadCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * and returns an SelectThreadCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public SelectThreadCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_THREAD_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_THREAD_ID)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                SelectThreadCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        int threadId \u003d Integer.parseInt(ParserUtil.parseThreadId(argMultimap.getValue(PREFIX_THREAD_ID).get()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new SelectThreadCommand(threadId);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 35,
      "xllx1": 6
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/SetAdminCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_ADMIN_SET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_USER_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.SetAdminCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "//@@author xllx1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Parses input arguments and setor revert a certain user as admin."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class SetAdminCommandParser implements Parser\u003cSetAdminCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetAdminCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * and returns an SetAdminCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public SetAdminCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_USER_NAME, PREFIX_ADMIN_SET);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USER_NAME, PREFIX_ADMIN_SET)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                SetAdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String userName \u003d argMultimap.getValue(PREFIX_USER_NAME).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        boolean setAdmin;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADMIN_SET).get().equals(\"true\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            setAdmin \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_ADMIN_SET).get().equals(\"false\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            setAdmin \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                SetAdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new SetAdminCommand(userName, setAdmin);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 54
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/UpdateCommentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_COMMENT_CONTENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_COMMENT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.UpdateCommentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Parses input arguments and creates a new UpdateCommentCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class UpdateCommentCommandParser implements Parser\u003cUpdateCommentCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommentCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * and returns an UpdateCommentCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public UpdateCommentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COMMENT_ID, PREFIX_COMMENT_CONTENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_COMMENT_ID)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                    UpdateCommentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        int commentId \u003d Integer.parseInt(ParserUtil.parseCommentId(argMultimap.getValue(PREFIX_COMMENT_ID).get()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String commenContentToUpdate \u003d ParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENT_CONTENT).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new UpdateCommentCommand(commentId, commenContentToUpdate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 43
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/UpdateThreadCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_THREAD_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_THREAD_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.commands.UpdateThreadCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * Parses input arguments and creates a new UpdateThreadCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class UpdateThreadCommandParser implements Parser\u003cUpdateThreadCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateThreadCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * and returns an UpdateThreadCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public UpdateThreadCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_THREAD_ID, PREFIX_THREAD_TITLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_THREAD_ID)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                    UpdateThreadCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        int threadId \u003d Integer.parseInt(ParserUtil.parseThreadId(argMultimap.getValue(PREFIX_THREAD_ID).get()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        String threadTitle \u003d ParserUtil.parseThread(argMultimap.getValue(PREFIX_THREAD_TITLE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return new UpdateThreadCommand(threadId, threadTitle);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 43
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/AnnouncementRepository.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.sun.istack.NotNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Announcement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.IForumBookStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class AnnouncementRepository extends BaseRepository implements IAnnouncementRepository {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public AnnouncementRepository(IForumBookStorage forumBookStorage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        super(forumBookStorage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public int addAnnouncement(@NotNull Announcement announcement) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(announcement, \"announcement can\u0027t be null\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getAnnouncements().getList().add(announcement);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getAnnouncements().setDirty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return announcement.getId();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void deleteAnnouncement(@NotNull Announcement announcement) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(announcement, \"announcement can\u0027t be null\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.deleteAnnouncement(announcement.getId());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void deleteAnnouncement(int announcementId) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getAnnouncements().getList().removeIf(announcement -\u003e announcement.getId() \u003d\u003d announcementId);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getAnnouncements().setDirty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Announcement getAnnouncement(int announcementId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return this.getById(forumBookStorage.getAnnouncements().getList(), announcementId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Announcement getLatestAnnouncement() throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Optional\u003cAnnouncement\u003e announcement \u003d forumBookStorage.getAnnouncements().getList().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .min((o1, o2) -\u003e o2.getCreated().compareTo(o1.getCreated()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (!announcement.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            throw new EntityDoesNotExistException(\"No Announcement found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return announcement.get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 50,
      "xllx1": 4
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/BaseRepository.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.BaseModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.IForumBookStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public abstract class BaseRepository {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    protected IForumBookStorage forumBookStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public BaseRepository(IForumBookStorage forumBookStorage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.forumBookStorage \u003d forumBookStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    protected \u003cT extends BaseModel\u003e T getById(List\u003cT\u003e list, int id) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Optional\u003cT\u003e result \u003d list.stream().filter(item -\u003e item.getId() \u003d\u003d id).findFirst();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (!result.isPresent()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            throw new EntityDoesNotExistException(\"Entity does not exist\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return result.get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    protected \u003cT extends BaseModel\u003e void removeById(List\u003cT\u003e list, int id) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        list.removeIf(item -\u003e item.getId() \u003d\u003d id);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 29,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/CommentRepository.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.sun.istack.NotNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Comment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.IForumBookStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class CommentRepository extends BaseRepository implements ICommentRepository {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public CommentRepository(IForumBookStorage forumBookStorage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        super(forumBookStorage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public int addComment(@NotNull Comment comment) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(comment, \"comment can\u0027t be null\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getComments().getList().add(comment);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getComments().setDirty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return comment.getId();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void deleteComment(@NotNull Comment comment) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(comment, \"comment can\u0027t be null\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.deleteComment(comment.getId());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void deleteComment(int commentId) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getComments().getList().removeIf(comment -\u003e comment.getId() \u003d\u003d commentId);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getComments().setDirty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Comment getComment(int commentId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return this.getById(forumBookStorage.getComments().getList(), commentId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public List\u003cComment\u003e getCommentsByThread(int threadId) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return forumBookStorage.getComments().getList().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            .filter(aComment -\u003e aComment.getThreadId() \u003d\u003d threadId).collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public List\u003cComment\u003e getCommentsByThread(@NotNull ForumThread forumThread) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(forumThread, \"forumThread can\u0027t be null\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return this.getCommentsByThread(forumThread.getId());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 55,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/Context.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.NotLoggedInException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class Context {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private static Context instance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private User currentUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private Context() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public static Context getInstance() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            instance \u003d new Context();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public User getCurrentUser() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return currentUser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setCurrentUser(User currentUser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.currentUser \u003d currentUser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public int getCurrentUserId() throws NotLoggedInException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ensureLoggedIn();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return currentUser.getId();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public boolean isLoggedIn() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return currentUser !\u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * check if current user a admin."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public boolean isCurrentUserAdmin() throws NotLoggedInException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ensureLoggedIn();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return currentUser.isAdmin();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * check if current user is blocked."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public boolean isCurrentUserBlocked() throws NotLoggedInException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ensureLoggedIn();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return currentUser.isBlock();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * ensure that a user is logged in."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private void ensureLoggedIn() throws NotLoggedInException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (!isLoggedIn()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            throw new NotLoggedInException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 54,
      "xllx1": 14
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/ForumBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class ForumBook implements ReadOnlyForumBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ForumBook() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Creates an ForumBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ForumBook(ReadOnlyForumBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Resets the existing data of this {@code ForumBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void resetData(ReadOnlyForumBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Removes {@code key} from this {@code ForumBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                || (other instanceof ForumBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                \u0026\u0026 persons.equals(((ForumBook) other).persons));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 13,
      "-": 108
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/ForumThreadRepository.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.sun.istack.NotNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.Extensions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.IForumBookStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class ForumThreadRepository extends BaseRepository implements IForumThreadRepository {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ForumThreadRepository(IForumBookStorage forumBookStorage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        super(forumBookStorage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public int addThread(@NotNull ForumThread forumThread) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(forumThread, \"forumThread can\u0027t be null\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getForumThreads().getList().add(forumThread);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getForumThreads().setDirty();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return forumThread.getId();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void updateThread(@NotNull ForumThread forumThread) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(forumThread, \"forumThread can\u0027t be null\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        List\u003cForumThread\u003e forumThreads \u003d forumBookStorage.getForumThreads().getList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Extensions.updateObjectInList(forumThreads, forumThread);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getForumThreads().setDirty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ForumThread getThread(int forumThreadId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return this.getById(forumBookStorage.getForumThreads().getList(), forumThreadId);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public List\u003cForumThread\u003e getThreadsByModule(int moduleId) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return forumBookStorage.getForumThreads().getList().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            .filter(aForumThread -\u003e aForumThread.getModuleId() \u003d\u003d moduleId).collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public List\u003cForumThread\u003e getThreadsByModule(@NotNull Module module) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(module, \"module can\u0027t be null\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return this.getThreadsByModule(module.getId());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void deleteThread(int forumThreadId) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        List\u003cForumThread\u003e pointer \u003d forumBookStorage.getForumThreads().getList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Optional\u003cForumThread\u003e toBeDeleted \u003d pointer.stream().filter(forumThread -\u003e forumThread.getId()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            \u003d\u003d forumThreadId).findFirst();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        toBeDeleted.ifPresent(pointer::remove);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getForumThreads().setDirty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void deleteThread(ForumThread forumThread) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.deleteThread(forumThread.getId());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 66,
      "xllx1": 5
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/IAnnouncementRepository.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Announcement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public interface IAnnouncementRepository {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    int addAnnouncement(Announcement announcement);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void deleteAnnouncement(Announcement announcement);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void deleteAnnouncement(int announcementId);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    Announcement getAnnouncement(int announcementId) throws EntityDoesNotExistException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    Announcement getLatestAnnouncement() throws EntityDoesNotExistException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 17,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/ICommentRepository.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Comment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public interface ICommentRepository {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    int addComment(Comment comment);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void deleteComment(Comment comment);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void deleteComment(int commentId);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    Comment getComment(int commentId) throws EntityDoesNotExistException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    List\u003cComment\u003e getCommentsByThread(int threadId);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    List\u003cComment\u003e getCommentsByThread(ForumThread forumThread);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 22,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/IForumThreadRepository.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.sun.istack.NotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public interface IForumThreadRepository {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    int addThread(ForumThread forumThread);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void updateThread(@NotNull ForumThread forumThread);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    ForumThread getThread(int forumThreadId) throws EntityDoesNotExistException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    List\u003cForumThread\u003e getThreadsByModule(int moduleId);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    List\u003cForumThread\u003e getThreadsByModule(Module module);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void deleteThread(int forumThreadId);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void deleteThread(ForumThread forumThread);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 27,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/IModuleRepository.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public interface IModuleRepository {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    int addModule(Module module);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void removeModule(Module module);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void removeModule(int moduleId);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    Module getModule(int moduleId) throws EntityDoesNotExistException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    Module getModuleByCode(String moduleCode) throws EntityDoesNotExistException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    List\u003cModule\u003e getAllModule();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 21,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/IUnitOfWork.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public interface IUnitOfWork {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void commit();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void rollBack();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 8,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/IUserRepository.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public interface IUserRepository {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    int addUser(User user);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void updateUser(User user);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void deleteUser(User user);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void deleteUser(int userId);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    User getUser(int userId) throws EntityDoesNotExistException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    User getUserByUsername(String username) throws EntityDoesNotExistException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    User authenticate(String username, String password) throws EntityDoesNotExistException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 23,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void resetData(ReadOnlyForumBook newData);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    /** Returns the ForumBook */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    ReadOnlyForumBook getForumBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    boolean canUndoForumBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    boolean canRedoForumBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void undoForumBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void redoForumBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void commitForumBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 11,
      "-": 68
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final VersionedForumBook versionedAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ModelManager(ReadOnlyForumBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CollectionUtil.requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        versionedAddressBook \u003d new VersionedForumBook(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this(new ForumBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void resetData(ReadOnlyForumBook newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ReadOnlyForumBook getForumBook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public boolean canUndoForumBook() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public boolean canRedoForumBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void undoForumBook() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void redoForumBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void commitForumBook() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 20,
      "-": 132
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/ModuleRepository.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.sun.istack.NotNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.IForumBookStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class ModuleRepository extends BaseRepository implements IModuleRepository {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ModuleRepository(IForumBookStorage forumBookStorage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        super(forumBookStorage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public int addModule(@NotNull Module module) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(module, \"module can\u0027t be null\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getModules().getList().add(module);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getModules().setDirty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return module.getId();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void removeModule(@NotNull Module module) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(module, \"module can\u0027t be null\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.removeModule(module.getId());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void removeModule(int moduleId) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getModules().getList().removeIf(module -\u003e module.getId() \u003d\u003d moduleId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getModules().setDirty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Module getModule(int moduleId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return getModuleBy(module -\u003e module.getId() \u003d\u003d moduleId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Module getModuleByCode(String moduleCode) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return getModuleBy(module -\u003e module.getModuleCode().equals(moduleCode));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public List\u003cModule\u003e getAllModule() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return forumBookStorage.getModules().getList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private Module getModuleBy(Predicate\u003cModule\u003e predicate) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Optional\u003cModule\u003e module \u003d forumBookStorage.getModules().getList().stream().filter(predicate).findFirst();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (module.isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            return module.get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        throw new EntityDoesNotExistException(\"Module dose not exist\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 63,
      "xllx1": 4
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/ReadOnlyForumBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public interface ReadOnlyForumBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/UnitOfWork.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.FileStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.ForumBookStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.IForumBookStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.IStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class UnitOfWork implements IUnitOfWork, AutoCloseable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private IForumBookStorage forumBookStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private AnnouncementRepository announcementRepository;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private ICommentRepository commentRepository;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private IForumThreadRepository forumThreadRepository;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private ModuleRepository moduleRepository;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private UserRepository userRepository;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public UnitOfWork(IStorage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage \u003d new ForumBookStorage(storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        announcementRepository \u003d new AnnouncementRepository(forumBookStorage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        commentRepository \u003d new CommentRepository(forumBookStorage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumThreadRepository \u003d new ForumThreadRepository(forumBookStorage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        moduleRepository \u003d new ModuleRepository(forumBookStorage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        userRepository \u003d new UserRepository(forumBookStorage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public UnitOfWork() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this(new FileStorage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public IAnnouncementRepository getAnnouncementRepository() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return announcementRepository;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ICommentRepository getCommentRepository() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return commentRepository;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public IForumThreadRepository getForumThreadRepository() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return forumThreadRepository;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ModuleRepository getModuleRepository() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return moduleRepository;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public UserRepository getUserRepository() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return userRepository;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.commit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void rollBack() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void close() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 72
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private Path forumBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Path getForumBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return forumBookFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setForumBookFilePath(Path forumBookFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.forumBookFilePath \u003d forumBookFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                \u0026\u0026 Objects.equals(forumBookFilePath, o.forumBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return Objects.hash(guiSettings, forumBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + forumBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 10,
      "-": 59
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/UserRepository.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.sun.istack.NotNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.Extensions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.IForumBookStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class UserRepository extends BaseRepository implements IUserRepository {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public UserRepository(IForumBookStorage forumBookStorage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        super(forumBookStorage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public int addUser(@NotNull User user) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(user, \"user can\u0027t be null\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getUsers().getList().add(user);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getUsers().setDirty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return user.getId();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void updateUser(@NotNull User user) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(user, \"user can\u0027t be null\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Extensions.updateObjectInList(forumBookStorage.getUsers().getList(), user);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getUsers().setDirty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void deleteUser(@NotNull User user) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Objects.requireNonNull(user, \"user can\u0027t be null\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.deleteUser(user.getId());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void deleteUser(int userId) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.removeById(forumBookStorage.getUsers().getList(), userId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.getUsers().setDirty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public User getUser(int userId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return this.getById(forumBookStorage.getUsers().getList(), userId);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public User getUserByUsername(String username) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Optional\u003cUser\u003e userInDb \u003d forumBookStorage.getUsers().getList().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .filter(user -\u003e user.getUsername().equals(username)).findFirst();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (!userInDb.isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            throw new EntityDoesNotExistException(\"Username does not exist\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return userInDb.get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public User authenticate(String username, String password) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        User user \u003d getUserByUsername(username);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (user.getPassword().equals(password)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            return user;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 66,
      "xllx1": 5
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/VersionedForumBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " * {@code ForumBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class VersionedForumBook extends ForumBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final List\u003cReadOnlyForumBook\u003e addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public VersionedForumBook(ReadOnlyForumBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        addressBookStateList.add(new ForumBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Saves a copy of the current {@code ForumBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        addressBookStateList.add(new ForumBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (!(other instanceof VersionedForumBook)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook otherVersionedAddressBook \u003d (VersionedForumBook) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 10,
      "-": 99
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/forum/Announcement.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.forum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.util.AppUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Represents the announcement in ForumBook."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Guarantees: is valid as declared in {@link #isValidAnnouncement(String, String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class Announcement extends BaseModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Show message if announcement is not valid"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_ANNOUNCEMENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        \"Announcement can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * The first character of the announcement must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String ANNOUNCEMENT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public Announcement() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public Announcement(String title, String content) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CollectionUtil.requireAllNonNull(title, content);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        AppUtil.checkArgument(isValidAnnouncement(title, content), MESSAGE_ANNOUNCEMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static boolean isValidAnnouncement(String testTitle, String testContent) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return (testTitle.matches(ANNOUNCEMENT_VALIDATION_REGEX) || testContent.matches(ANNOUNCEMENT_VALIDATION_REGEX));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        builder.append(\"\\nTitle: \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .append(title)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .append(\"\\nContent: \")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .append(content);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 5,
      "xllx1": 57
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/forum/BaseModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.forum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.RunningId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Metadata for the other classes"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class BaseModel implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    protected int id \u003d RunningId.getInstance().nextId();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    protected Date created \u003d new Date();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    protected Date modified;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    protected int createdByUserId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    protected int modifiedByUserId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Date getCreated() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return created;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Date getModified() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return modified;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public int getCreatedByUserId() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return createdByUserId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public int getModifiedByUserId() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return modifiedByUserId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setModified(Date modified) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.modified \u003d modified;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setCreatedByUserId(int createdByUserId) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.createdByUserId \u003d createdByUserId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setModifiedByUserId(int modifiedByUserId) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.modifiedByUserId \u003d modifiedByUserId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 47,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/forum/Comment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.forum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Represents comment under thread in ForumBook"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class Comment extends BaseModel {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_COMMENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            \"Comment should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String COMMENT_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_COMMENT_ID_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            \"Comment ID should only contain an integer, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String COMMENT_ID_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private int threadId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public int getThreadId() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return threadId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setThreadId(int threadId) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.threadId \u003d threadId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setContent(String content) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 6,
      "Meowzz95": 23,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/forum/ForumThread.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.forum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Represents thread under module in ForumBook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class ForumThread extends BaseModel {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_THREAD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            \"Thread title should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String THREAD_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_THREAD_ID_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            \"Thread ID should only contain an integer, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String THREAD_ID_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private int moduleId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    // Identity Field"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private List\u003cComment\u003e comments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public int getModuleId() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return moduleId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public List\u003cComment\u003e getComments() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return comments;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setModuleId(int moduleId) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 9,
      "Meowzz95": 30,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/forum/Module.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.forum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Represents module in ForumBook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class Module extends BaseModel {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MESSAGE_MODULE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            \"Module code should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static final String MODULE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private List\u003cForumThread\u003e forumThreads;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public Module(String title, String moduleCode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public List\u003cForumThread\u003e getForumThreads() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return forumThreads;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 5,
      "Meowzz95": 30,
      "xllx1": 8
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/forum/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.forum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Represents user in ForumBook"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class User extends BaseModel {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_USER_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        \"User name can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String MESSAGE_USER_PASSWORD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        \"User name can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_NOT_ADMIN \u003d \"You are not an admin!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String MESSAGE_NOT_LOGIN \u003d \"Please login in order to proceed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * The first character of the user name must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String USER_NAME_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static final String USER_PASSWORD_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private boolean isAdmin;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private boolean isBlock;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public User() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public User(String username, String password, boolean isAdmin, boolean isBlock, String email, String phone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        this.isAdmin \u003d isAdmin;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        this.isBlock \u003d isBlock;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static boolean isValidUserName(String testUserName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return (testUserName.matches(USER_NAME_VALIDATION_REGEX));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    public static boolean isValidUserPassword(String testUserName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0191729"
        },
        "content": "        return (testUserName.matches(USER_PASSWORD_VALIDATION_REGEX));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0191729"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0191729"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public void setIsBlock(boolean block) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        isBlock \u003d block;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public boolean isAdmin() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return isAdmin;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public boolean isBlock() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return isBlock;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setUsername(String username) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setPassword(String password) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setAdmin(boolean admin) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        isAdmin \u003d admin;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setBlock(boolean block) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        isBlock \u003d block;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setEmail(String email) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setPhone(String phone) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        builder.append(\" User ID: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .append(id)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .append(\" User Name: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .append(username);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 52,
      "E0191729": 16,
      "xllx1": 44
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        AppUtil.checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 55
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        AppUtil.checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 63
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 56
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getAddress())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Tags: \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 115
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        AppUtil.checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 50
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CollectionUtil.requireAllNonNull(persons);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 7,
      "-": 129
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/person/exceptions/DuplicatePersonException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/person/exceptions/PersonNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 51
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ReadOnlyForumBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " * Contains utility methods for populating {@code ForumBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public static ReadOnlyForumBook getSampleForumBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBook sampleAb \u003d new ForumBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/ForumBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ReadOnlyForumBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " * Represents a storage for {@link ForumBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public interface ForumBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    Path getForumBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Returns ForumBook data as a {@link ReadOnlyForumBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    Optional\u003cReadOnlyForumBook\u003e readForumBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * @see #getForumBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    Optional\u003cReadOnlyForumBook\u003e readForumBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Saves the given {@link ReadOnlyForumBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void saveForumBook(ReadOnlyForumBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * @see #saveForumBook(ReadOnlyForumBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void saveForumBook(ReadOnlyForumBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 46
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 42
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ReadOnlyForumBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public interface Storage extends ForumBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    Path getForumBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    Optional\u003cReadOnlyForumBook\u003e readForumBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void saveForumBook(ReadOnlyForumBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 10,
      "-": 29
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ReadOnlyForumBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " * Manages storage of ForumBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private ForumBookStorage forumBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public StorageManager(ForumBookStorage forumBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.forumBookStorage \u003d forumBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ForumBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Path getForumBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return forumBookStorage.getForumBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Optional\u003cReadOnlyForumBook\u003e readForumBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return readForumBook(forumBookStorage.getForumBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Optional\u003cReadOnlyForumBook\u003e readForumBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return forumBookStorage.readForumBook(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void saveForumBook(ReadOnlyForumBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        saveForumBook(addressBook, forumBookStorage.getForumBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void saveForumBook(ReadOnlyForumBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumBookStorage.saveForumBook(addressBook, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            saveForumBook(event.data);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 24,
      "-": 68
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Saves the given {@link UserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 5,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 8,
      "-": 128
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableAddressBook addressBook)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        throws FileNotFoundException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static XmlSerializableAddressBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 35
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/XmlForumBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ReadOnlyForumBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " * A class to access ForumBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class XmlForumBookStorage implements ForumBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlForumBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public XmlForumBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Path getForumBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Optional\u003cReadOnlyForumBook\u003e readForumBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return readForumBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Similar to {@link #readForumBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Optional\u003cReadOnlyForumBook\u003e readForumBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            logger.info(\"ForumBook file \"  + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void saveForumBook(ReadOnlyForumBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        saveForumBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Similar to {@link #saveForumBook(ReadOnlyForumBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void saveForumBook(ReadOnlyForumBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ReadOnlyForumBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " * An Immutable ForumBook that is serializable to XML format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyForumBook src) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code ForumBook} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ForumBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBook addressBook \u003d new ForumBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 10,
      "-": 60
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/AnnouncementStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Announcement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class AnnouncementStorage extends BaseEntityStorage\u003cAnnouncement\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 8,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/BaseEntityStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * @param \u003cT\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public abstract class BaseEntityStorage\u003cT\u003e implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    protected List\u003cT\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private boolean dirty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public List\u003cT\u003e getList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public boolean isDirty() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return dirty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setDirty() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        dirty \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 26,
      "xllx1": 4
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/CommentStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Comment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class CommentStorage extends BaseEntityStorage\u003cComment\u003e implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 9,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/EntityDoesNotExistException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class EntityDoesNotExistException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public EntityDoesNotExistException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 8,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/FileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class FileStorage implements IStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void write(Object object) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            FileOutputStream fileOutputStream \u003d new FileOutputStream(StorageMapping.getInstance()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                .getFileName(object.getClass()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            ObjectOutputStream objectOutputStream \u003d new ObjectOutputStream(fileOutputStream);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            objectOutputStream.writeObject(object);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            objectOutputStream.close();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            fileOutputStream.close();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Object read(Class clazz) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            FileInputStream fileInputStream \u003d new FileInputStream(StorageMapping.getInstance().getFileName(clazz));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            ObjectInputStream objectInputStream \u003d new ObjectInputStream(fileInputStream);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            Object result \u003d objectInputStream.readObject();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            objectInputStream.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            fileInputStream.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void remove(Class clazz) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            Files.delete(Paths.get(StorageMapping.getInstance().getFileName(clazz)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void handleSourceChange(IEvent changeEvent) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 55,
      "xllx1": 5
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/ForumBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class ForumBookStorage implements IForumBookStorage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    protected IStorage underlyingStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private AnnouncementStorage announcements;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private CommentStorage comments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private ForumThreadStorage forumThreads;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private ModuleStorage modules;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private UserStorage users;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ForumBookStorage(IStorage underlyingStorage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        this.underlyingStorage \u003d underlyingStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        loadAnnouncement();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        loadComment();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        loadForumThread();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        loadUser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        loadModule();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        saveAnnouncement();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        saveComment();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        saveForumThread();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        saveUser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        saveModule();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void save(Class clazz) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void load(Class clazz) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void saveAnnouncement() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (announcements.isDirty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            underlyingStorage.write(announcements);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void loadAnnouncement() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        announcements \u003d (AnnouncementStorage) underlyingStorage.read(AnnouncementStorage.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (announcements \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            announcements \u003d new AnnouncementStorage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            saveAnnouncement();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void saveComment() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (comments.isDirty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            underlyingStorage.write(comments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void loadComment() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        comments \u003d (CommentStorage) underlyingStorage.read(CommentStorage.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (comments \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            comments \u003d new CommentStorage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            saveComment();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void saveForumThread() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (forumThreads.isDirty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            underlyingStorage.write(forumThreads);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void loadForumThread() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumThreads \u003d (ForumThreadStorage) underlyingStorage.read(ForumThreadStorage.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (forumThreads \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            forumThreads \u003d new ForumThreadStorage();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            saveForumThread();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void saveUser() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (users.isDirty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            underlyingStorage.write(users);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void loadUser() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        users \u003d (UserStorage) underlyingStorage.read(UserStorage.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (users \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            users \u003d new UserStorage();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            saveUser();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void saveModule() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (modules.isDirty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            underlyingStorage.write(modules);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void loadModule() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        modules \u003d (ModuleStorage) underlyingStorage.read(ModuleStorage.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (modules \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            modules \u003d new ModuleStorage();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            saveModule();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public AnnouncementStorage getAnnouncements() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return announcements;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ForumThreadStorage getForumThreads() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return forumThreads;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public UserStorage getUsers() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return users;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ModuleStorage getModules() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public CommentStorage getComments() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return comments;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 156,
      "xllx1": 6
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/ForumThreadStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class ForumThreadStorage extends BaseEntityStorage\u003cForumThread\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 7,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/IEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public interface IEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 5,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/IForumBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public interface IForumBookStorage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void commit();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void save(Class clazz);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void load(Class clazz);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void saveAnnouncement();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void loadAnnouncement();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void saveComment();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void loadComment();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void saveForumThread();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void loadForumThread();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void saveUser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void loadUser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void saveModule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void loadModule();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    AnnouncementStorage getAnnouncements();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    ForumThreadStorage getForumThreads();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    UserStorage getUsers();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    ModuleStorage getModules();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    CommentStorage getComments();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 44,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/IStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public interface IStorage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void write(Object object);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    Object read(Class clazz);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void remove(Class clazz);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    void handleSourceChange(IEvent changeEvent);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 12,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/ModuleStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class ModuleStorage extends BaseEntityStorage\u003cModule\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 8,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/RunningId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class RunningId {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private static RunningId ourInstance \u003d new RunningId();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private RunningId() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static RunningId getInstance() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return ourInstance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @param currentId"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private void writeToFile(int currentId) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            Files.write(Paths.get(StorageMapping.getInstance().getFileName(RunningId.class)),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                String.valueOf(currentId + 1).getBytes());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private int readFromFile() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            String text \u003d new String(Files.readAllBytes(Paths.get(StorageMapping.getInstance()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                .getFileName(RunningId.class))));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            return Integer.valueOf(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            //TODO: handle error"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (!Files.exists(Paths.get(StorageMapping.getInstance().getFileName(RunningId.class)))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            writeToFile(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public int nextId() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        int id \u003d readFromFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        writeToFile(id);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 32,
      "xllx1": 31
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/StorageChangeEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class StorageChangeEvent implements IEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 5,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/StorageMapping.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class StorageMapping {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private static StorageMapping ourInstance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private static String dataFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private HashMap\u003cClass, String\u003e classMapFileName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private StorageMapping() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        initDataFolder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        classMapFileName \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        classMapFileName.put(AnnouncementStorage.class, Paths.get(dataFolder, \"ann\").toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        classMapFileName.put(CommentStorage.class, Paths.get(dataFolder, \"comment\").toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        classMapFileName.put(ForumThreadStorage.class, Paths.get(dataFolder, \"threads\").toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        classMapFileName.put(ModuleStorage.class, Paths.get(dataFolder, \"modules\").toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        classMapFileName.put(UserStorage.class, Paths.get(dataFolder, \"user\").toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        classMapFileName.put(RunningId.class, Paths.get(dataFolder, \"i\").toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static StorageMapping getInstance() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (ourInstance \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            ourInstance \u003d new StorageMapping();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return ourInstance;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public String getFileName(Class clazz) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return classMapFileName.get(clazz);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void addMapping(Class clazz, String path) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        classMapFileName.put(clazz, path);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private void initDataFolder() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        dataFolder \u003d Paths.get(Paths.get(\"\").toString(), \"forumData\").toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (!Files.exists(Paths.get(dataFolder))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                Files.createDirectory(Paths.get(dataFolder));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 48,
      "xllx1": 10
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/storage/forum/UserStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage.forum;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class UserStorage extends BaseEntityStorage\u003cUser\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 7,
      "xllx1": 3
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/AnnouncementPopUp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class AnnouncementPopUp extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AnnouncementPopUp.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private static final String FXML \u003d \"AnnouncementPopUp.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Creates a new AnnouncementPopUp."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @param root Stage to use as the root of the AnnouncementPopUp."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public AnnouncementPopUp(Stage root) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Creates a new AnnouncementPopUp."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public AnnouncementPopUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Shows the AnnouncementPopUp."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public void show(String aTitle, String aContent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        GridPane grid \u003d new GridPane();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        grid.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        grid.setHgap(10);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        grid.setVgap(10);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        grid.setPadding(new Insets(25, 25, 25, 25));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Scene scene \u003d new Scene(grid, 300, 200);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Label lblContent \u003d new Label(aContent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        lblContent.setWrapText(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        lblContent.setFont(new Font(\"Arial\", 20));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        grid.add(lblContent, 0, 0, 2, 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Button btnClose \u003d new Button();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        btnClose.setText(\"Close\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        btnClose.setOnAction(event -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            getRoot().close(); // return to main window"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        HBox hbBtn \u003d new HBox(10);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        hbBtn.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        hbBtn.getChildren().add(btnClose);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        grid.add(hbBtn, 1, 1, 2, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        getRoot().setTitle(aTitle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        getRoot().setScene(scene);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        logger.fine(\"Showing announcement pop up.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Returns true if the announcement pop up is currently being shown."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Focuses on the announcement pop up."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 89
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 5,
      "-": 67
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.ListElementPointer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 9,
      "-": 142
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/DisplayFormatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.UnitOfWork;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.Comment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "//@@author HansKoh"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " * To format the message of a threadList and commentList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HansKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "public class DisplayFormatter {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    private static String message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * return a string message of threadList to display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @param threadList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static String diplayThreadList (List\u003cForumThread\u003e threadList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            message \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            for (ForumThread thread : threadList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                message +\u003d \"(By \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                        + unitOfWork.getUserRepository().getUser(thread.getCreatedByUserId()).getUsername()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                        + \")\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                        + thread.getId() + \": \" + thread.getTitle() + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                        + \"----------------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HansKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * return a string message of commentList to display"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @param commentList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    public static String displayCommentList (List\u003cComment\u003e commentList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        try (UnitOfWork unitOfWork \u003d new UnitOfWork()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            message \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            for (Comment comment : commentList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                message +\u003d \"(By \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                        + unitOfWork.getUserRepository().getUser(comment.getCreatedByUserId()).getUsername()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                        + \")\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                        + comment.getId() + \": \" + comment.getContent() + \"\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                        + \"----------------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 58
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application ForumThread."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 75
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Config;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.events.model.ShowAnnouncementEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.commons.events.model.UserLoginEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private AnnouncementPopUp announcementPopUp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private Label lblUserName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        announcementPopUp \u003d new AnnouncementPopUp();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getForumBookFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    //@@author xllx1"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * show user name and user type in the label"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public void handleUserLogin(String userName, boolean isAdmin) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String userType \u003d \"(\" + (isAdmin ? \"Admin\" : \"User\") + \")\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        lblUserName.setText(\"\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (userName.equals(\"\")) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            lblUserName.setText(\"Welcome to Forum Book. Please login to proceed! \");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            lblUserName.setText(userName + userType);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * shows announcement in a pop up window."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public void handleShowAnnouncement(String announcementTitle, String announcementContent) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        announcementPopUp \u003d new AnnouncementPopUp();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        if (!announcementPopUp.isShowing()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            announcementPopUp.show(announcementTitle, announcementContent);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            announcementPopUp.focus();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    //@@author xllx1"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private void handleUserLoginEvent(UserLoginEvent event) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        handleUserLogin(event.userName, event.userType);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private void handleShowAnnouncementEvent(ShowAnnouncementEvent event) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        handleShowAnnouncement(event.announcementTitle, event.announcementContent);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 9,
      "xllx1": 52,
      "-": 193
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ForumBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 67
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 5,
      "-": 78
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 38
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 79
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Stops the UI. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 9,
      "-": 111
    }
  },
  {
    "path": "src/main/java/com/t13g2/forum/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 13,
      "-": 100
    }
  },
  {
    "path": "src/main/resources/view/AnnouncementPopUp.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" title\u003d\"\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "xllx1": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003c?import org.controlsfx.control.StatusBar?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        \u003cStackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            \u003cLabel minHeight\u003d\"15\" style\u003d\"-fx-font-size: 20; -fx-text-fill: white\" textAlignment\u003d\"RIGHT\" fx:id\u003d\"lblUserName\" text\u003d\"Welcome to Forum Book. Please login to proceed! \" StackPane.alignment\u003d\"CENTER_RIGHT\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "                   minHeight\u003d\"750\" prefHeight\u003d\"800\" maxHeight\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HansKoh"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "HansKoh": 2,
      "xllx1": 9,
      "-": 66
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "  \"addressBookFilePath\" : \"data/addressbook.xml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003c!-- ForumBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 49
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ReadOnlyForumBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    protected Supplier\u003cReadOnlyForumBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyForumBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        userPrefs.setForumBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ForumBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            return new ForumBook(storage.readForumBook().get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            throw new AssertionError(\"Data is not in the ForumBook format.\", dce);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return storage.getForumBookFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model copy \u003d new ModelManager((model.getForumBook()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 23,
      "-": 99
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Address App\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new  Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 138
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 91
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false,  errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(\"Typical App Title\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setAppTitle(\"Updated Title\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 128
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\"));  // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 158
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        XmlUtil.getDataFromFile(null, ForumBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, ForumBook.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, ForumBook.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        XmlUtil.saveDataToFile(null, new ForumBook());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new ForumBook());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new ForumBook());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new ForumBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 16,
      "-": 129
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 174
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.DeleteUserCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.commands.ListModuleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.testutil.UserBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //set the current logged in user as an admin."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        User loginUser \u003d new UserBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Context.getInstance().setCurrentUser(loginUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String deleteUserCommand \u003d \"deleteUser uName/jane\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        assertCommandException(deleteUserCommand, String.format(DeleteUserCommand.MESSAGE_INVALID_USER, \"jane\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        assertHistoryCorrect(deleteUserCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //set the current logged in user as an admin."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        User loginUser \u003d new UserBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Context.getInstance().setCurrentUser(loginUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        String listModuleCommand \u003d ListModuleCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        assertCommandSuccess(listModuleCommand, String.format(ListModuleCommand.MESSAGE_SUCCESS, \"\"), model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        assertHistoryCorrect(listModuleCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getForumBook(), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 10,
      "xllx1": 19,
      "-": 106
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getForumBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.commitForumBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Person personInList \u003d model.getForumBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 14,
      "-": 32
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ReadOnlyForumBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public void resetData(ReadOnlyForumBook newData) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public ReadOnlyForumBook getForumBook() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public boolean canUndoForumBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public boolean canRedoForumBook() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public void undoForumBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public void redoForumBook() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public void commitForumBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public void commitForumBook() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public ReadOnlyForumBook getForumBook() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            return new ForumBook();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 19,
      "-": 186
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/AnnounceCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Context;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.Announcement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.testutil.AnnouncementBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.testutil.UserBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * integration test for AnnounceCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class AnnounceCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public void constructor_nullAnnouncement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        new AnnounceCommand(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public void execute_announcementAccepted_announceSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //set the current logged in user as an admin."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        User loginUser \u003d new UserBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Context.getInstance().setCurrentUser(loginUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Announcement validAnnouncement \u003d new AnnouncementBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandResult commandResult \u003d new AnnounceCommand(validAnnouncement).execute(model, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        assertEquals(String.format(AnnounceCommand.MESSAGE_SUCCESS, validAnnouncement),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public void userLoggedIn() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //set the current logged in user as a user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        User loginUser \u003d new UserBuilder().buildUser(false, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Context.getInstance().setCurrentUser(loginUser);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Announcement validAnnouncement \u003d new AnnouncementBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new AnnounceCommand(validAnnouncement), model, commandHistory,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            User.MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public void notLoggedIn() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        //set the current logged in user as null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Context.getInstance().setCurrentUser(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Announcement validAnnouncement \u003d new AnnouncementBuilder().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new AnnounceCommand(validAnnouncement), model, commandHistory,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            User.MESSAGE_NOT_LOGIN);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "xllx1": 75
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.commitForumBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ClearCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.resetData(new ForumBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.commitForumBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ClearCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 33,
      "xllx1": 4
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        ForumBook expectedForumBook \u003d new ForumBook(actualModel.getForumBook());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            assertEquals(expectedForumBook, actualModel.getForumBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.commitForumBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 11,
      "xllx1": 6,
      "-": 122
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ForumBook(model.getForumBook()), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.commitForumBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Person editedPerson \u003d personInList.withName(CommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                .withPhone(CommandTestUtil.VALID_PHONE_BOB).withTags(CommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ForumBook(model.getForumBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.commitForumBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ForumBook(model.getForumBook()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.commitForumBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(TypicalIndexes"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ForumBook(model.getForumBook()), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.commitForumBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Person personInList \u003d model.getForumBook().getPersonList()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .get(TypicalIndexes.INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getForumBook().getPersonList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ForumBook(model.getForumBook()), new UserPrefs());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.commitForumBook();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.undoForumBook();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.redoForumBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ForumBook(model.getForumBook()), new UserPrefs());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.commitForumBook();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.undoForumBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased()),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            personToEdit);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.redoForumBook();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(TypicalIndexes.INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            CommandTestUtil.DESC_AMY)));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            CommandTestUtil.DESC_BOB)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 64,
      "xllx1": 32,
      "-": 159
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/EditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_AMY.equals(CommandTestUtil.DESC_AMY));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(CommandTestUtil.DESC_BOB));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            new EditPersonDescriptorBuilder(CommandTestUtil.DESC_AMY).withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            new EditPersonDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                .withPhone(CommandTestUtil.VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            new EditPersonDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                .withEmail(CommandTestUtil.VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            new EditPersonDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                .withAddress(CommandTestUtil.VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            new EditPersonDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 52,
      "xllx1": 8
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 7,
      "-": 23
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 8,
      "-": 22
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 8,
      "-": 26
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getForumBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 36,
      "xllx1": 4
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.deleteFirstPerson(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.deleteFirstPerson(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.undoForumBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        model.undoForumBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.undoForumBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.undoForumBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.redoForumBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.redoForumBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 43,
      "xllx1": 4
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.deleteFirstPerson(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.deleteFirstPerson(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.undoForumBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedModel.undoForumBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 39,
      "xllx1": 4
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            new DeleteCommand(TypicalIndexes.INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "xllx1": 4,
      "-": 24
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 33
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        thrown.expectMessage(ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 12,
      "-": 194
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(TypicalIndexes.INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 7,
      "-": 22
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final ForumBook addressBook \u003d new ForumBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBook newData \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(TypicalPersons.ALICE, editedAlice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStub newData \u003d new ForumBookStub(newPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(addressBook.hasPerson(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        addressBook.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertTrue(addressBook.hasPerson(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        addressBook.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * A stub ReadOnlyForumBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private static class ForumBookStub implements ReadOnlyForumBook {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 19,
      "xllx1": 4,
      "-": 89
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(modelManager.hasPerson(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        modelManager.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertTrue(modelManager.hasPerson(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        ForumBook addressBook \u003d new AddressBookBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .withPerson(TypicalPersons.ALICE).withPerson(TypicalPersons.BENSON).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBook differentAddressBook \u003d new ForumBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        String[] keywords \u003d TypicalPersons.ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        differentUserPrefs.setForumBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 11,
      "xllx1": 2,
      "-": 71
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final ReadOnlyForumBook addressBookWithAmy \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        new AddressBookBuilder().withPerson(TypicalPersons.AMY).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final ReadOnlyForumBook addressBookWithBob \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        new AddressBookBuilder().withPerson(TypicalPersons.BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final ReadOnlyForumBook addressBookWithCarl \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        new AddressBookBuilder().withPerson(TypicalPersons.CARL).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private final ReadOnlyForumBook emptyAddressBook \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertThrows(VersionedForumBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertThrows(VersionedForumBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertThrows(VersionedForumBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertThrows(VersionedForumBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private void assertAddressBookListStatus(VersionedForumBook versionedAddressBook,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                                             List\u003cReadOnlyForumBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                                             ReadOnlyForumBook expectedCurrentState,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                                             List\u003cReadOnlyForumBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertEquals(new ForumBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        for (ReadOnlyForumBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            assertEquals(expectedAddressBook, new ForumBook(versionedAddressBook));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        for (ReadOnlyForumBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            assertEquals(expectedAddressBook, new ForumBook(versionedAddressBook));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Creates and returns a {@code VersionedForumBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * {@code VersionedForumBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private VersionedForumBook prepareAddressBookList(ReadOnlyForumBook... addressBookStates) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        VersionedForumBook versionedAddressBook \u003d new VersionedForumBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedForumBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 52,
      "-": 248
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/model/person/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 35
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/model/person/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\"));  // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));   // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 60
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 73
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/model/person/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 39
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertTrue(TypicalPersons.ALICE.isSamePerson(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertTrue(TypicalPersons.ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertTrue(TypicalPersons.ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertTrue(TypicalPersons.ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(TypicalPersons.ALICE).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertTrue(TypicalPersons.ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertTrue(TypicalPersons.ALICE.equals(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(TypicalPersons.BOB));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 96,
      "xllx1": 4
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/model/person/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 39
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertFalse(uniquePersonList.contains(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertTrue(uniquePersonList.contains(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.setPerson(null, TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.setPerson(TypicalPersons.ALICE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.setPerson(TypicalPersons.ALICE, TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.setPerson(TypicalPersons.ALICE, TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedUniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xllx1"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.setPerson(TypicalPersons.ALICE, editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.setPerson(TypicalPersons.ALICE, TypicalPersons.BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedUniquePersonList.add(TypicalPersons.BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.add(TypicalPersons.BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.setPerson(TypicalPersons.ALICE, TypicalPersons.BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.remove(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.remove(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((UniquePersonList) null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedUniquePersonList.add(TypicalPersons.BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(TypicalPersons.BOB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        expectedUniquePersonList.add(TypicalPersons.BOB);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(TypicalPersons.ALICE, TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 36,
      "xllx1": 4,
      "-": 146
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/storage/FileStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.FileStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.StorageMapping;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class FileStorageTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void readAndWrite() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        FileStorage fileStorage \u003d new FileStorage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        StorageMapping.getInstance().addMapping(DummyClass.class, \"dummyClass\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        DummyClass dummy \u003d new DummyClass();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        dummy.setName(\"hehe\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fileStorage.write(dummy);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        DummyClass dummyFromDisk \u003d (DummyClass) fileStorage.read(DummyClass.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(dummy.getName(), dummyFromDisk.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fileStorage.remove(DummyClass.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    static class DummyClass implements Serializable {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public String getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public void setName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 40
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/storage/ForumBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Announcement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Comment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.ForumThread;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.ForumBookStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.ForumBookStorageBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class ForumBookStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void announceInited() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertNotNull(new ForumBookStorageBuilder().build().getAnnouncements());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void commentInited() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertNotNull(new ForumBookStorageBuilder().build().getComments());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void threadInited() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertNotNull(new ForumBookStorageBuilder().build().getForumThreads());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void userInited() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertNotNull(new ForumBookStorageBuilder().build().getUsers());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void modulesInited() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertNotNull(new ForumBookStorageBuilder().build().getModules());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void announcementTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Announcement announcement \u003d new Announcement(\"title\", \"content\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getAnnouncements().getList().add(announcement);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getAnnouncements().setDirty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getAnnouncements().getList().get(0).getId(), announcement.getId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getAnnouncements().getList().get(0).getTitle(), announcement.getTitle());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getAnnouncements().getList().get(0).getContent(), announcement.getContent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void announcementNoDirty() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Announcement announcement \u003d new Announcement(\"title\", \"content\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getAnnouncements().getList().add(announcement);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.commit();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        freshFs.getAnnouncements().getList().get(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void announcementNoCommit() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Announcement announcement \u003d new Announcement(\"title\", \"content\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getAnnouncements().getList().add(announcement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getAnnouncements().setDirty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        freshFs.getAnnouncements().getList().get(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void commentTest() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Comment comment \u003d new Comment();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        comment.setContent(\"a\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        comment.setThreadId(5);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getComments().getList().add(comment);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getComments().setDirty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.commit();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getComments().getList().get(0).getId(), comment.getId());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getComments().getList().get(0).getContent(), comment.getContent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getComments().getList().get(0).getThreadId(), comment.getThreadId());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void commentNoCommit() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Comment comment \u003d new Comment();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        comment.setContent(\"a\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        comment.setThreadId(5);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getComments().getList().add(comment);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getComments().setDirty();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        freshFs.getComments().getList().get(0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void commentNoDirty() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Comment comment \u003d new Comment();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        comment.setContent(\"a\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        comment.setThreadId(5);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getComments().getList().add(comment);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.commit();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        freshFs.getComments().getList().get(0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void threadTest() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumThread forumThread \u003d new ForumThread();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumThread.setTitle(\"b\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumThread.setModuleId(6);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getForumThreads().getList().add(forumThread);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getForumThreads().setDirty();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.commit();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getForumThreads().getList().get(0).getId(), forumThread.getId());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getForumThreads().getList().get(0).getTitle(), forumThread.getTitle());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getForumThreads().getList().get(0).getModuleId(), forumThread.getModuleId());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void threadNoCommit() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumThread forumThread \u003d new ForumThread();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumThread.setTitle(\"b\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumThread.setModuleId(6);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getForumThreads().getList().add(forumThread);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getForumThreads().setDirty();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        freshFs.getForumThreads().getList().get(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void threadNoDirty() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumThread forumThread \u003d new ForumThread();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumThread.setTitle(\"b\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        forumThread.setModuleId(6);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getForumThreads().getList().add(forumThread);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.commit();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        freshFs.getForumThreads().getList().get(0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void userTest() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        User user \u003d new User();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        user.setUsername(\"uname\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        user.setPassword(\"hehe\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getUsers().getList().add(user);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getUsers().setDirty();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.commit();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getUsers().getList().get(0).getId(), user.getId());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getUsers().getList().get(0).getUsername(), user.getUsername());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getUsers().getList().get(0).getPassword(), user.getPassword());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void userNoCommit() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        User user \u003d new User();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        user.setUsername(\"uname\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        user.setPassword(\"hehe\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getUsers().getList().add(user);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getUsers().setDirty();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        freshFs.getUsers().getList().get(0);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void userNoDirty() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        User user \u003d new User();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        user.setUsername(\"uname\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        user.setPassword(\"hehe\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getUsers().getList().add(user);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.commit();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        freshFs.getUsers().getList().get(0);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void moduleTest() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Module module \u003d new Module(\"mTitle\", \"mCode\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getModules().getList().add(module);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getModules().setDirty();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.commit();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getModules().getList().get(0).getId(), module.getId());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getModules().getList().get(0).getTitle(), module.getTitle());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Assert.assertEquals(freshFs.getModules().getList().get(0).getModuleCode(), module.getModuleCode());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void moduleNoCommit() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Module module \u003d new Module(\"mTitle\", \"mCode\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getModules().getList().add(module);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getModules().setDirty();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        freshFs.getModules().getList().get(0);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void moduleNoDirty() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorageBuilder builder \u003d new ForumBookStorageBuilder();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage fs \u003d builder.build();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Module module \u003d new Module(\"mTitle\", \"mCode\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.getModules().getList().add(module);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        fs.commit();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBookStorage freshFs \u003d builder.build();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        freshFs.getModules().getList().get(0);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 312
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/storage/IStorageStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.IEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.IStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class IStorageStub implements IStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private static IStorageStub _instance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private HashMap\u003cClass, Object\u003e storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private IStorageStub() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        storage \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public static IStorageStub getInstance() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        if (_instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            _instance \u003d new IStorageStub();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return _instance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void write(Object object) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        storage.put(object.getClass(), this.copyObject(object));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public Object read(Class clazz) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return this.copyObject(storage.get(clazz));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void remove(Class clazz) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        storage.remove(clazz);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void handleSourceChange(IEvent changeEvent) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public void refreshInstantce() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        _instance \u003d new IStorageStub();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private Object copyObject(Object objSource) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Object objDest \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(bos);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            oos.writeObject(objSource);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            oos.flush();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            oos.close();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            bos.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            byte[] byteData \u003d bos.toByteArray();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            ByteArrayInputStream bais \u003d new ByteArrayInputStream(byteData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                objDest \u003d new ObjectInputStream(bais).readObject();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return objDest;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 70,
      "xllx1": 12
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        userPrefs.setForumBookFilePath(Paths.get(\"data/addressbook.xml\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "xllx1": 1,
      "-": 118
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ReadOnlyForumBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        XmlForumBookStorage addressBookStorage \u003d new XmlForumBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "         * {@link XmlForumBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in  class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBook original \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        storageManager.saveForumBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ReadOnlyForumBook retrieved \u003d storageManager.readForumBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertEquals(original, new ForumBook(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        assertNotNull(storageManager.getForumBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlForumBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new ForumBook()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    class XmlForumBookStorageExceptionThrowingStub extends XmlForumBookStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public XmlForumBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        public void saveForumBook(ReadOnlyForumBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 21,
      "-": 82
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": " *     {@code ForumBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    private ForumBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        addressBook \u003d new ForumBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public AddressBookBuilder(ForumBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Adds a new {@code Person} to the {@code ForumBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ForumBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 9,
      "-": 25
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/AnnouncementBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.Announcement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * A utility class to help with building Announcement objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class AnnouncementBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"System Maintenance\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String DEFAULT_CONTENT \u003d \"Regular system maintenance on every Wednesday 4pm to 5pm.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public AnnouncementBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        title \u003d DEFAULT_TITLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        content \u003d DEFAULT_CONTENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Initializes the AnnouncementBuilder with the data of {@code announcementToCopy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public AnnouncementBuilder(Announcement announcementToCopy) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        title \u003d announcementToCopy.getTitle();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        content \u003d announcementToCopy.getContent();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Sets the {@code title} of the {@code Announcement} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public AnnouncementBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Sets the {@code content} of the {@code Announcement} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public AnnouncementBuilder withContent(String content) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public Announcement build() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new Announcement(title, content);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 49
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 8,
      "-": 79
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/EventsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods related to events."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * has been posted to all subscribers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postNow(BaseEvent event) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers at some unspecified time in the future."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postLater(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 24
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/ForumBookStorageBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "//@@Meowzz95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.IStorageStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.storage.forum.ForumBookStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "public class ForumBookStorageBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ForumBookStorageBuilder() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        IStorageStub.getInstance().refreshInstantce();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public ForumBookStorage build() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        return new ForumBookStorage(IStorageStub.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 16,
      "xllx1": 3
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 8,
      "-": 85
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 6,
      "xllx1": 4,
      "-": 52
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "-": 51
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import static com.t13g2.forum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.ForumBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "     * Returns an {@code ForumBook} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "    public static ForumBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "        ForumBook ab \u003d new ForumBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 16,
      "-": 60
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/testutil/UserBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllx1"
        },
        "content": "package com.t13g2.forum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllx1"
        },
        "content": "import com.t13g2.forum.model.forum.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllx1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllx1"
        },
        "content": " * A utility class to help with building User objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllx1"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllx1"
        },
        "content": "public class UserBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String DEFAULT_USER_NAME \u003d \"testAdmin\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String DEFAULT_USER_PASSWORD \u003d \"123\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final boolean DEFAULT_USER_IS_ADMIN \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final boolean DEFAULT_USER_IS_BLOCK \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String DEFAULT_USER_EMAIL \u003d \"teatAdmin@test.com\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public static final String DEFAULT_USER_PHONE \u003d \"98765432\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private boolean isAdmin;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private boolean isBlock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public UserBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.username \u003d DEFAULT_USER_NAME;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.password \u003d DEFAULT_USER_PASSWORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.isAdmin \u003d DEFAULT_USER_IS_ADMIN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.isBlock \u003d DEFAULT_USER_IS_BLOCK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.email \u003d DEFAULT_USER_EMAIL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.phone \u003d DEFAULT_USER_PHONE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Initializes the UserBuilder with the data of {@code userToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public UserBuilder(User userToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.username \u003d userToCopy.getUsername();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.password \u003d userToCopy.getPassword();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.isAdmin \u003d userToCopy.isAdmin();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.isBlock \u003d userToCopy.isBlock();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.email \u003d userToCopy.getEmail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.phone \u003d userToCopy.getPhone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Sets the {@code name} of the {@code User} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public UserBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.username \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Sets the {@code password} of the {@code User} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public UserBuilder withPassword(String password) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Sets the {@code isAdmin} of the {@code User} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public UserBuilder withIsAdmin(boolean isAdmin) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.isAdmin \u003d isAdmin;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Sets the {@code isBlock} of the {@code User} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public UserBuilder withIsBlock(boolean isBlock) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.isBlock \u003d isBlock;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Sets the {@code email} of the {@code User} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public UserBuilder withContent(String email) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * Sets the {@code phone} of the {@code User} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public UserBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public User build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new User(username, password, isAdmin, isBlock, email, phone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    public User buildUser(boolean isAdmin, boolean isBlock) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xllx1"
        },
        "content": "        return new User(\"john\", \"123\", isAdmin, isBlock, \"john@test.com\", \"87654321\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xllx1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xllx1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 98
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/ui/testutil/EventsCollectorRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Sets up an {@code EventsCollector} and tears it down after each test."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCollectorRule implements TestRule {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollector eventsCollector \u003d new EventsCollector();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * A class that collects events raised by other classes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public class EventsCollector {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public EventsCollector() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * Collects any event raised by any class"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        @Subscribe"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        public void collectEvent(BaseEvent event) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            events.add(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Removes collected events from the collected list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        public void reset() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            events.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        public int getSize() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns the most recent event collected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        public BaseEvent getMostRecent() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            if (events.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if the collector did not receive any events"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isEmpty() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.isEmpty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 82
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 4,
      "xllx1": 1,
      "-": 72
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/t13g2/forum/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "package com.t13g2.forum.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 3,
      "-": 27
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 3,
      "-": 116
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.ui.UiManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/NodeHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a node in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class NodeHandle\u003cT extends Node\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final T rootNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected NodeHandle(T rootNode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.rootNode \u003d requireNonNull(rootNode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected T getRootNode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return rootNode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cQ extends Node\u003e Q getChildNode(String query) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cQ\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clicks on the root node (i.e. itself)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void click() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.clickOn(rootNode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllx1": 1,
      "-": 43
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 86
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cPerson\u003e\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cPerson\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cPerson\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e selectedPersonList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedPersonList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedPersonList.get(0)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to display {@code person}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(Person person) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getRootNode().getItems().contains(person)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person card handle of a person associated with the {@code index} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person getPerson(int index) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 158
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllx1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllx1"
        },
        "content": "     * throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "xllx1": 2,
      "-": 61
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "import com.t13g2.forum.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cPerson\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, Person... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 2,
      "-": 37
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003c?import com.t13g2.forum.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meowzz95"
        },
        "content": "\u003cfx:root type\u003d\"TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Meowzz95": 1,
      "-": 5
    }
  }
]
