[
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"jomcruz93\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\": \"CRU...STA\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authorNames\": [\"jomcruz93\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"zhicaizack\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\": \"GIA...CAI\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authorNames\": [\"zhicaizack\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"m-aslam-mj2\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\": \"MOH...HAN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authorNames\": [\"m-aslam-mj2\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "      \"githubId\": \"tristyxxnana\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\": \"NUR...LAN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authorNames\": [\"tristyxxnana\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"harriuscai\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\": \"TAN...CAI\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authorNames\": [\"harriuscai\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 16,
      "-": 14
    }
  },
  {
    "path": "config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "  \"appTitle\" : \"Trajectory\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "  \"logLevel\" : \"INFO\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "  \"userPrefsFilePath\" : \"preferences.json\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 5
    }
  },
  {
    "path": "config/checkstyle/suppressions.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE suppressions PUBLIC"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\"-//Puppy Crawl//DTD Suppressions 1.1//EN\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\"http://checkstyle.sourceforge.net/dtds/suppressions_1_1.dtd\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csuppressions\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csuppress checks\u003d\"JavadocType\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "  \u003csuppress checks\u003d\"[a-zA-Z0-9]*\" files\u003d\"[\\\\/]test[\\\\/]*\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/suppressions\u003e"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "-": 9
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Trajectory is currently in development by a team who is currently taking CS2113 with designation [T16-1].  +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Mohd Aslam"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "image::m-aslam-mj2.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/m-aslam-mj2[github]] [\u003c\u003cm-aslam-mj2#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Responsibilities: Ensure that project deliverables are up to scratch, and that all deadlines are met in a timely fashion."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Tan Yuan Cai"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "image::harriuscai.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "{empty}[https://github.com/harriuscai[github]] [\u003c\u003charriuscai#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Role: Code Quality \u0026 Integration +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Responsibilities: Ensure that the code written by the team is of good quality; In charge of reviewing Pull Requests and merging them"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Gian Zhi Cai"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "image::zhicaizack.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "{empty}[https://github.com/zhicaizack[github]] [\u003c\u003czhicaizack#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Responsibilities: Help out with Testing and CI for Git, making sure the test are up to standards."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Nur Tristy Erna"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "image::tristyxxnana.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "{empty}[https://github.com/tristyxxnana[github]] [\u003c\u003ctristyxxnana#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Responsibilities: Ensures all documentations are filled appropriately without any errors."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Jomari Cruz"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "image::jomcruz93.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/jomcruz93[github]] [\u003c\u003cjomcruz93#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Role: UI/UX +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Responsibilities: Ensure that the user interface and user experience is intuitive and easy-to-use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 5,
      "m-aslam-mj2": 5,
      "zhicaizack": 4,
      "-": 40,
      "harriuscai": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "﻿\u003d Trajectory - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "By: `T16-1`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d User Authentication feature"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Trajectory will evolve into a full-fledged LMS, and will come equipped with a user authentication system that supports role-based access control for usage by students, faculty members, administrators and guests."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "The implementation will be spread across 2 classes: `UserController`, `AuthenticationController`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "When the user starts up the program, he\u0027ll be prompted to input in his email address, followed by his password. The credentials"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "are forwarded to `AuthenticationController#authenticate()`, whose job is to search for matching credentials in either the \u0027local storage\u0027 or a future DBMS."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "The inputted password is hashed, and compared to the saved hash of a matching account, if found. If the password is verified to match, the user is considered to have logged in, and his details"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "are loaded into the `UserController`, which serves as a reference class for other features to access for the details"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "of  the logged-in user, which among other thing includes the user ID, the user personal information and assigned role(s). If the password hash doesn\u0027t match, the user will be shown an error message."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, the user may execute commands. When viewing user-specific data, just as individual modules for students, the relevant controller  will access `UserController#getLoggedInUserId()` so that"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "the module controller can appropriately filter out modules that the user has permission to view or access."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "This also applies to actions -- only faculty members are allowed to create modules, and `UserController#getRole()` is queried to check whether the user has that role. An error message will be displayed if the user doesn\u0027t have the required role assigned. Users with the \u0027administrator\u0027 role are allowed to create users, and assign roles to them."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "The activity diagram right below is a summary of the login process."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "image::UserLoginActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Roles"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Pre-defined roles with non-changable \u0027hardcoded\u0027 permissions."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Limited in expansion. A user with a role cannot do any action belonging to a more powerful role, without being granted the entire set of powers for the higher role."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Role-Based Management System"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Allows for fine-grained permissions control. Can apply the need-to-know, and need-to-use principle to assign required permissions. For example, the module owner may want to see the gradebook"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "but prevent TAs from seeing it, although TAs can assign marks."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Harder to implement."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "//zcstart"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d Class Add feature"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "The add mechanism is facilitated by `ClassroomManager` supported by `StorageController`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "It makes use of the following operations:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `ClassroomManager#addClassroom()` -- Adds a new classroomList to the in-memory array list."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `ClassroomManager#readClassroomList()` -- Gets the classroom list from storage and converts it to a Classroom array list."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `ClassroomManager#saveClassroomList()` -- Converts the classroom array list and invokes the StorageController to save the current classroom list to file."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "These operations are used in the `ClassAddCommand` class under `ClassAddCommand#execute()`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Given below is an example usage scenario and how the add/list mechanism behaves at each step."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Step 1. The user launches the application for the first time. The `StorageController#retrieveData()` will retrieve all datasets saved locally."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Step 2. The user executes `class add c/16...` command to add a new classroom to Trajectory. The `class add` command calls the `ClassAddCommand#execute()`. The `ClassroomManager` will be instantiated and read the classroom list from the storage and converts the data from XmlAdaptedClassroom to the Classroom data type."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Step 3. The `classroomManager#saveClassroomList()` will be called to converts the classroom array list and invokes the StorageController to save the current classroom list to file. This is done by first converting our `Classroom` object into `XmlAdaptedClassroom` objects and saving it."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d Class List feature"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "The list mechanism is facilitated by `ClassroomManager` supported by `StorageController`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "It makes use the following operations:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `ClassroomManager#readClassroomList()` -- Gets the classroom list from storage and converts it to a Classroom array list."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `ClassroomManager#saveClassroomList()` -- Converts the classroom array list and invokes the StorageController to save the current classroom list to file."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `ClassroomManager#getClassroomList()` -- Gets the classroom list from the in-memory array list."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "These operations are used in the `ClassListCommand` class under `ClassListCommand#execute()`.."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Given below is an example usage scenario and how the add/list mechanism behaves at each step."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Step 1. The user launches the application for the first time. The `StorageController#retrieveData()` will retrieve all datasets saved locally."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Step 2. The user executes `class list` command to list all classrooms to Trajectory. The `class list` command calls the `ClassListCommand#execute()`. The `ClassroomManager` will be instantiated and read the classroom list from the storage and converts the data from XmlAdaptedClassroom to the Classroom data type."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Step 3. The classroom list with the corresponding classroom information will be appended to the with the support of the `StringBuilder` and displayed as a message successfully."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "image::classaddlist.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "//zcend"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "// tag::datatograph[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Gradebook Graph feature"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "The gradebook graph mechanism is an enhancement that will be released in the later versions, facilitated by \u0027Trajectory\u0027."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "It is stored internally in GradebookManager."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `gradebookManager#graphModuleSummary()` -- Converts data of all student grades from Array List to graph form"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `gradebookManager#graphStudentProgress()` -- Converts student data to present progress on module."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "These operations are exposed in the `GradebookManager` as `GradebookManager#graphModuleSummary()`, `GradebookManager#graphStudentProgress()` respectively."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Given below is an example usage scenario and how the gradebook data-to-graph mechanism behaves at each step."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Step 1. The user launches the application for the first time. The StorageController which interacts with #xmlAdaptedGradebook to retrieve data from Array List using #retrieveData."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Step 2. The user executes `gradebook find m/cs2113 i/Finals` command to find the relevant gradebook component. The `find` command calls `GradebookManager#findGradebookComponent()`, which finds and filters the Array List to the relevant search."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Step 3. The user executes `gradebook graph student`. GradebookManager#graphStudentProgress will convert the Array List to graph form and display to the user."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "If a command fails its execution, it will not call `Gradebook#GradebookManager()`, so Trajectory state will not be saved into the `GradebookManager`."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Step 4. The user now decides to export graph according to the progress of a student, and that action is done by executing the `gradebook graph student` command. This command will call `GradebookManager#graphStudentProgress()`, which then displays the graph of the students progress."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "image::dataToGraphActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How graph-to-data executes"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* **Alternative 1 (current choice):** Individual command knows how to export accordingly."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** Pros: Will use less memory (e.g. only execute command when needed)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** Cons: Parameters and prefixes must be entered correctly before running command."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* **Alternative 2:** Saves the entire Trajectory."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** Cons: Might result in low performance due to high memory usage."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the data-to-graph commands"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the data before exporting."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** Pros: Easy data structure to use for any graph."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** Cons: Large list of data might require significant memory."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* **Alternative 2:** Use `GradebookManager\u0027 for data-to-graph export"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** Cons: Requires dealing with commands that needs to interact with storage controller or xml adapters directly but command should not have direct interaction from StorageController."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "// end::datatograph[]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "// tag::modulebidding[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d [Proposed] Module bidding feature"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "The module bidding feature is an enhancement that will make it easier to assign students to modules in `Trajectory`."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "It is designed with the module enrolment limits in mind, and the aim to give students a certain degree of flexibility"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "in choosing the modules they want. At the moment, it is planned to store the feature in ModuleManager, but it may be"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "abstracted into its own class if it proves to be necessary."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "The module bidding feature will implement the following features:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `ModuleManager#startBiddingRound()` -- Starts a bidding round for a module."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `ModuleManager#closeBiddingRound()` -- Closes the bidding round for a module."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `ModuleManager#placeBid()` -- Places a student\u0027s bid on the module they desire."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `ModuleManager#retractBid()` -- Retracts a student\u0027s bid from a module for which they previously bid."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `ModuleManager#assignSuccessfulStudents() -- Assigns the students with successful bids to the module."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "These operations will be exposed in the `ModuleManager` class until there is a need for abstraction."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Given below is an example usage scenario and how the module bidding mechanism will behave at each step."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Step 1. The teacher can start a bidding round for one of his/her modules using the CLI. The command will be routed to"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "`ModuleManager#startBiddingRound()` with the module code to indicate that bidding has opened for that module. This will"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "also update the status of the module to inform students that they may now start placing bids."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Step 2. A student can place his/her bid for a module with an active bidding round. He/she will need to enter the number"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "of points they wish to use in their bid. The input will be parsed to `ModuleManager#placeBid()` with the module code and"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "the student\u0027s ID."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Step 3. Should the student decide that he/she is no longer interested in the module, he/she may retract his/her bid by"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "using the CLI and entering the module\u0027s code. This will invoke `ModuleManager#retractBid()` and the bid will be retracted."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Step 4. When the time is past the intended duration of the bidding round, the bidding round can be closed automatically"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "via a call to `ModuleManager#closeBiddingRound()`. When the bidding round has closed, the status will be updated to"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "reflect it, and students will no longer be able to place bids for the module."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "The teacher may close the bidding round earlier by entering the command in the CLI."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Step 5. After the bidding round has closed, Trajectory will decide which students are successful in their bid by invoking"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "`ModuleManager#assignSuccessfulStudents()`. This will also assign the successful students to the module and deduct their"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "bid points. The students who were unsuccessful in their bid will have their bid points refunded to their account."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "The following activity diagram summarizes the whole module bidding process:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "image::moduleBiddingActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the module bidding will work"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Alternative 1 (current choice): Teacher has to manually open a bidding round."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** Cons: May result in inconsistencies between the planned start time and the actual start time, thus causing frustration"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "to the students."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Alternative 2: Teacher can input the start time for a module\u0027s bidding round"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** Pros: The actual start time will be consistent and reliable, leading to user (student) satisfaction."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** Cons: More difficult to implement; Handling date objects is tricky because there are many popular date formats."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "// end::modulebidding[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::noteimportexport[]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003d\u003d\u003d Notes data to/from Google Calendar feature"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003d\u003d\u003d\u003d Feature Description:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "*EXPORT :* +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "The user will be able to export notes from this application to a CSV file that follows the formatting required for importing calendar files to Google Calendar. The exporting process can be invoked by the user by entering the command below."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "*Command: `note export`*"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* The command `note export` will create a file with a .csv extension on the local storage."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* Invoking the command above by itself will convert all notes data saved in the application to CSV format."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* It can be extended to perform more specific instructions. The following arguments may be used:"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "** `note export [m/MODULE_CODE] [m/MODULE_CODE]...`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "*** Specifying the MODULE_CODE argument allows the user to export notes from one or more selected modules only."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "A possible implementation of exporting to CSV is provided below. +"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "1. Assuming that notes data are currently present in Trajectory, the user can invoke the `note export` command to begin exporting. +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "2. A parser class will be used to generate the correct formatting for the Google Calendar. +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "3. A CSV API will then be used to handle the writing to CSV. The file will be saved to a default directory in the user\u0027s local storage. +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "*IMPORT :* +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "The user will be able to import the data from a CSV file to generate a proper representation of the Note model. The importing process can be invoked by the user by entering the command below."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "*Command: `note import`*"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* The command will populate the notes data in the application from an existing CSV file."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* It requires that the user specify the directory of the file."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "** Example: `note import C:\\MyData\\notes.csv`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* However, importing from an external source will overwrite existing notes data in Trajectory."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "A possible implementation of importing from CSV is provided below. +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "1. The user calls the import command to get data from a CSV file. +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "2. A CSV utility class will be used to fetch the file. +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "3. It will then be passed to a parser class that will handle the conversion to the Note model. +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "4. The converted model will be copied to the Note Model list. +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "`Due to the nature of Google Calendar\u0027s data fields, the Note Management feature needs to be enhanced to have mandatory input fields that satisfies the minimum requirements for Google Calendar imports.`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "// end::noteimportexport[]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* faculty members of any education institutions"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* has a need to manage a significant number of students"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Value proposition*: manage students faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "|`* * *` |teacher |add students |keep track of students that are currently in the institution"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "|`* * *` |teacher |remove students |remove students who have graduated or are no longer with the institution"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "|`* * *` |teacher |find students |get relevant student details, such as contact information"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "|`* * *` |teacher |list students |look at all the students that are currently in the institution"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "|`* *` |teacher |import students |import students from perhaps an existing LMS solution"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "|`* *` |teacher |export students |have a copy of my students data set for possible import into another system"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "|`* *` |teacher |add course |assign students to courses and keep track of who is in which course"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "|`* *` |teacher |delete course |delete courses that may no longer be in use"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "|`* *` |teacher |list courses |view all courses that exist within the institution"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "|`* *` |teacher |list student list by course |view all students taking a certain course so I can plan my module enrollment better"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "|`* * *` |teacher |add modules |manage my module matters more easily"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "|`* * *` |teacher |update modules |change the details of my modules after I have created them"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "|`* * *` |teacher |remove modules |delete modules that I accidentally created"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "|`* * *` |teacher |archive modules |remove modules that I am no longer actively teaching, and keep it as a historical record instead"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "|`* * *` |teacher |find modules |check if I have already created the module, and view its details if it exists in the system"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "|`* * *` |teacher |list modules |see all the modules I am currently managing"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "|`* * *` |teacher |enrol students in a module |keep track of the students taking my various modules"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "|`* *` |teacher |assign a TA |get assistance in managing the module"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "|`* * *` |teacher |create a class |assign students to the class"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "|`* * *` |teacher |list a class |display information of the class"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "|`* * *` |teacher |delete a class |remove a class that is created wrongly"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "|`* * *` |teacher |assign student to class |add students to a class in the event that some students still have not signed up for a slot when classes begin"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "|`* * *` |teacher |unassign student from class |remove a student from a class to prevent clashes in his/her timetable, or the student has dropped out of school, or if he/she has not paid his/her school fees"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "|`* * *` |teacher |modify class enrollment limit |set class enrollment limits so that the classes that I’m teaching or my TAs are teaching are not over-subscribed."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "|`* * *` |teacher |access class attendance list |access and view the class attendance to see which students are present/absent"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "|`* * *` |teacher |mark class attendance list |mark the attendance for every present student"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "|`* * *` |teacher |modify class attendance list |alter a wrongly-marked attendance for a specific student"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "|`* * *` |teacher |add grade components |differentiate the grade components in a module (E.g. mid term test, finals examination)"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "|`* * *` |teacher |edit grades of students |change students marks after reviewing"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "|`* * *` |teacher |delete grade item |remove after an incorrect input of grade item"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "|`* * *` |teacher |list grades of students |monitor my students progress"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "|`* *` |teacher |list all grade components |view all the grade components that I have added to my module"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "|`* * *` |teacher |assign grades of students |keep track of the grades that I have given out to students"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "|`* * *` |teacher |add notes |keep track of important things and also my own teaching progress"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "|`* * *` |teacher |delete notes |remove completed tasks or discard those that are no longer needed"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "|`* * *` |teacher |view saved notes |easily check up on important things I could have forgotten"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "|`* * *` |teacher |edit notes from modules |efficiently make changes to my notes if needed without deleting and then adding a new one"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |teacher |assign priorities to notes |make effective planning by looking for notes with higher importance"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |teacher |attach deadlines to notes |keep track of upcoming deadlines and important dates"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "|`* *` |teacher |find specific notes | search for notes quickly without having to go through an entire list"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "(For all use cases below, the *System* is `Trajectory` and the *Actor* is the `teacher`, unless specified otherwise)"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Add Student"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* NIL"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  Teacher adds student to system."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "2.  System adds student to system, and show a confirmation message."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2b. Teacher enters improperly formatted command."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2b1. System displays the proper format for usage of the command."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2c. Student already exists in system."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2c1. System shows \u0027duplicate student\u0027 message."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Remove Student"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* Student must exist in the system."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  Teacher removes student from system."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "2.  System removes student to system, and show a confirmation message."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2b. Teacher enters improperly formatted command."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2b1. System displays the proper format for usage of the command."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2c. Student not found in system."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2c1. System shows \u0027invalid student\u0027 message."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Find Student"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* NIL"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  Teacher finds student with entered details."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "2.  System locates student details and displays it to the teacher."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2b. Teacher enters improperly formatted command."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2b1. System displays the proper format for usage of the command."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2c. Student not found in system."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2c1. System shows \u0027invalid student\u0027 message."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: List Students"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* NIL"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  Teacher lists students."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2.  System displays list of all students by default."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2b. Teacher enters improperly formatted command."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2b1. System displays the proper format for usage of the command."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2c. There are no students in the system."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2c1. System shows \u0027no students in system\u0027 message."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Export All Students To File"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* There should be at least 1 student."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "1.  Teacher exports all students to file."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "2.  System exports all students to file and display confirmation message."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2b. Teacher enters improperly formatted command."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2b1. System displays the proper format for usage of the command."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2c. Invalid save location."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2c1. System shows \u0027invalid save location\u0027 message."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2d. No students to export."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2d1. System shows \u0027no students to export\u0027 message."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "\u003d\u003d\u003d Use case: Import students from file"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* A file containing properly formatted data should exist."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "1.  Teacher imports students from file."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "2.  System imports students from file and display confirmation message."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2b. Teacher enters improperly formatted command."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2b1. System displays the proper format for usage of the command."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2c. Invalid file location."
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2c1. System shows \u0027invalid file location\u0027 message."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2d. File in invalid format."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2d1. System shows \u0027invalid file format\u0027 message."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "\u003d\u003d\u003d Use case: Add course"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* NIL"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "1.  Teacher adds course."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "2.  System adds course to system, and show a confirmation message."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2b. Teacher enters improperly formatted command."
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2b1. System displays the proper format for usage of the command."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2c. Course already exists in system."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2c1. System shows \u0027duplicate course\u0027 message."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "\u003d\u003d\u003d Use case: List courses"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* NIL"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "1.  Teacher lists courses."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "2.  System displays list of all courses."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2b. Teacher enters improperly formatted command."
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2b1. System displays the proper format for usage of the command."
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* 2c. There are no courses in the system."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "** 2c1. System shows \u0027no courses in system\u0027 message."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "+"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d Use case: Add module"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TO BE INSERTED | STATE NIL IF NONE"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "1.  Teacher wants to add a module to the system."
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "2.  System successfully adds the module."
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2b. Teacher enters the wrong parameter prefix."
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2b1. System displays the correct format for the command."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2c. Teacher enters a module code that already exists in the system."
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2c1. System informs the user of the existence of the module."
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2d. Teacher fills in the prerequisites with module codes that don’t exist."
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2d1. System informs the user of the non-existing module codes."
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d Use case: Update module"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TO BE INSERTED | STATE NIL IF NONE"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "1.  Teacher wants to edit a module to the system."
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "2.  System successfully saves the changes made to the module."
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2b. Teacher enters the wrong parameter prefix."
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2b1. System displays the correct format for the command."
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2c. Teacher enters a module code that doesn’t exist in the system."
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2c1. System informs the user that the module doesn’t exist."
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2d. Teacher fills in the prerequisites with module codes that don’t exist."
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2d1. System informs the user of the non-existing module codes."
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d Use case: Remove module"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TO BE INSERTED | STATE NIL IF NONE"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "1.  Teacher wants to delete a module in the system."
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "2.  System prompts for confirmation to delete the module."
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "3.  Teacher confirms the deletion of the module."
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "4.  System successfully deletes the module."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2b. Teacher enters the wrong parameter prefix."
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2b1. System displays the correct format for the command."
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2c. Teacher enters a module code that doesn’t exist in the system."
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2c1. System informs the user that the module doesn’t exist."
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 3a. Teacher rejects the confirmation to delete the module."
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d Use case: Find module"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TO BE INSERTED | STATE NONE IF NONE"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  Teacher searches for a module with some module codes as keywords."
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2.  System lists all the active modules that match any of the keywords."
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 2b. Teacher enters keywords that do not match any modules."
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 2b1. System informs the user that no active modules were found."
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 2c. Teacher enters the `--all` option in the command"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 2c1. System displays all matching modules including archived modules."
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d Use case: List modules"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TO BE INSERTED | STATE NIL IF NONE"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  Teacher wants to see all the active modules in the system."
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2.  System lists all the active modules."
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 2b. Teacher enters the `--all` option in the command"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 2b1. System displays all matching modules including archived modules."
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Archive module"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TO BE INSERTED | STATE NIL IF NONE"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  Teacher wants to archive a module in the system."
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2.  System prompts for confirmation to archive the module."
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "3.  Teacher confirms archiving of the module."
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "4.  System successfully archives the module."
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 2b. Teacher enters the wrong parameter prefix."
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 2b1. System displays the correct format for the command."
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 2c. Teacher enters a module code that doesn’t exist in the system."
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 2c1. System informs the user that the module doesn’t exist."
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 3a. Teacher rejects the confirmation to delete the module."
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d Use case: Enrol students in modules"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* TO BE INSERTED | STATE NIL IF NONE"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "1.  Teacher wants to enrol students in a module."
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "2.  System successfully enrols the students in the module."
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2b. Teacher enters the wrong parameter prefix."
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2b1. System displays the correct format for the command."
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2c. Teacher enters the wrong email format."
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2c1. System displays the correct format for the command."
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2d. Teacher enters the command without any matric no. and emails."
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2d1. System displays the correct format for the command."
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2e. Teacher enters a module code that doesn’t exist in the system."
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2e1. System informs the user that the module doesn’t exist in the system."
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2f. Teacher wants to enrol a student that doesn’t exist in the system."
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2f1. System informs the user that the student doesn’t exist in the system."
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d Use case: Assign a TA"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* TO BE INSERTED | STATE NIL IF NONE"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "1.  Teacher assigns a student as a TA of a module."
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "2.  System successfully assigns the student as a TA for the module."
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2b. Teacher enters the wrong parameter prefix."
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2b1. System displays the correct format for the command."
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2c. Teacher enters the wrong email format."
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2c1. System displays the correct format for the command."
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2d. Teacher enters the command without any matric no. and emails."
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2d1. System displays the correct format for the command."
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2e. Teacher enters a module code that doesn’t exist in the system."
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2e1. System informs the user that the module doesn’t exist in the system."
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* 2f. Teacher wants to enrol a student that doesn’t exist in the system."
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "** 2f1. System informs the user that the student doesn’t exist in the system."
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Add Grade Component"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Module code must exist."
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Component name must not already exist in Trajectory."
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Gradebook component will not be added if it does not meet validation requirements (Duplicate results, empty inputs etc)"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "1. Teacher creates grade component."
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2. System indicates success message."
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 2b. Teacher enters the wrong parameter prefix."
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 2b1. System displays the correct format for the command."
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 2c. Teacher enters a component name that already exists to module code."
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 2c1. System informs the user that component name already exists to module code."
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 2d. Teacher enters a non-integer input for maximum marks and weightage."
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 2d1. System informs the user of incorrect input."
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 2d. Teacher does not enter any inputs after prefix."
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 2d1. System informs the user of invalid input."
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Update Grade Component"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Grade component and corresponding module code must exist."
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Percentage of grade must not exceed 100%."
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Total sum of weightage for all grade components must not exceed 100%."
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "1. Teacher updates grade component."
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2. System requests for confirmation by displaying input."
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "3. Teacher confirms request."
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "4. System indicates success message."
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 1a. System detects an error in the entered data."
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1a1. System displays message and format corresponding to error."
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1a2. Teacher enters new data."
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Steps 1a1-1a2 are repeated until the data entered is correct."
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* *a. At any time, teacher chooses to cancel updating a grade component."
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** *a1. System requests to confirm the cancellation."
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** *a2. Teacher confirms request."
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Remove Grade Component"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Grade component must exist."
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Corresponding module must exist."
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Deleting grade component will also delete any grade items associated to it."
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "1. Teacher removes grade component."
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2. System indicates success message."
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 2a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 2a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Find Grade Component"
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Grade component must exist."
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "1. Teacher finds grade component."
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "2. System displays details on selected grade component."
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 1a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 1b. Teacher enters the wrong parameter prefix."
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1b1. System displays the correct format for the command."
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: List Grade Components"
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Module must exist."
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* NIL"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "1. Teacher lists grade component."
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2. System displays list."
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 1a. System detects an error in the entered data."
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1a1. System displays message and format corresponding to error."
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes from step 1."
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: List Students Grades"
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Students must be enrolled to the module."
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1. Teacher lists students grades."
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2. System displays list."
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "+"
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 1a. System detects an error in the entered data."
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1a1. System displays message and format corresponding to error."
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1a2. Teacher enters new data."
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Steps 1a1-1a2 are repeated until the data entered is correct."
      },
      {
        "lineNumber": 2034,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2035,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 2036,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2037,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* *a. At any time, teacher chooses to cancel listing students grades."
      },
      {
        "lineNumber": 2038,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2039,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** *a1. System requests to confirm the cancellation."
      },
      {
        "lineNumber": 2040,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** *a2. Teacher confirms request."
      },
      {
        "lineNumber": 2041,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2042,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2043,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2044,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2045,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2046,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Assign Student Grade"
      },
      {
        "lineNumber": 2047,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2048,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2049,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Students must be enrolled to the module."
      },
      {
        "lineNumber": 2050,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Grade item details(MAX_MARKS, PERCENTAGE OF GRADE) must exist."
      },
      {
        "lineNumber": 2051,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2052,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2053,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2054,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2055,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2056,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2057,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2058,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1. Teacher assigns student a mark."
      },
      {
        "lineNumber": 2059,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2. System requests for confirmation."
      },
      {
        "lineNumber": 2060,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "3. Teacher confirms request."
      },
      {
        "lineNumber": 2061,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "4. System indicates success message."
      },
      {
        "lineNumber": 2062,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2063,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2064,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2065,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2066,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2067,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 1a. System detects an error in the entered data."
      },
      {
        "lineNumber": 2068,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2069,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1a1. System displays message and format corresponding to error."
      },
      {
        "lineNumber": 2070,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1a2. Teacher enters new data."
      },
      {
        "lineNumber": 2071,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2072,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Steps 1a1-1a2 are repeated until the data entered is correct."
      },
      {
        "lineNumber": 2073,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2074,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 2075,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2076,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* *a. At any time, teacher chooses to cancel assigning students grades."
      },
      {
        "lineNumber": 2077,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2078,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** *a1. System requests to confirm the cancellation."
      },
      {
        "lineNumber": 2079,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** *a2. Teacher confirms request."
      },
      {
        "lineNumber": 2080,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2081,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2082,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2083,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2084,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2085,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Add Class"
      },
      {
        "lineNumber": 2086,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2087,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2088,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2089,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Module code exists in data file."
      },
      {
        "lineNumber": 2090,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2091,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2092,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2093,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2094,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2095,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2096,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2097,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "1.  User enters command to create classroom."
      },
      {
        "lineNumber": 2098,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "2.  Classroom is created for the module."
      },
      {
        "lineNumber": 2099,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "3.  System displays message of successful creation of class."
      },
      {
        "lineNumber": 2100,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2101,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2102,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2103,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2104,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2105,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* 1a. User entered invalid command."
      },
      {
        "lineNumber": 2106,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2107,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "** 1a1. System shows ‘invalid format’ error."
      },
      {
        "lineNumber": 2108,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2109,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2110,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2111,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2112,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2113,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Update Class Enrollment Limits"
      },
      {
        "lineNumber": 2114,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2115,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2116,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2117,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Class must exist in data file."
      },
      {
        "lineNumber": 2118,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2119,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2120,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2121,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2122,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2123,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2124,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2125,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  User enters command to modify class enrollment limits."
      },
      {
        "lineNumber": 2126,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2.  Class enrollment limits gets updated."
      },
      {
        "lineNumber": 2127,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "3.  System displays successful modification of class enrollment limits."
      },
      {
        "lineNumber": 2128,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2129,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2130,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2131,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2132,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2133,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* 1a. User entered invalid command."
      },
      {
        "lineNumber": 2134,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2135,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "** 1a1. System shows ‘invalid format’ error."
      },
      {
        "lineNumber": 2136,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2137,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2138,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2139,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2140,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2141,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Update Class Attendance List"
      },
      {
        "lineNumber": 2142,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2143,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2144,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2145,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Class must exist in data file."
      },
      {
        "lineNumber": 2146,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2147,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2148,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2149,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2150,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2151,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2152,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2153,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  User enters command to modify class attendance list."
      },
      {
        "lineNumber": 2154,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2.  The class attendance list is updated."
      },
      {
        "lineNumber": 2155,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "3.  System displays message of successful modification of class attendance list."
      },
      {
        "lineNumber": 2156,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2157,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2158,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2159,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2160,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2161,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* 1a. User entered invalid command."
      },
      {
        "lineNumber": 2162,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2163,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "** 1a1. System shows ‘invalid format’ error."
      },
      {
        "lineNumber": 2164,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2165,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2166,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2167,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2168,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d Use case: List Class"
      },
      {
        "lineNumber": 2169,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2170,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2171,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2172,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* Class(es) must exists in data file."
      },
      {
        "lineNumber": 2173,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2174,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2175,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2176,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2177,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2178,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2179,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2180,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "1.  User enters command to list class(es)."
      },
      {
        "lineNumber": 2181,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "2.  All Classroom information is listed."
      },
      {
        "lineNumber": 2182,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "3.  System displays message of successful listing of class(es)."
      },
      {
        "lineNumber": 2183,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2184,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2185,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2186,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2187,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2188,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* 1a. User entered invalid command."
      },
      {
        "lineNumber": 2189,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2190,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "** 1a1. System shows ‘invalid format’ error."
      },
      {
        "lineNumber": 2191,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2192,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2193,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2194,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2195,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Remove Class"
      },
      {
        "lineNumber": 2196,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2197,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2198,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2199,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Module code exists in data file."
      },
      {
        "lineNumber": 2200,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2201,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2202,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2203,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2204,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2205,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2206,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2207,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  User enters command to delete a class from module."
      },
      {
        "lineNumber": 2208,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2.  Classroom is deleted from module."
      },
      {
        "lineNumber": 2209,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "3.  System displays message of successful deletion of class from module."
      },
      {
        "lineNumber": 2210,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2211,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2212,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2213,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2214,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2215,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* 1a. User entered invalid command."
      },
      {
        "lineNumber": 2216,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2217,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "** 1a1. System shows ‘invalid format’ error."
      },
      {
        "lineNumber": 2218,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2219,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2220,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2221,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 1b. Specified class does not belong to module."
      },
      {
        "lineNumber": 2222,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2223,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1b1. System displays specified class does not belong to module error."
      },
      {
        "lineNumber": 2224,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2225,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2226,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2227,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2228,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2229,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Assign Student To Class"
      },
      {
        "lineNumber": 2230,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2231,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2232,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2233,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Student exists in data file."
      },
      {
        "lineNumber": 2234,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2235,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2236,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2237,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2238,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2239,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2240,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2241,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  User enters command to assign a student to class."
      },
      {
        "lineNumber": 2242,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2.  Student gets assigned to class."
      },
      {
        "lineNumber": 2243,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "3.  System displays message of successful assignment of student to class."
      },
      {
        "lineNumber": 2244,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2245,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2246,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2247,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2248,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2249,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* 1a. User entered invalid command."
      },
      {
        "lineNumber": 2250,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2251,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "** 1a1. System shows ‘invalid format’ error."
      },
      {
        "lineNumber": 2252,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2253,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2254,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2255,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 1b. Class doesn’t exist."
      },
      {
        "lineNumber": 2256,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2257,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1b1. System displays class not found error."
      },
      {
        "lineNumber": 2258,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2259,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2260,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2261,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2262,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2263,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Unassign Student From Class"
      },
      {
        "lineNumber": 2264,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2265,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2266,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2267,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Student exists in data file."
      },
      {
        "lineNumber": 2268,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2269,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2270,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2271,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2272,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2273,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2274,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2275,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  User enters command to unassign a student from class."
      },
      {
        "lineNumber": 2276,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2.  Student gets unassigned from class."
      },
      {
        "lineNumber": 2277,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "3.  System displays message of successful unassignment of student from class."
      },
      {
        "lineNumber": 2278,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2279,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2280,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2281,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2282,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2283,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* 1a. User entered invalid command."
      },
      {
        "lineNumber": 2284,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2285,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "** 1a1. System shows ‘invalid format’ error."
      },
      {
        "lineNumber": 2286,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2287,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2288,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2289,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 1b.  Module code doesn’t exist."
      },
      {
        "lineNumber": 2290,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2291,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1b1. System displays module not found error."
      },
      {
        "lineNumber": 2292,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2293,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2294,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2295,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 1c.  Specified student does not belong to class."
      },
      {
        "lineNumber": 2296,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2297,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 1c1. System displays specified student does not belong to class error."
      },
      {
        "lineNumber": 2298,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "+"
      },
      {
        "lineNumber": 2299,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2300,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2301,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2302,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2303,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Mark Class Attendance List"
      },
      {
        "lineNumber": 2304,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2305,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2306,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2307,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Class must exist in data file."
      },
      {
        "lineNumber": 2308,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2309,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2310,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2311,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2312,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2313,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2314,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2315,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "1.  User enters command to mark class attendance."
      },
      {
        "lineNumber": 2316,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "2.  Class attendance is marked for specified student."
      },
      {
        "lineNumber": 2317,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "3.  System displays message of successful marking of class attendance list."
      },
      {
        "lineNumber": 2318,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2319,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2320,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2321,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2322,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2323,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* 1a. User entered invalid command."
      },
      {
        "lineNumber": 2324,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2325,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "** 1a1. System shows ‘invalid format’ error."
      },
      {
        "lineNumber": 2326,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2327,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2328,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2329,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* 1b. Specified student does not belong to class."
      },
      {
        "lineNumber": 2330,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2331,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "** 1b1. System displays specified student does not belong to class error."
      },
      {
        "lineNumber": 2332,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2333,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2334,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2335,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2336,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2337,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Access Class Attendance List"
      },
      {
        "lineNumber": 2338,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2339,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2340,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2341,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Class must exist in data file."
      },
      {
        "lineNumber": 2342,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2343,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2344,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2345,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2346,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2347,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2348,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2349,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "1.  User enters command to view class attendance list."
      },
      {
        "lineNumber": 2350,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "2.  System displays the class attendance list."
      },
      {
        "lineNumber": 2351,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2352,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2353,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2354,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2355,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2356,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* 1a. User entered invalid command."
      },
      {
        "lineNumber": 2357,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2358,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "** 1a1. System shows ‘invalid format’ error."
      },
      {
        "lineNumber": 2359,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "+"
      },
      {
        "lineNumber": 2360,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2361,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2362,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2363,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2364,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Add Note"
      },
      {
        "lineNumber": 2365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2366,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)*"
      },
      {
        "lineNumber": 2367,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2368,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Module must exist in data file."
      },
      {
        "lineNumber": 2369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2370,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2371,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2372,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2374,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2376,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Teacher requests to add a note to a module."
      },
      {
        "lineNumber": 2377,
        "author": {
          "gitId": "-"
        },
        "content": "2.  System prompts the teacher to enter his/her note."
      },
      {
        "lineNumber": 2378,
        "author": {
          "gitId": "-"
        },
        "content": "3.  Teacher types the note."
      },
      {
        "lineNumber": 2379,
        "author": {
          "gitId": "-"
        },
        "content": "4.  System adds the note to the module and displays a message that it is successfully added."
      },
      {
        "lineNumber": 2380,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2381,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2383,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2385,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 2386,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2387,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 2388,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2389,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2391,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The teacher decides to cancel."
      },
      {
        "lineNumber": 2392,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2393,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2395,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2396,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2397,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003d\u003d\u003d Use case: List Notes"
      },
      {
        "lineNumber": 2398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2399,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2401,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Notes must exist in data file."
      },
      {
        "lineNumber": 2402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2403,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2404,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2405,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2406,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2407,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2409,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "1.  Teacher requests to view the saved notes."
      },
      {
        "lineNumber": 2410,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "2.  System displays the complete numbered list of notes."
      },
      {
        "lineNumber": 2411,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2412,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2414,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2416,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 2417,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2418,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 2419,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2420,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2422,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* 2b. There are no saved entries of notes."
      },
      {
        "lineNumber": 2423,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2424,
        "author": {
          "gitId": "-"
        },
        "content": "** 2b1. System displays a message that no entries are found."
      },
      {
        "lineNumber": 2425,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2426,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2428,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2429,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2430,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003d\u003d\u003d Use case: Edit Note"
      },
      {
        "lineNumber": 2431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2432,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2434,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Note must exist in data file."
      },
      {
        "lineNumber": 2435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2436,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2437,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2438,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2439,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2440,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2442,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "1.  Teacher requests to list all notes."
      },
      {
        "lineNumber": 2443,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "2.  System displays the complete numbered list of notes."
      },
      {
        "lineNumber": 2444,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "3.  Teacher requests to edit a specific note in the list."
      },
      {
        "lineNumber": 2445,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "4.  System prompts the teacher to enter the modifications."
      },
      {
        "lineNumber": 2446,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "5.  Teacher can now modify the text."
      },
      {
        "lineNumber": 2447,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "6.  System saves the modified note and displays a message for the successful modification."
      },
      {
        "lineNumber": 2448,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2449,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2451,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2453,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 1a. Teacher gives an invalid command."
      },
      {
        "lineNumber": 2454,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2455,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 2456,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2457,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2459,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* 2a. There are no saved entries of notes."
      },
      {
        "lineNumber": 2460,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2461,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. System displays a message that no entries are found."
      },
      {
        "lineNumber": 2462,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2463,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2465,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 2466,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2467,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 3a1. System informs the user that the input is invalid."
      },
      {
        "lineNumber": 2468,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2469,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 2470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2471,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 5a. The teacher decides to cancel."
      },
      {
        "lineNumber": 2472,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2473,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 5a1. System cancels the editing process."
      },
      {
        "lineNumber": 2474,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2475,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2476,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2477,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2478,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2479,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Note"
      },
      {
        "lineNumber": 2480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2481,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2482,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2483,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Note must exist in data file."
      },
      {
        "lineNumber": 2484,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2485,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2487,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "1.  Teacher requests to list all notes."
      },
      {
        "lineNumber": 2488,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "2.  System displays the complete numbered list of notes."
      },
      {
        "lineNumber": 2489,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "3.  Teacher requests to delete a specific note in the list."
      },
      {
        "lineNumber": 2490,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "4.  System deletes the note and displays a message that it is successfully deleted."
      },
      {
        "lineNumber": 2491,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2492,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2494,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2496,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 1a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 2497,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2498,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 2499,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2500,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2502,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. There are no saved entries of notes in the module."
      },
      {
        "lineNumber": 2503,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2504,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. System displays a message that no entries are found."
      },
      {
        "lineNumber": 2505,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2506,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2508,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 3a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 2509,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2510,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 3a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 2511,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2512,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 2513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2514,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* 3b. The given index is invalid."
      },
      {
        "lineNumber": 2515,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2516,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "** 3b1. System informs the user that the input is invalid."
      },
      {
        "lineNumber": 2517,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 2518,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 2519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2520,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2521,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 2522,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Use case: Find Note"
      },
      {
        "lineNumber": 2523,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 2524,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Precondition(s)* :"
      },
      {
        "lineNumber": 2525,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2526,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Notes must exist in data file."
      },
      {
        "lineNumber": 2527,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 2528,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Guarantees* :"
      },
      {
        "lineNumber": 2529,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2530,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* TBC"
      },
      {
        "lineNumber": 2531,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 2532,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*MSS* :"
      },
      {
        "lineNumber": 2533,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 2534,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "1.  Teacher requests to find notes which contains a set of keywords."
      },
      {
        "lineNumber": 2535,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "2.  System displays the complete numbered list of notes found that contains the keyword(s)."
      },
      {
        "lineNumber": 2536,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "+"
      },
      {
        "lineNumber": 2537,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2539,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "*Extensions* :"
      },
      {
        "lineNumber": 2540,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 2541,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* 1a. Teacher enters an invalid command."
      },
      {
        "lineNumber": 2542,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "+"
      },
      {
        "lineNumber": 2543,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "** 1a1. System displays the list of valid commands."
      },
      {
        "lineNumber": 2544,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "+"
      },
      {
        "lineNumber": 2545,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 2546,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 2547,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* 2b. There are no entries found with the entered keyword(s)."
      },
      {
        "lineNumber": 2548,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "+"
      },
      {
        "lineNumber": 2549,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "** 2b1. System displays a message that no entries are found."
      },
      {
        "lineNumber": 2550,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "+"
      },
      {
        "lineNumber": 2551,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2553,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 2554,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 2555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 2556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2557,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ".  Privacy"
      },
      {
        "lineNumber": 2558,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "   *  Students’ and faculty members\u0027 \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e shouldn’t be disseminated without prior consent."
      },
      {
        "lineNumber": 2559,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ".  Data Retention"
      },
      {
        "lineNumber": 2560,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "   *  User data shouldn’t be retained after a certain amount of time after a student graduates to protect their personal data."
      },
      {
        "lineNumber": 2561,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ".  Cross-platform"
      },
      {
        "lineNumber": 2562,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "   *  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 2563,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ".  Responsiveness"
      },
      {
        "lineNumber": 2564,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "   *  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 2565,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ".  Ease of Use"
      },
      {
        "lineNumber": 2566,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "   *  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 2567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2568,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 2569,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 2570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2571,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 2572,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 2573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2574,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 2575,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 2576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2577,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 2578,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 2579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2580,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 2581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2582,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 2583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2584,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 2585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2586,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 2587,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 2588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2589,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 2590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2591,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 2592,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 2593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2594,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 2595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 2596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2597,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 2598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2599,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 2600,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 2601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2602,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 2603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2604,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 2605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2606,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 2607,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 2608,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 2609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2610,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 2611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2612,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 2613,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 2614,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 2615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2616,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 2617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 2619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2620,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 2621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2622,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 2623,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 2624,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2625,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 2626,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2627,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 2628,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 2629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2630,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 2631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2632,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 2633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2634,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 2635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2636,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 2637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2638,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 636,
      "m-aslam-mj2": 245,
      "zhicaizack": 229,
      "jomcruz93": 66,
      "-": 1077,
      "harriuscai": 385
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003d Trajectory - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-T16-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "By: `T16-1`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Trajectory is a lightweight management system for those who need a no-frills solution for managing students, modules and classes. It is built for users who prefer typing (CLI) over GUI interaction. Tempted to make the jump? Head on over to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ".  Download the program link:{repoURL}/releases[here]. [red]*(NOT AVAILABLE AT THIS TIME)*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ".  Copy the `.jar` file to your desired location."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ".  You may start using the app. Use `help` command for a brief listing of all commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Items in square brackets are optional e.g `c/MODULE_CODE [p/PREREQUISITES]` can be used as `c/CS2113 p/CS2040C` or as `c/CS2113`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[p/PREREQUISITES]...` can be used as `{nbsp}` (i.e. 0 times), `p/CS2040C`, `p/CS2040C p/CS1010` etc."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME e/EMAIL`, `e/EMAIL n/NAME` is also acceptable."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "\u003d\u003d\u003d Student and Course Management"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "\u003d\u003d\u003d\u003d Add Student : `student add`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Adds a student to the system. +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Format: student add n/NAME i/ADMIN_NUMBER c/COURSE_CODE p/MOBILE_NUMBER e/EMAIL a/ADDRESS"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `student add n/Tristy i/A0169999Z c/CS1 p/90002334 e/E0111342@u.nus.edu a/522 Tampines North 1`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `student add n/Megan Nicole c/CEG1 e/E0169113@u.nus.edu a/14 Changi South i/A0177897E p/92667921`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Update Student : `student edit`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Edits an existing student in the system. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Format: student edit INDEX [n/NAME] [i/ADMIN_NUMBER] [c/COURSE_CODE] [p/MOBILE_NUMBER] [e/EMAIL a/ADDRESS]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* Edits the student at the specified INDEX. The index refers to the index number shown in the displayed student list. The index must be a must be a positive integer 1,2,3,..."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* At least one of the optional fields must be provided"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* Existing values will be updated to the input values"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `student edit 1 p/99887890 a/14 Simei Avenue 1`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Edits the phone number and home address of the 1st student to be 99887890 and 14 Simei Avenue 1 respectively."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `student edit 2 a/14 Jurong East Street 91`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Edits only the address of the 2nd student to be 14 Jurong East Street 91."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "\u003d\u003d\u003d\u003d Select Student : `select`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Selects the student identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Format: `student select INDEX`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "\u003d\u003d\u003d\u003d Find Student by name/matric no : `student find` (find by matric no coming in v1.3)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Find student(s) whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Format:  student find [n/STUDENT_NAME] [i/MATRIC_NO]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* Display a list of students whose name or matric number matches the given keywords."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `student find n/Rachel`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Returns students whose first name or last name contains \u0027Rachel\u0027."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `student find i/A0168000L`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Return the student whose matriculation no matches \u0027A0168000L\u0027."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `student list` +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Selects the 2nd student in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `student find Betsy` +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Selects the 1st student in the results of the `find` command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Remove Student : `student delete`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Deletes the specified student from the system. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Format: student delete INDEX"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `student delete 2`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Deletes the 2nd person in the system"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* Deletes the student at the specified INDEX"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* The index must be a must be a positive integer 1,2,3,..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d List Students : `student list`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Shows a list of all students in the system. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Format: list students"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d Export Student : `student export [coming in v1.3]`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Exports students to a .csv file +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Format: student export LOCATION"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "****"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* Directory must be writable."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* There must be at least 1 student in the system."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `student export C:\\export`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Exports all students in .csv format to the \u0027export\u0027 folder in C drive."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "\u003d\u003d\u003d\u003d Add a course : `course add`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Adds a student to the system. +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Format: course_add n/COURSE_NAME c/COURSE_CODE f/FACULTY_NAME"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `course add n/Computer Engineering c/CEG1 f/School of Computing`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `course add n/Computer Science c/CS1 f/School of Computing`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "\u003d\u003d\u003d\u003d List all courses : `course list`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Shows a list of all courses in the system. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Format: course list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "\u003d\u003d\u003d\u003d Remove course : `course delete`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Deletes the specified course from the system +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Format: course delete c/COURSE_CODE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* `course delete CEG1`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "Deletes CEG1 from the course directory, if it exists."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d Module Management"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Add Module : `module add`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Adds a module to the system. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Format: `module add n/MODULE_NAME c/MODULE_CODE [p/PREREQUISITES]...`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Module code must be unique."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Prerequisite modules should be specified with the respective module codes."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Prerequisite modules must exist in the system."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module add n/EPP1 c/CG1111`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module add n/Software Engineering c/CS2113 p/CS2040C`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Update module : `module edit`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Edits an existing module in the system. +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Format: `module edit c/MODULE_CODE [n/MODULE_NAME] [p/PREREQUISITES]...`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Edits a module with the specified module code. The module code must exist in the system."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* When editing the module prerequisites, the existing prerequisites of the module will be removed i.e adding of prerequisites is not cumulative."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* You can remove all of the module’s prerequisites by typing `p/` without specifying any prerequisites after it."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module edit c/CG1111 n/Engineering Principles and Practices 1` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Edits the module name to `Engineering Principles and Practices 1`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module edit c/CS2113 p/` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Clears all existing prerequisites for the module."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Remove module : `module delete`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Deletes a module from the system. +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Format: `module delete c/MODULE_CODE`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* The module must already exist in the system."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* The user will be prompted to confirm the deletion of the module to prevent accidents."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module delete c/CS2113` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Deletes the module with module code `CS2113`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d Find module : `module find [coming in v1.3]`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Finds modules whose module codes contain any of the given keywords. This is useful for checking if certain module exists in the system. +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Format: `module find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* The archived module will no longer show up using the base module list command."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* The module must already exist in the system."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* The user will be prompted to confirm archiving the module to prevent accidents."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module find cs2113` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Returns `CS2113`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module find cs2113 CS2040c` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Returns `CS2113` and `CS2040C`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d List modules : `module list`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Shows a list of all modules in the system. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Format: `module list`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d Archive module : `module archive [coming in v1.3]`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Archives a module that is no longer being taught to keep it as a historical record. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Format: `module archive c/MODULE_CODE`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* The archived module will no longer show up using the base module list command."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* The module must already exist in the system."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* The user will be prompted to confirm archiving the module to prevent accidents."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `module archive c/CS2113` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Archives the module with module code `CS2113`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d Enrol Student : `module enrol [coming in v1.3]`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Enrols students into the specified module using their matriculation numbers or email addresses. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Format: `module enrol [i/MATRIC_NUMBER]... [e/EMAIL]...`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* The student(s) must already exist in the system."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module enrol i/A0161234B` +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Enrols a student with matric no. `A0161234B`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module enrol i/A0167263X i/A0179821B` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Enrols two students with matric no. `A0167263X` and `A0179821B`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module enrol e/e0191122@u.nus.edu` +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Enrols a student with email `e0191122@u.nus.edu`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module enrol e/e0191234@u.nus.edu e/e0161234@u.nus.edu` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Enrols two students with email `e0191234@u.nus.edu` and `e0161234@u.nus.edu`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Assign TA : `module assign [coming in v2.0]`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Assigns a student as a TA of the module. +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Format: `module assign [i/MATRIC_NUMBER] [e/EMAIL]`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* The student must already exist in the system."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* There can be many TAs in a module, or none at all."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module assign i/A0171234B` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Assigns the student with matric no. `A0171234B` as a TA."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* `module assign e/e0191234@u.nus.edu` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Assigns the student with email `e0191234@u.nus.edu` as a TA."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d Class Management"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d\u003d Add Class : `class add`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Creates a class and assigns it to a module for the system. +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Format: `class add c/CLASS_NAME m/MODULE_CODE e/MAX_ENROLLMENT`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Module code must exist before creating a class for the module."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `class add c/T16 m/CG1111 e/20` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Creates a class T16, assigns it to the module CG1111 with the max enrollment size of 20"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d\u003d Update Class Enrollment Limits : `class maxenroll [coming in v1.3]`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Modifies the max enrollment size for a class for the system. +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Format: `class maxenroll  c/CLASS_NAME e/NEW_MAX_ENROLLMENT_SIZE`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Class must exist before being able to modify the class enrollment limits"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `class maxenroll c/T16 e/20` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Modifies the new max class enrollment size for the class T16 to be 20"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d\u003d Update Class Attendance List : `class modattend [coming in v1.3]`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Modifies the class attendance list for the system. +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Format: `class modattend c/CLASS_NAME i/ADMISSION_NO`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Class must exist before modifying a student’s attendance"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* If current student is present, modifying will mark student as absent, vice versa"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `class modattend c/T16 i/A6942069M` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Modifies the attendance of the student of the admission number A6942069M for the class T16"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d\u003d List class : `class list`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Lists class(es) with information of the class for the system. +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Format: `class list`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* Class(es) must exist in order to be listed"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `class list` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Lists all the class(es) created."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Remove class : `class delete`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Deletes a class with students assigned to it for a module for the system. +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Format: `class delete c/CLASS_NAME m/MODULE_CODE`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* Class must exist in order to be deleted"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* Module code must exist and have a specified class assigned to it before deleting a class for the module"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `class delete c/T16 m/CG1111` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Deletes the class T16 from the module CG1111"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d\u003d Assign Student To Class : `class addstudent [coming in v1.3]`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Assigns a student to a class for the system. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Format: `class addstudent c/CLASS_NAME m/MODULE_CODE`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* Class must exist before assigning a student to the class"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `class addstudent c/T16 i/A6942069M` +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Adds a student of the admission number A6942069M to the class T16"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d\u003d Unassigning Student From Class : `class delstudent [coming in v1.3]`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Unassigns a student from the class for the system. +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Format: `class delstudent c/CLASS_NAME i/ADMISSION_NO`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* Class must exist before unassigning a student from the class"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* Student must be assigned to class in order to unassign them from the class"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `class delstudent c/T16 i/A6942069M` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Removes a student of the admission number A6942069M from the class T16"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "\u003d\u003d\u003d\u003d Modifying class enrollment limits : `class maxenroll [coming in v1.3]`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Modifies the max enrollment size for a class for the system. +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Format: `class maxenroll  c/CLASS_NAME e/NEW_MAX_ENROLLMENT_SIZE`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* Class must exist before being able to modify the class enrollment limits"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `class maxenroll c/T16 e/20` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Modifies the new max class enrollment size for the class T16 to be 20"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d Accessing class attendance list : `class listattend [coming in v1.3]`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Access the class attendance list for the system. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Format: `class listattend c/CLASS_NAME`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* Class must exist before being able to access the class attendance list"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `class listattend c/T16` +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Displays the class attendance list for the class T16"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d Marking class attendance list : `class markattend [coming in v1.3]`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Mark the class attendance list for a specified student for the system. +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Format: `class markattend c/CLASS_NAME i/ADMISSION_NO`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* Class must exist before being able to mark student available for class attendance"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* Student must be in the specified class in order to mark student present"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* `class markattend c/T16 i/A6942069M` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Marks the attendance of the student of the admission number A6942069M for the class T16"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d Modifying class attendance list : `class modattend [coming in v1.3]`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Modifies the class attendance list for the system. +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Format: `class modattend c/CLASS_NAME i/ADMISSION_NO`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Class must exist before being able to access the class attendance list"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "****"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `class listattend c/T16` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Displays the class attendance list for the class T16"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d Grade Management"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Add Grade Component : `gradebook add`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Creates a grade item to a module code. +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Format: `gradebook add m/MODULE_CODE i/ITEM mm/[MAX MARKS] w/[WEIGHTAGE]`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Module code must exist"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Component name must not already exist in Trajectory."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `gradebook add m/CS2113 i/Assignment 1 mm/60 w/50` +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Adds gradebook component, Assignment 1 with maximum marks of 60 and weightage of 50%, to module CS2040C."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d Update Grade Component : `gradebook update [coming in v1.3]`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Updates a grade item. +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Format: `gradebook update c/MODULE_CODE g/GRADE_ITEM [m/MARKS_MAX] [p/GRADE_PERCENTAGE]`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Gradebook component and module code must exist."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Percentage of grade must not exceed 100%."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Total sum of weightage for all grade component must not exceed 100%."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "****"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `gradebook edit c/CS2040C g/Assignment 1 m/20` +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Updated overall marks of CS2040C Assignment 1 to 20 marks."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `gradebook add c/CS2040C g/Final Examinations p/50` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Updated Final Examinations grade percentage to 50%."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Remove Grade Component : `gradebook delete`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Removes a grade item to a module code. +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Format: `gradebook remove c/MODULE_CODE m/GRADE_ITEM\u0027"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "****"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Module and grade item must exist."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "****"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `gradebook remove m/CS2040C i/Assignment 1` +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Deletes Assignment 1 gradebook component from module CS2040C."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Find Grade Component : `gradebook find`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Finds gradebook component. +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Format: `gradebook find m/MODULE_CODE i/GRADE_ITEM\u0027"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "****"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Grade component to module must exist."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "****"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `gradebook find m/CS2040C i/Assignment 1` +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Finds Assignment 1 gradebook component to module CS2040C."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d List Grade Components : `gradebook list`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Lists all the grade items in a certain module. +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Format: `gradebook list\u0027"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `gradebook list` +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Lists all the grade items found in Trajectory."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d List Students Grades : `gradebook list students [coming in v1.3]`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Lists grades of all students enrolled in the module. +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Format: `gradebook list students c/MODULE_CODE\u0027"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "****"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* Student must be enrolled in the module."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "****"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `gradebook list students c/CS2040C` +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Lists all grades obtained by students in CS2040C module."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "\u003d\u003d\u003d\u003d Assign Student Grade : `gradebook assign [coming in v1.3]`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Assigns marks to a student. +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Format: `gradebook assign c/MODULE_CODE g/GRADE_ITEM i/MATRIC_NUMBER m/MARKS\u0027"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "****"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Students must be enrolled to the module."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Grade item details (MAX_MARKS, PERCENTAGE OF GRADE) must exist."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Marks assigned must not exceed MAX_MARKS"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "****"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `gradebook assign c/CS2040C g/Assignment 1 i/A0168111 m/10` +"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "Assigns 10 marks to CS2040C student with matric number A0168111."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Notes Management"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d Add Note : `note add`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a note to a module. +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `note add m/MODULE_CODE [p/PRIORITY_LEVEL] [d/DATE]`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "NOTE: `*The optional parameter PRIORITY_LEVEL will be available from v1.4*` +"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "- PRIORITY_LEVEL \u003d { 1 \u003d LOW, 2 \u003d MEDIUM, 3 \u003d HIGH } +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "- If the PRIORITY_LEVEL is omitted, a default value of 1 (LOW) will be assigned to the created note. +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "- The DATE parameter follows the `DD.MM.YYYY` formatting only. *(Validation coming in v1.3)*"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "* Upon entering the `note add` command, the system will prompt the user to type his/her note."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "* The user can choose to cancel anytime during the note editing stage."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "* `note add m/CS2113` +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "This tells the system that the note is to be saved in the CS2113 module with no date."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* `note add m/CS2113 d/31.12.2113` +"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "This tells the system that the note is to be saved in the CS2113 module with a date (31 Dec 2113)."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003d\u003d\u003d\u003d Edit note : `note edit [coming in v1.3]`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Edits an existing note. +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Format: `note edit INDEX m/MODULE_CODE [d/DATE]`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Edits the note with the specified INDEX."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* The INDEX refers to the corresponding number of each note when `note list` command is invoked."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* Upon entering the `note edit` command, the system will prompt the user to type his/her modifications to the note."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* The user can choose to cancel anytime during the note editing stage."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `note list m/CS1010` +"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "A list of all notes saved in CS1010 module is displayed. +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "`note edit 3 m/CS1010 d/10.10.2019` +"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "The user will now be able to edit the note that corresponds to INDEX\u003d3 in the list. The modified note will be saved with its assigned DATE changed to 10/10/2019."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003d\u003d\u003d\u003d Delete note : `note delete`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes a specific note. +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Format: `note delete INDEX`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the note with the specified INDEX."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* The INDEX refers to the corresponding number of each note when `note list` command is invoked."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "* `note list m/CS2040C` +"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "A list of all notes saved in CS2040C module is displayed. +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "`note delete 1` +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the note that corresponds to INDEX\u003d1 in the list."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003d\u003d\u003d\u003d Find note : `note find [coming in v1.3]`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Search and display existing notes using keywords. +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Format: `note find k/KEYWORD [k/KEYWORD]..`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "* Multiple keywords can be accepted."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "* A minimum of one keyword is required for the command to work."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "* Keywords are not case-sensitive."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "* Each keyword must consist only of a single word."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* `note find k/git k/OOP` +"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Lists all notes which contain both keywords \"git\" and \"OOP\"."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d\u003d List notes : `note list`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Shows a list of all saved notes. +"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "Format: `note list [m/MODULE_CODE] [P]`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "NOTE: `*The optional parameter P will be available from v1.4*` +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "- Adding the `P` parameter allows the user to view notes based on their assigned PRIORITY_LEVEL from highest to lowest. +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "- It is not case-sensitive, hence the user can use either lowercase or uppercase. +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "- If `P` is omitted, the list displayed is sorted by the order of creation."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "* `note list` +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "This will list all existing notes from Trajectory."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* `note list m/CS1231` +"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "This will list all notes saved in CS1231 module."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Shows the help page +"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* *Add student* : `student add n/NAME i/ADMIN_NUMBER c/COURSE_CODE p/MOBILE_NUMBER e/EMAIL a/ADDRESS` +"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "e.g. `student add n/Megan Nicole c/CEG e/E0169113@u.nus.edu a/14 Changi South i/A0177897E p/92667921`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* *Update student* : `student edit INDEX [n/NAME] [i/ADMIN_NUMBER] [c/CLASS] [p/MOBILE_NUMBER] [e/EMAIL a/ADDRESS] ` +"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "e.g. `student edit 1 p/99887890 a/14 Simei Avenue 1`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* *Finding a student by name/matric no* : `student find [n/STUDENT_NAME] [i/MATRIC_NO` +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "e.g. `find student Megan Nicole`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* *List all students* : `student list` +"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* *Delete student by INDEX* : `student delete` +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "e.g. `student delete 2`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "* *Export students* : `student export` +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "e.g. `student export C:\\export`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* *Add module* : `module add n/MODULE_NAME c/MODULE_CODE [p/PREREQUISITES]…​` +"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "e.g. `module add n/Software Engineering c/CS2113 p/CS2040C`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* *Update module* : `module edit n/MODULE_NAME c/MODULE_CODE [p/PREREQUISITES]…​` +"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "e.g. `module edit c/CS2113 p/`"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* *Remove module* : `module delete c/MODULE_CODE​` +"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "e.g. `module delete c/CS2113`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* *Find module by module code* : `module find KEYWORD [MORE_KEYWORDS]​` +"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "e.g. `module find cs2113`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* *List modules* : `module list​` +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* *Archive module* : `module archive c/MODULE_CODE​` +"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "e.g. `module archive c/CS2113`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* *Enrol student in module* : `module enrol [i/MATRIC_NUMBER]…​ [e/EMAIL]…​​` +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "e.g. `module enrol i/A0167263X i/A0179821B`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "* *Assign TA* : `module assign [i/MATRIC_NUMBER] [e/EMAIL]` +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "e.g. `module assign i/A0171234B`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* *Add Grade Component* : `gradebook add m/MODULE_CODE i/ITEM mm/[MAX MARKS] w/[WEIGHTAGE]` +"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "e.g. `gradebook add m/CS2040C i/Assignment 1 mm/20 w/10`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* *Edit Grade Item* : `gradebook edit c/MODULE_CODE i/GRADE_ITEM  m/ MAX_MARKS p/PERCENTAGE OF GRADE` +"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "e.g. `gradebook edit c/CS2040C i/Assignment 1 m/20 p/10`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* *Delete Grade Component* : `gradebook delete m/MODULE_CODE i/GRADE_ITEM` +"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "e.g. `gradebook delete m/CS2040C i/Assignment 1`"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* *List Grade Components* : `gradebook list` +"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "e.g. `gradebook list`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "* *Find Grade Components* : `gradebook find m/MODULE_CODE i/ITEM` +"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "e.g. `gradebook find m/CS2040C i/finals`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* *Assign Grades* : `gradebook assign c/MODULE_CODE i/MATRIC_NUMBER g/GRADE_ITEM_NAME m/MARKS` +"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "e.g. `gradebook assign c/CS2040C i/A0168111 g/Assignment 1 m/10`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* *Creating a class* `class add c/CLASS_NAME m/MODULE_CODE e/MAX_ENROLLMENT` +"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "e.g. `class add c/T16 m/CG1111 e/20`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* *List class* `class list` +"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "e.g. `class list`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* *Deleting a class* `class delete c/CLASS_NAME m/MODULE_CODE` +"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "e.g. `class delete c/T16 m/CG1111`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* *Assigning a student to class* `class addstudent c/CLASS_NAME m/MODULE_CODE` +"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "e.g. `class addstudent c/T16 i/A6942069M`"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* *Unassigning a student from class* `class delstudent c/CLASS_NAME i/ADMISSION_NO` +"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "e.g. `class delstudent c/T16 i/A6942069M`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* *Modifying class enrollment limits* `class maxenroll c/CLASS_NAME e/NEW_MAX_ENROLLMENT_SIZE` +"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "e.g. `class maxenroll c/T16 e/20`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* *Accessing class attendance list* `class listattend c/CLASS_NAME` +"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "e.g. `class listattend c/T16`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* *Marking class attendance list* `class markattend c/CLASS_NAME i/ADMISSION_NO` +"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "e.g. `class markattend c/T16 i/A6942069M`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "* *Modifying class attendance list* `class modattend c/CLASS_NAME i/ADMISSION_NO` +"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "e.g. `class modattend c/T16 i/A6942069M`"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add a note* `note add m/MODULE_CODE [d/DATE]` +"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "e.g. `note add m/CS2040C`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "* *List notes* `note list [m/MODULE_CODE]` +"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "e.g. `note list m/CS2040C`"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete a note* `note delete INDEX` +"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `note delete 8`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit a note* `note edit INDEX [m/MODULE_CODE] [d/DATE]` `[Coming in v1.3]` +"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `note edit 5 m/CS2040C`"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find a note* `note find k/KEYWORD [k/KEYWORD]..` `[Coming in v1.3]` +"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `note find k/bubble k/queue`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 158,
      "m-aslam-mj2": 76,
      "zhicaizack": 129,
      "jomcruz93": 32,
      "-": 262,
      "harriuscai": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.StorageController;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.StudentManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Trajectory ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        StorageController.retrieveData();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        StudentManager sm \u003d StudentManager.getInstance();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sm.initializeModel(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        logger.info(\"Starting Trajectory \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Trajectory ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 2,
      "jomcruz93": 4,
      "-": 208
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String appTitle \u003d \"Trajectory\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to Trajectory.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/NewInfoMessageEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Indicates that there is new information to be rendered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class NewInfoMessageEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public NewInfoMessageEvent(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CsvUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Handles writing to CSV files."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class CsvUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final String BASE_DIRECTORY \u003d \"data/CSVexport/\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final String COMMA_DELIM \u003d \",\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final String NEW_LINE_SEPARATOR \u003d \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final String MESSAGE_ERROR \u003d \"Error! could not write to %s.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Builds the string containing the headers separated by commas."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static String parseHeaders(ArrayList\u003cString\u003e headerList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        requireNonNull(headerList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        StringBuilder headers \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        int size \u003d headerList.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        for (String header : headerList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            headers.append(header);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            if (i++ \u003c size) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                headers.append(COMMA_DELIM);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return headers.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * This method creates a CSV file from a CSV-adapted Java object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @return true if writing to file is successful, false otherwise"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static boolean writeToCsv("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String fileNameParam,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            ArrayList\u003cString\u003e headersParam,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            ArrayList\u003cString\u003e dataParam) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        requireNonNull(fileNameParam);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        requireNonNull(headersParam);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        requireNonNull(dataParam);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String fileName \u003d BASE_DIRECTORY + fileNameParam + \".csv\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String headers \u003d parseHeaders(headersParam);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e(dataParam);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } catch (SecurityException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        FileWriter fileWriter \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            fileWriter \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            fileWriter.append(headers.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            fileWriter.append(NEW_LINE_SEPARATOR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            for (String obj : data) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                fileWriter.append(obj);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                fileWriter.append(NEW_LINE_SEPARATOR);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                fileWriter.flush();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                fileWriter.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            } catch (IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                System.out.println(\"An error has occurred while flushing/closing the FileWriter.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClassAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAXENROLLMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassroomManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Creates a class for a module."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassAddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"class add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a class and assigns it to a module\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \" for the system. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_CLASS_NAME + \"CLASS_NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MAXENROLLMENT + \"ENROLLMENT_SIZE\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_CLASS_NAME + \"T16 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CG1111 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MAXENROLLMENT + \"20\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New class added: %1$s,\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \" Module code: %2$s,\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \" Enrollment size: %3$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_CLASSROOM \u003d \"This classroom already exists in Trajectory\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private final Classroom classToCreate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Command creates a classroom to be added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassAddCommand(Classroom classRoom) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireAllNonNull(classRoom);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.classToCreate \u003d classRoom;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassroomManager classroomManager \u003d ClassroomManager.getInstance();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (classroomManager.hasClassroom(classToCreate)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLASSROOM);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomManager.addClassroom(classToCreate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomManager.saveClassroomList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, classToCreate.getClassName(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                classToCreate.getModuleCode(), classToCreate.getMaxEnrollment()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                || (other instanceof ClassAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                \u0026\u0026 classToCreate.equals(((ClassAddCommand) other).classToCreate));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClassAddStudentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassroomManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Assigns a student to an existing class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassAddStudentCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"class addstudent\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns a student to a class\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \" for the system. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_CLASS_NAME + \"CLASS_NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MATRIC + \"MATRIC_NO\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_CLASS_NAME + \"T16 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CG1111 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MATRIC + \"A6942069M\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student assigned to class: %1$s\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \", Class: %2$s\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \", Module code: %3$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static final String MESSAGE_FAIL \u003d \"Class belonging to module not found!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_CLASSROOM_STUDENT \u003d \"This student already exists in class: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private Classroom classToAssignStudent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private final String className;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private final String matricNo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassAddStudentCommand(String className, String moduleCode, String matricNo) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireAllNonNull(className, moduleCode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.className \u003d className;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.matricNo \u003d matricNo;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassroomManager classroomManager \u003d ClassroomManager.getInstance();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classToAssignStudent \u003d classroomManager.findClassroom(className, moduleCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (classToAssignStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return new CommandResult(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (classroomManager.isDuplicateClassroomStudent(classToAssignStudent, matricNo)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_CLASSROOM_STUDENT, matricNo));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomManager.assignStudent(classToAssignStudent, matricNo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomManager.saveClassroomList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, matricNo,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                classToAssignStudent.getClassName(), classToAssignStudent.getModuleCode()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                || (other instanceof ClassAddStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                \u0026\u0026 classToAssignStudent.equals(((ClassAddStudentCommand) other).classToAssignStudent));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClassDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassroomManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Deletes a class from the classroom list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassDeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"class delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a class with students assigned to it \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \" for a module for the system. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_CLASS_NAME + \"CLASS_NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_CLASS_NAME + \"T16 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CG1111 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Class deleted: %1$s,\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \" Module code: %2$s,\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \" Enrollment size: %3$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static final String MESSAGE_FAIL \u003d \"Class belonging to module not found!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private final Classroom classToDelete;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private final ClassroomManager classroomManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Command deletes a classroom."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassDeleteCommand(String className, String moduleCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomManager \u003d ClassroomManager.getInstance();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.classToDelete \u003d classroomManager.findClassroom(className, moduleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (classToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return new CommandResult(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomManager.deleteClassroom(classToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomManager.saveClassroomList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, classToDelete.getClassName(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                classToDelete.getModuleCode(), classToDelete.getMaxEnrollment()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                || (other instanceof ClassDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                \u0026\u0026 classToDelete.equals(((ClassDeleteCommand) other).classToDelete));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClassDeleteStudentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassroomManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Unassigns an existing student from an existing class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassDeleteStudentCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"class delstudent\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unassigns a student from a class\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \" for the system. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_CLASS_NAME + \"CLASS_NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MATRIC + \"MATRIC_NO\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_CLASS_NAME + \"T16 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CG1111 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MATRIC + \"A6942069M\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Student unassigned from class: %1$s\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \", Class: %2$s\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \", Module code: %3$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static final String MESSAGE_FAIL \u003d \"Class belonging to module not found!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static final String MESSAGE_CLASSROOM_STUDENT_NOT_FOUND \u003d \"This student doesn\u0027t exists in class: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private Classroom classToUnassignStudent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private final String className;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private final String matricNo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassDeleteStudentCommand(String className, String moduleCode, String matricNo) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireAllNonNull(className, moduleCode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.className \u003d className;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.matricNo \u003d matricNo;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassroomManager classroomManager \u003d ClassroomManager.getInstance();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classToUnassignStudent \u003d classroomManager.findClassroom(className, moduleCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (classToUnassignStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return new CommandResult(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!classroomManager.hasClassroomStudent(classToUnassignStudent, matricNo)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_CLASSROOM_STUDENT_NOT_FOUND, matricNo));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomManager.unassignStudent(classToUnassignStudent, matricNo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomManager.saveClassroomList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, matricNo,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                classToUnassignStudent.getClassName(), classToUnassignStudent.getModuleCode()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                || (other instanceof ClassDeleteStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                \u0026\u0026 classToUnassignStudent.equals(((ClassDeleteStudentCommand) other).classToUnassignStudent));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClassEditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAXENROLLMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassroomManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Enrollment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Edits the details of an existing classroom in Trajectory"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassEditCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"class edit\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits an exiting class with an updated field\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \" for the system. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_CLASS_NAME + \"CLASS_NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MAXENROLLMENT + \"ENROLLMENT_SIZE\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_CLASS_NAME + \"T16 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CG1111 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            + PREFIX_MAXENROLLMENT + \"69\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static final String MESSAGE_EDIT_CLASSROOM_SUCCESS \u003d \"Edited Class: %1$s, %2$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static final String MESSAGE_FAIL \u003d \"Class belonging to module not found!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private final String className;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private final EditClassDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassEditCommand(String className, String moduleCode, EditClassDescriptor editClassroomDescriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(editClassroomDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.className \u003d className;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.editModuleDescriptor \u003d new EditClassDescriptor(editClassroomDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassroomManager classroomManager \u003d ClassroomManager.getInstance();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Classroom classtoEdit \u003d classroomManager.findClassroom(className, moduleCode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (classtoEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return new CommandResult(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Classroom editedClass \u003d createEditedClassroom(classtoEdit, editModuleDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomManager.updateClassroom(classtoEdit, editedClass);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomManager.saveClassroomList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CLASSROOM_SUCCESS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                classtoEdit.getClassName(), classtoEdit.getModuleCode()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Creates and returns a {@code Classroom} with the details of {@code classToEdit}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * edited with {@code EditClassDescriptor}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static Classroom createEditedClassroom(Classroom classToEdit,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                                                   EditClassDescriptor editClassroomDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assert classToEdit !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassName className \u003d classToEdit.getClassName();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ModuleCode moduleCode \u003d classToEdit.getModuleCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Enrollment maxEnrollment \u003d editClassroomDescriptor.getMaxEnrollment().orElse(classToEdit.getMaxEnrollment());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new Classroom(className, moduleCode, maxEnrollment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Stores the details to edit the classroom with. Each non-empty field value (other than the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * classname and module code)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * will replace the corresponding field value of the classroom."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static class EditClassDescriptor {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        private ClassName className;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        private Enrollment maxEnrollment;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        public EditClassDescriptor() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "         * Copy constructor"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        public EditClassDescriptor(EditClassDescriptor toCopy) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            setClassName(toCopy.className);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            setEnrollment(toCopy.maxEnrollment);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return CollectionUtil.isAnyNonNull(maxEnrollment);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        public ClassName getClassName() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return className;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        public void setClassName(ClassName className) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            this.className \u003d className;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return moduleCode;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        public Optional\u003cEnrollment\u003e getMaxEnrollment() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return Optional.ofNullable(maxEnrollment);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        public void setEnrollment(Enrollment enrollment) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            this.maxEnrollment \u003d enrollment;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClassListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassroomManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.ui.HtmlTableProcessor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Lists all the class from the classroom list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassListCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"class list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all classes\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static final String HTML_TABLE_TITLE_STUDENT \u003d \"Assigned student(s) - %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassroomManager classroomManager \u003d ClassroomManager.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        builder.append(HtmlTableProcessor.getH3Representation(\"Class List\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        for (Classroom c : classroomManager.getClassroomList()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            builder.append(HtmlTableProcessor.renderTableStart(new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                    Arrays.asList(\"Class Name\", \"Module Code\", \"Max Enrollment Size\"))));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            builder.append(HtmlTableProcessor.getTableItemStart());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            builder.append(c.toClassHtmlString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            if (!c.getStudents().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                builder.append(HtmlTableProcessor.renderTableStart(new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                        Collections.singletonList(String.format(HTML_TABLE_TITLE_STUDENT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                                c.getClassName())))));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                builder.append(HtmlTableProcessor.getTableItemStart());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                for (String matricNo : c.getStudents()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                    builder.append(HtmlTableProcessor"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                            .renderTableItem(new ArrayList\u003c\u003e(Collections.singletonList(matricNo))));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                builder.append(HtmlTableProcessor.getTableItemEnd());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        builder.append(HtmlTableProcessor.getTableItemEnd());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \"\\n\", builder.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Student database has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public final String feedbackToUserWebView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.feedbackToUserWebView \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CommandResult(String feedbackToUser, String feedbackToUserWebView) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.feedbackToUserWebView \u003d requireNonNull(feedbackToUserWebView);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 7,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CourseAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_FACULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Adds a student to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class CourseAddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"course add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a course into Trajectory. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_COURSE_CODE + \"COURSE_CODE\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_COURSE_NAME + \"COURSE_NAME\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_COURSE_FACULTY + \"COURSE_ORIGIN_FACULTY\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_COURSE_CODE + \"CEG1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_COURSE_NAME + \"Computer Engineering \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_COURSE_FACULTY + \"School of Computing \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New course added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COURSE \u003d \"This course already exists in Trajectory\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private Course internalCourse;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Creates an CourseAddCommand to add the specified {@code Course}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CourseAddCommand(Course course) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        requireNonNull(course);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        internalCourse \u003d course;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseManager cm \u003d CourseManager.getInstance();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (cm.hasCourse(internalCourse.getCourseCode().toString())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_COURSE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        cm.addCourse(internalCourse);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        cm.saveCourseList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                internalCourse.getCourseName()), cm.getTableRepresentation());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 58,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CourseDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Deletes a course via a provided course code"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class CourseDeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"course delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + \": Deletes the course based on the course code that was provided.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + \"Parameters: \" + PREFIX_COURSE_CODE + \"COURSE_CODE\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_COURSE_CODE + \"CS1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_DELETE_COURSE_SUCCESS \u003d \"Deleted course: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String courseCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CourseDeleteCommand(String courseCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        requireNonNull(courseCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseCode \u003d courseCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Executes the deletion of a course."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseManager cm \u003d CourseManager.getInstance();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        Course foundCourse \u003d cm.getCourse(courseCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        cm.deleteCourse(foundCourse);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        cm.saveCourseList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_COURSE_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                foundCourse.getCourseName(), cm.getTableRepresentation()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 45,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CourseListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Lists all courses within Trajectory."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class CourseListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"course list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all courses\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseManager cm \u003d CourseManager.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \"\\n\" + \"\", cm.getTableRepresentation());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 23,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DebugCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.user.UserManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * This class is designed for debug use only."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class DebugCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        UserManager um \u003d UserManager.getInstance();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        um.addUser(new User(\"megannicole@outlook.com\", \"password\" , 1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        um.saveUserList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new CommandResult(\"DEBUG COMMAND EXECUTED.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"student delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted student: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 3,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GradebookAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_MAXMARKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_WEIGHTAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.GradebookManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " * Adds a gradebook component to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookAddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"gradebook add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_ADD_SUCCESS \u003d \"\\nSuccessfully Added! \\nModule Code: %1$s\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"\\nGradebook Component Name: %2$s\" + \"\\nMaximum Marks: %3$s\" + \"\\nWeightage: %4$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a gradebook component to Trajectory. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE CODE  \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_ITEM + \"ITEM \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_MAXMARKS + \"[MAX MARKS] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_WEIGHTAGE + \"[WEIGHTAGE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2113 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_ITEM + \"Assignment 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_MAXMARKS + \"60 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_WEIGHTAGE + \"50\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private final Gradebook toAddGradebookItem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public GradebookAddCommand (Gradebook gradebookComponent) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.toAddGradebookItem \u003d gradebookComponent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public CommandResult execute (Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookManager gradebookManager \u003d new GradebookManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.addGradebookComponent(toAddGradebookItem);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return new CommandResult(String.format("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                MESSAGE_ADD_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                toAddGradebookItem.getModuleCode(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                toAddGradebookItem.getGradeComponentName(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                toAddGradebookItem.getGradeComponentMaxMarks(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                toAddGradebookItem.getGradeComponentWeightage()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return other \u003d\u003d this //short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                || (other instanceof GradebookAddCommand //instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                \u0026\u0026 toAddGradebookItem.equals(((GradebookAddCommand) other).toAddGradebookItem));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GradebookDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.GradebookManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " * Deletes gradebook component for module in Trajectory to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookDeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"gradebook delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_DELETE_SUCCESS \u003d \"\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"\\nSuccessfully deleted!\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"\\nModule Code: %1$s\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"\\nGradebook Component: %2$s\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"\\nMaximum Marks: %3$s\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"\\nWeightage: %4$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_DELETE_FAIL \u003d \"\\nGradebook component not found!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a gradebook component to Trajectory. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_CODE  \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_ITEM + \"ITEM \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2113 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_ITEM + \"Assignment 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private final Gradebook toDeleteGradebookComponent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private final GradebookManager gradebookManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Command deletes a classroom."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public GradebookDeleteCommand(String moduleCode, String gradebookComponentName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager \u003d new GradebookManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.toDeleteGradebookComponent \u003d gradebookManager.findGradebookComponent(moduleCode, gradebookComponentName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public CommandResult execute (Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (toDeleteGradebookComponent \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_FAIL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.deleteGradebookComponent(toDeleteGradebookComponent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return new CommandResult(String.format("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                MESSAGE_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                toDeleteGradebookComponent.getModuleCode(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                toDeleteGradebookComponent.getGradeComponentName(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                toDeleteGradebookComponent.getGradeComponentMaxMarks(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                toDeleteGradebookComponent.getGradeComponentWeightage()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GradebookEditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_ITEM_EDIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_MAXMARKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_WEIGHTAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.GradebookManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " * Edits a gradebook component for module in Trajectory to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookEditCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"gradebook edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_EDIT_GRADEBOOK_SUCCESS \u003d \"Successfully edited!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_FIND_FAIL \u003d \"Unsuccessful find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a gradebook component to Trajectory. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE CODE  \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_ITEM + \"COMPONENT NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_ITEM_EDIT + \"[EDITED COMPONENT NAME] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_MAXMARKS + \"[EDITED MAX MARKS] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_WEIGHTAGE + \"[EDITED WEIGHTAGE]\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2113 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_ITEM + \"Assignment 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_ITEM_EDIT + \"Finals \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_MAXMARKS + \"60 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_WEIGHTAGE + \"50\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private final Gradebook toEditGradebookItem;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public GradebookEditCommand (Gradebook gradebookComponent) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        toEditGradebookItem \u003d gradebookComponent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public CommandResult execute (Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String status \u003d MESSAGE_EDIT_GRADEBOOK_SUCCESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookManager gradebookManager \u003d new GradebookManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        Gradebook gradebook \u003d gradebookManager.findGradebookComponent("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                toEditGradebookItem.getModuleCode(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                toEditGradebookItem.getGradeComponentName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (gradebook \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            return new CommandResult(MESSAGE_FIND_FAIL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (!toEditGradebookItem.getgradebookNewComponentName().equals(\"\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            gradebook.setGradeComponentName(toEditGradebookItem.getgradebookNewComponentName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (toEditGradebookItem.getGradeComponentMaxMarks() !\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            gradebook.setgradebookMaxMarks(toEditGradebookItem.getGradeComponentMaxMarks());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (toEditGradebookItem.getGradeComponentWeightage() !\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            gradebook.setgradebookWeightage(toEditGradebookItem.getGradeComponentWeightage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return new CommandResult(status);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GradebookFindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.GradebookManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.ui.HtmlTableProcessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " * Finds gradebook component for module in Trajectory to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookFindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"gradebook find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds a gradebook component to module in Trajectory. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_CODE  \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_ITEM + \"ITEM \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2113 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            + PREFIX_GRADEBOOK_ITEM + \"Assignment 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_FIND_SUCCESS \u003d \"\\nSuccessfully found!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_FIND_FAIL \u003d \"\\nUnsuccessful find\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private final Gradebook toFindGradebookComponent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public GradebookFindCommand (Gradebook gradebookComponent) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        toFindGradebookComponent \u003d gradebookComponent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookManager gradebookManager \u003d new GradebookManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        Gradebook gradebook \u003d gradebookManager.findGradebookComponent("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                toFindGradebookComponent.getModuleCode(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                toFindGradebookComponent.getGradeComponentName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (gradebook \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            return new CommandResult(MESSAGE_FIND_FAIL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        sb.append(HtmlTableProcessor.getH3Representation(\"Details of Gradebook Component\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        sb.append(HtmlTableProcessor.renderTableStart(new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                Arrays.asList(\"Module Code\", \"Component Name\", \"Maximum Marks\", \"Weightage\"))));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        sb.append(HtmlTableProcessor.getTableItemStart());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        sb.append(HtmlTableProcessor.renderTableItem(new ArrayList\u003cString\u003e(Arrays"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                            .asList(gradebook.getModuleCode(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                                    gradebook.getGradeComponentName(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                                    Integer.toString(gradebook.getGradeComponentMaxMarks()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                                    Integer.toString(gradebook.getGradeComponentWeightage())))));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        sb.append(HtmlTableProcessor.getTableItemEnd());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return new CommandResult(MESSAGE_FIND_SUCCESS + \"\\n\" + \"\", sb.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GradebookListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.GradebookManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.ui.HtmlTableProcessor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " * Lists all gradebook components for module in Trajectory to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"gradebook list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static final String MESSAGE_LIST_SUCCESS \u003d \"Number of Grade Components Listed: \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookManager gradebookManager \u003d new GradebookManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int count \u003d gradebookManager.getGradebooks().size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        sb.append(HtmlTableProcessor.getH3Representation(\"Gradebook List\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        sb.append(HtmlTableProcessor.renderTableStart(new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                Arrays.asList(\"Index\", \"Module Code\", \"Component Name\", \"Maximum Marks\", \"Weightage\"))));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        sb.append(HtmlTableProcessor.getTableItemStart());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        for (Gradebook gradebook: gradebookManager.getGradebooks()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            sb.append(HtmlTableProcessor"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                    .renderTableItem(new ArrayList\u003cString\u003e(Arrays"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                            .asList(Integer.toString(index++),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                                    gradebook.getModuleCode(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                                    gradebook.getGradeComponentName(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                                    Integer.toString(gradebook.getGradeComponentMaxMarks()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                                    Integer.toString(gradebook.getGradeComponentWeightage())))));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        sb.append(HtmlTableProcessor.getTableItemEnd());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_SUCCESS + count + \"\\n\" + \"\", sb.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTH_PASSWORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.user.UserManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.ui.HtmlTableProcessor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Handles logins within Trajectory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Logs you into Trajectory. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_AUTH_PASSWORD + \"PASSWORD \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_EMAIL + \"megannicole@nus.edu.sg \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_AUTH_PASSWORD + \"password \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_AUTH_SUCCESS \u003d \"You has successfully logged in.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_AUTH_FAILURE \u003d \"Your login attempt has failed. Please try again later.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private User internalUser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Creates an StudentAddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public LoginCommand(User user) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        internalUser \u003d user;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (UserManager.getInstance().authenticate(internalUser)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return new CommandResult(MESSAGE_AUTH_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                    + \"\", HtmlTableProcessor.renderCard(MESSAGE_AUTH_SUCCESS));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return new CommandResult(MESSAGE_AUTH_FAILURE + \"\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                    + \"\", HtmlTableProcessor.renderCard(MESSAGE_AUTH_FAILURE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModuleAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Adds a module to Trajectory"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleAddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"module add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module into Trajectory. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MODULE_NAME + \"MODULE_NAME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2113 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MODULE_NAME + \"Software Engineering \u0026 Object-Oriented Programming\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s %2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in Trajectory.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private final Module moduleToAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ModuleAddCommand(Module module) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.moduleToAdd \u003d module;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            ModuleManager moduleManager \u003d ModuleManager.getInstance();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            moduleManager.addModule(moduleToAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            moduleManager.saveModuleList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        } catch (DuplicateModuleException dme) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE, dme);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, moduleToAdd.getModuleCode(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                moduleToAdd.getModuleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModuleDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Deletes a module identified using its module code."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleDeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"module delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \": Deletes the module identified by its module code.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_CODE\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2113\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted module: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private final String targetModuleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ModuleDeleteCommand(String moduleCode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.targetModuleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleManager moduleManager \u003d ModuleManager.getInstance();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Module moduleToDelete \u003d moduleManager.getModuleByModuleCode(targetModuleCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        moduleManager.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        moduleManager.saveModuleList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                || (other instanceof ModuleDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                \u0026\u0026 targetModuleCode.equals(((ModuleDeleteCommand) other).targetModuleCode)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModuleEditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Edits the details of an existing module in Trajectory"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleEditCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"module edit\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the module identified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \"by its module code. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \"[\" + PREFIX_MODULE_NAME + \"MODULE_NAME]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2113 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MODULE_NAME + \"SE \u0026 OOP\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"Edited Module: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module with code %s doesn\u0027t exist in Trajectory!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in Trajectory.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private final EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ModuleEditCommand(String moduleCode, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireNonNull(editModuleDescriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.editModuleDescriptor \u003d new EditModuleDescriptor(editModuleDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleManager moduleManager \u003d ModuleManager.getInstance();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Module moduleToEdit \u003d moduleManager.getModuleByModuleCode(moduleCode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (moduleToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_MODULE_NOT_FOUND, moduleCode));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit, editModuleDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        moduleManager.updateModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        moduleManager.saveModuleList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MODULE_SUCCESS, moduleToEdit));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Creates and returns a {@code Module} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleCode moduleCode \u003d moduleToEdit.getModuleCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleName moduleName \u003d editModuleDescriptor.getModuleName().orElse(moduleToEdit.getModuleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new Module(moduleCode, moduleName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Stores the details to edit the module with. Each non-empty field value (other than the module code)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * will replace the corresponding field value of the module."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        private ModuleName moduleName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        public EditModuleDescriptor() { }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "         * Copy constructor"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        public EditModuleDescriptor(EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            setModuleName(toCopy.moduleName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            return CollectionUtil.isAnyNonNull(moduleName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            return Optional.ofNullable(moduleCode);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        public Optional\u003cModuleName\u003e getModuleName() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            return Optional.ofNullable(moduleName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        public void setModuleName(ModuleName moduleName) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModuleEnrolCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.student.StudentManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Enrols a student in a particular module in Trajcetory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleEnrolCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"module enrol\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enrols a student into the specified module using \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \"their matriculation number.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MATRIC + \"MATRIC_NUMBER\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2113 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + PREFIX_MATRIC + \"A0161234B\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module with code %s doesn\u0027t exist in Trajectory!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static final String MESSAGE_STUDENT_NOT_FOUND \u003d \"Student with matric no. %s doesn\u0027t exist in Trajectory!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static final String MESSAGE_ALREADY_ENROLLED \u003d \"%1$s (%2$s) is already enrolled in %3$s %4$s.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static final String MESSAGE_ENROL_SUCCESS \u003d \"Enrolled %1$s (%2$s) in %3$s %4$s.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static final String MESSAGE_COMMAND_SUMMARY \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            \"%1$s student%2$s enrolled, %3$s student%4$s already enrolled, %5$s invalid matric number%6$s.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private final Set\u003cMatricNo\u003e matricNoSet;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ModuleEnrolCommand(ModuleCode moduleCode, Set\u003cMatricNo\u003e matricNoSet) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.matricNoSet \u003d matricNoSet;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleManager moduleManager \u003d ModuleManager.getInstance();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        StudentManager studentManager \u003d StudentManager.getInstance();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (!moduleManager.doesModuleExist(moduleCode.moduleCode)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_MODULE_NOT_FOUND, moduleCode.moduleCode));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        int numEnrolled \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        int numDuplicates \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        int numInvalid \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        for (MatricNo matricNo : matricNoSet) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            if (studentManager.doesStudentExistForGivenMatricNo(matricNo.matricNo)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                Module moduleToEnrol \u003d moduleManager.getModuleByModuleCode(moduleCode.moduleCode);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                Person studentToEnrol \u003d studentManager.retrieveStudentByMatricNo(matricNo.matricNo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                if (moduleManager.isStudentEnrolledInModule(moduleToEnrol, studentToEnrol)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                    sb.append(String.format(MESSAGE_ALREADY_ENROLLED,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                            studentToEnrol.getName().fullName,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                            studentToEnrol.getMatricNo().matricNo,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                            moduleToEnrol.getModuleCode().moduleCode,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                            moduleToEnrol.getModuleName().moduleName));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                    numDuplicates++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                    moduleManager.enrolStudentInModule(moduleToEnrol, studentToEnrol);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                    sb.append(String.format(MESSAGE_ENROL_SUCCESS,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                            studentToEnrol.getName().fullName,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                            studentToEnrol.getMatricNo(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                            moduleToEnrol.getModuleCode().moduleCode,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                            moduleToEnrol.getModuleName().moduleName));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                    numEnrolled++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                sb.append(String.format(MESSAGE_STUDENT_NOT_FOUND, matricNo));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                numInvalid++;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        moduleManager.saveModuleList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        sb.append(String.format(MESSAGE_COMMAND_SUMMARY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                numEnrolled, determinePluralOrSingular(numEnrolled),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                numDuplicates, determinePluralOrSingular(numDuplicates),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                numInvalid, determinePluralOrSingular(numInvalid)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private char determinePluralOrSingular(int number) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return number \u003d\u003d 0 || number \u003e 1 ? \u0027s\u0027 : Character.MIN_VALUE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModuleListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Lists all modules in Trajectory to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"module list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed %1$s module(s).\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        for (Iterator\u003cModule\u003e iter \u003d ModuleManager.getInstance().getModules().iterator(); iter.hasNext();) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            Module m \u003d iter.next();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            sb.append(\"Module Code: \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            sb.append(m.getModuleCode()).append(\"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            sb.append(\"Module Name: \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            sb.append(m.getModuleName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            if (iter.hasNext()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                sb.append(\"\\n\").append(\"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                String.format(MESSAGE_SUCCESS, ModuleManager.getInstance().getModules().size())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                + \"\\n\" + sb.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NoteAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.NoteManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.ui.NoteTextEditWindow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Adds a note to Trajectory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteAddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"note add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note to Trajectory. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_MODULE_CODE + \"MODULE_CODE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_NOTE_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_NOTE_START_DATE + \"START_DATE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_NOTE_START_TIME + \"START_TIME] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_NOTE_END_DATE + \"END_DATE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_NOTE_END_TIME + \"END_TIME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_NOTE_LOCATION + \"LOCATION]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + PREFIX_NOTE_TITLE + \"My First Note \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + PREFIX_NOTE_START_DATE + \"30-10-2020 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + PREFIX_NOTE_LOCATION + \"Columbia, Schermerhorn 614\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Note has been added.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_CANCEL \u003d \"Note creation has been cancelled.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private Note noteToAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteAddCommand(Note note) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteToAdd \u003d note;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteManager noteManager \u003d NoteManager.getInstance();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteTextEditWindow noteTextEditWindow \u003d new NoteTextEditWindow(noteToAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteTextEditWindow.showAndWait();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (!noteTextEditWindow.isCancelled()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteManager.addNote(noteToAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteManager.saveNoteList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String noteList \u003d noteManager.getHtmlNoteList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, noteList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new CommandResult(MESSAGE_CANCEL);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NoteDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.NoteManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Deletes a note from Trajectory."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteDeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"note delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a note. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"INDEX\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"2\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Note has been deleted.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid input!\\nINDEX %1$s is out of bounds.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteDeleteCommand(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteManager noteManager \u003d NoteManager.getInstance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (index \u003e noteManager.getFilteredNotes().size() || index \u003c 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_INDEX, index));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteManager.deleteNote(index - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteManager.saveNoteList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String noteList \u003d noteManager.getHtmlNoteList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, noteList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NoteEditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.NoteManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.ui.NoteTextEditWindow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Edits a note in Trajectory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteEditCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"note edit\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a note. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"NEW_MODULE_CODE] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_NOTE_TITLE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"NEW_TITLE] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_NOTE_START_DATE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"NEW_START_DATE] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_NOTE_START_TIME"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"NEW_START_TIME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_NOTE_END_DATE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"NEW_END_DATE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_NOTE_END_TIME"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"NEW_END_TIME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_NOTE_LOCATION"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"NEW_LOCATION]\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"4 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + PREFIX_NOTE_TITLE + \"My second note \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + PREFIX_NOTE_START_TIME + \"10:45 AM\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Note has been edited.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_CANCEL \u003d \"Edit note operation has been cancelled.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid input!\\nINDEX %1$s is out of bounds.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_TIME_DIFFERENCE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Invalid input! Please make sure the start date/time is earlier than the end date/time.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteEditCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            int index,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String moduleCode,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String title,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String startDate,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String startTime,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String endDate,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String endTime,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String location) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteManager noteManager \u003d NoteManager.getInstance();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (index \u003e noteManager.getFilteredNotes().size() || index \u003c 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_INDEX, index));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        Note noteToEdit \u003d noteManager.getNoteAt(index - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        // TODO: Validate date \u0026 time difference for \u0027start\u0027 and \u0027end\u0027 here"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteTextEditWindow noteTextEditWindow \u003d new NoteTextEditWindow(noteToEdit);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteTextEditWindow.showAndWait();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (!noteTextEditWindow.isCancelled()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            if (!moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                noteToEdit.setModuleCode(moduleCode);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            if (!title.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                noteToEdit.setTitle(title);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            if (!startDate.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                noteToEdit.setStartDate(startDate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            if (!startTime.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                noteToEdit.setStartTime(startTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            if (!endDate.isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                noteToEdit.setEndDate(endDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            if (!endTime.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                noteToEdit.setEndTime(endTime);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            if (!location.isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                noteToEdit.setLocation(location);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteManager.saveNoteList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String noteList \u003d noteManager.getHtmlNoteList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, noteList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new CommandResult(MESSAGE_CANCEL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NoteExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_FILE_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.commons.util.CsvUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.NoteManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.storage.adapter.CsvAdaptedNote;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Export notes to a CSV file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteExportCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"note export\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Error exporting to CSV!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_NAME \u003d \"Please enter a valid filename.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"A valid filename should only contain the following:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"- Alphanumeric characters [A-Z][a-z][0-9]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"- Underscores [ _ ]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"- Hyphens [ - ]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_NO_EXPORTABLE_NOTES \u003d \"You have no notes that can be exported.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exported %1$s note(s).\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": exports notes. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + PREFIX_NOTE_FILE_NAME + \"FILE_NAME\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + PREFIX_NOTE_FILE_NAME + \"myNotesAsCsv\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final String fileName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteExportCommand(String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteManager noteManager \u003d NoteManager.getInstance();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        ArrayList\u003cString\u003e noteCsvList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        CsvAdaptedNote adaptedNote;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        for (Note note : noteManager.getExportableNotes()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            adaptedNote \u003d new CsvAdaptedNote(note);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteCsvList.add(adaptedNote.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        int size \u003d noteCsvList.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        boolean writeSuccess \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (size \u003e 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            writeSuccess \u003d CsvUtil.writeToCsv("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                    fileName, noteManager.getCsvHeaders(), noteCsvList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new CommandResult(MESSAGE_NO_EXPORTABLE_NOTES);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (writeSuccess) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, size));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new CommandResult(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NoteListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.NoteManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Lists notes based on given predicate."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"note list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists notes. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"[\" + PREFIX_MODULE_CODE + \"MODULE_CODE]\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2113\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed %1$s note(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND \u003d \"No notes were found.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteListCommand(String moduleCode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteManager noteManager \u003d NoteManager.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.setFilteredNotes(moduleCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (noteManager.getFilteredNotes().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteManager.setFilteredNotes(noteManager.getCurrentFilter());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        int size \u003d noteManager.getFilteredNotes().size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String noteList \u003d noteManager.getHtmlNoteList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, size), noteList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StudentAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class StudentAddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"student add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student into Trajectory. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_MATRIC + \"MATRIC_NO\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_COURSE_CODE + \"COURSE_CODE\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_NAME + \"Megan Nicole \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_MATRIC + \"A0168000B \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_COURSE_CODE + \"CEG \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in Trajectory\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Creates an StudentAddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public StudentAddCommand(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                || (other instanceof StudentAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 toAdd.equals(((StudentAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 18,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StudentEditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class StudentEditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"student edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            + \"by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited student: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in Trajectory.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public StudentEditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        CourseCode updatedCourseCode \u003d editPersonDescriptor.getCourseCode().orElse(personToEdit.getCourseCode());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        MatricNo updatedMatricNo \u003d editPersonDescriptor.getMatricNo().orElse(personToEdit.getMatricNo());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                updatedTags, updatedCourseCode, updatedMatricNo);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!(other instanceof StudentEditCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand e \u003d (StudentEditCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        private CourseCode courseCode;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        private MatricNo matricNo;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            setCourseCode(courseCode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            setMatricNo(matricNo);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        public Optional\u003cCourseCode\u003e getCourseCode() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return Optional.ofNullable(courseCode);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        public void setCourseCode(CourseCode courseCode) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            this.courseCode \u003d courseCode;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        public Optional\u003cMatricNo\u003e getMatricNo() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return Optional.ofNullable(matricNo);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        public void setMatricNo(MatricNo matricNo) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            this.matricNo \u003d matricNo;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 35,
      "-": 218
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StudentFindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class StudentFindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"student find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public StudentFindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                || (other instanceof StudentFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 predicate.equals(((StudentFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 6,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StudentListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.ui.HtmlTableProcessor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class StudentListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"student list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        // TO RETAIN BACKWARDS COMPATIBILITY"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        sb.append(HtmlTableProcessor.getH3Representation(\"Student List\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        sb.append(HtmlTableProcessor.renderTableStart(new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                Arrays.asList(\"Matric No\", \"Full Name\", \"Email Address\"))));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        sb.append(HtmlTableProcessor.getTableItemStart());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        for (Person p: model.getAddressBook().getPersonList()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            sb.append(HtmlTableProcessor"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                    .renderTableItem(new ArrayList\u003cString\u003e(Arrays"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                            .asList(p.getMatricNo().toString(), p.getName().toString(), p.getEmail().toString()))));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        sb.append(HtmlTableProcessor.getTableItemEnd());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \"\\n\" + \"\", sb.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Parses input arguments and creates a new StudentAddCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class AddCommandParser implements Parser\u003cStudentAddCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StudentAddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * and returns an StudentAddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public StudentAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_COURSE_CODE, PREFIX_MATRIC);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        MatricNo matricNo \u003d ParserUtil.parseMatric(argMultimap.getValue(PREFIX_MATRIC).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        CourseCode courseCode \u003d ParserUtil.parseCourseCode(argMultimap.getValue(PREFIX_COURSE_CODE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, courseCode, matricNo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new StudentAddCommand(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 20,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.ClassAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassAddStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassDeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassDeleteStudentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.ClassListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.CourseAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.CourseDeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.CourseListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.DebugCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.GradebookAddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.GradebookDeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.GradebookEditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.GradebookFindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.GradebookListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.ModuleAddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.commands.ModuleDeleteCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.commands.ModuleEditCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.commands.ModuleEnrolCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.ModuleListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteAddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteDeleteCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteEditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteExportCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteListCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentAddCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentEditCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentFindCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentListCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.user.UserManager;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Used to separate multiple command words and args"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static final Pattern ADVANCED_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWords\u003e.*?\\\\S+((?\u003c\u003dfind)|(?\u003d(?:\\\\s+[0-9]|\\\\s+[a-z]+\\\\/))|$))(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        final Matcher matcher \u003d ADVANCED_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWords\").trim().replaceAll(\" +\", \" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        // halts command execution if user is not currently logged in."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!commandWord.equals(LoginCommand.COMMAND_WORD) \u0026\u0026 !UserManager.getInstance().isAuthenticated()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 !UserManager.getInstance().isDisarmAuthSystem()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new ParseException(\"You need to be logged in to use Trajectory.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        case \"debug\": // DEBUG USE  ONLY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return new DebugCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        case GradebookAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            return new GradebookAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        case GradebookListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            return new GradebookListCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        case GradebookDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            return new GradebookDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        case GradebookFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            return new GradebookFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        case GradebookEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            return new GradebookEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        case CourseAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return new CourseAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        case CourseListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return new CourseListCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        case CourseDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return new CourseDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        case StudentAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        case NoteAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new NoteAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        case NoteListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new NoteListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        case NoteDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new NoteDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        case NoteEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new NoteEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        case NoteExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new NoteExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        case StudentEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        case StudentFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        case StudentListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return new StudentListCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        case ModuleAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            return new ModuleAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        case ModuleEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            return new ModuleEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        case ModuleDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            return new ModuleDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        case ModuleListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            return new ModuleListCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        case ModuleEnrolCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            return new ModuleEnrolCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        case ClassAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return new ClassAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        case ClassListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return new ClassListCommand();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        case ClassEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return new ClassEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        case ClassDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return new ClassDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        case ClassAddStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return new ClassAddStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        case ClassDeleteStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return new ClassDeleteStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 16,
      "m-aslam-mj2": 35,
      "zhicaizack": 22,
      "jomcruz93": 30,
      "-": 82,
      "harriuscai": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClassAddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAXENROLLMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Enrollment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Parses input arguments and creates a new ClassAddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassAddCommandParser implements Parser\u003cClassAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASS_NAME, PREFIX_MODULE_CODE, PREFIX_MAXENROLLMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASS_NAME, PREFIX_MODULE_CODE, PREFIX_MAXENROLLMENT)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClassAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String className \u003d argMultimap.getValue(PREFIX_CLASS_NAME).get().toUpperCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassroomParserUtil.parseClassName(className);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get().toUpperCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ParserUtil.parseModuleCode(moduleCode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String maxEnrollment \u003d argMultimap.getValue(PREFIX_MAXENROLLMENT).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassroomParserUtil.parseEnrollment(maxEnrollment);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Classroom classRoom \u003d new Classroom("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                new ClassName(className),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                new ModuleCode(moduleCode),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                new Enrollment(maxEnrollment));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new ClassAddCommand(classRoom);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClassAddStudentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassAddStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Parses input arguments and creates a new ClassAddStudentCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassAddStudentCommandParser implements Parser\u003cClassAddStudentCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Parses {@code args} into a command and returns it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @throws ParseException if {@code args} does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassAddStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASS_NAME, PREFIX_MODULE_CODE, PREFIX_MATRIC);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASS_NAME, PREFIX_MODULE_CODE, PREFIX_MATRIC)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                    ClassAddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String className \u003d argMultimap.getValue(PREFIX_CLASS_NAME).get().toUpperCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassroomParserUtil.parseClassName(className);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get().toUpperCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ParserUtil.parseModuleCode(moduleCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String matricNo \u003d ParserUtil.parseMatric(argMultimap.getValue(PREFIX_MATRIC).get()).toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ParserUtil.parseMatric(matricNo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new ClassAddStudentCommand(className, moduleCode, matricNo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "zhicaizack": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClassDeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Parses input arguments and creates a new ClassDeleteCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassDeleteCommandParser implements Parser\u003cClassDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Parses {@code args} into a command and returns it."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @throws ParseException if {@code args} does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASS_NAME, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASS_NAME, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                    ClassDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String className \u003d argMultimap.getValue(PREFIX_CLASS_NAME).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassroomParserUtil.parseClassName(className);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ParserUtil.parseModuleCode(moduleCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new ClassDeleteCommand(className, moduleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClassDeleteStudentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassDeleteStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Parses input arguments and creates a new ClassDeleteStudentCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassDeleteStudentCommandParser implements Parser\u003cClassDeleteStudentCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Parses {@code args} into a command and returns it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @throws ParseException if {@code args} does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassDeleteStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASS_NAME, PREFIX_MODULE_CODE, PREFIX_MATRIC);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASS_NAME, PREFIX_MODULE_CODE, PREFIX_MATRIC)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                    ClassDeleteStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String className \u003d argMultimap.getValue(PREFIX_CLASS_NAME).get().toUpperCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassroomParserUtil.parseClassName(className);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get().toUpperCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ParserUtil.parseModuleCode(moduleCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String matricNo \u003d ParserUtil.parseMatric(argMultimap.getValue(PREFIX_MATRIC).get()).toString(); // TBC"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ParserUtil.parseMatric(matricNo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new ClassDeleteStudentCommand(className, moduleCode, matricNo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "zhicaizack": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClassEditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAXENROLLMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassEditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassEditCommand.EditClassDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Parses input arguments and creates a new ClassEditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassEditCommandParser implements Parser\u003cClassEditCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClassEditCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * and returns an ClassEditCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASS_NAME, PREFIX_MODULE_CODE, PREFIX_MAXENROLLMENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASS_NAME, PREFIX_MODULE_CODE, PREFIX_MAXENROLLMENT)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClassEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String className \u003d argMultimap.getValue(PREFIX_CLASS_NAME).get().toUpperCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get().toUpperCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String maxEnrollment \u003d argMultimap.getValue(PREFIX_MAXENROLLMENT).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        EditClassDescriptor editClassroomDescriptor \u003d new EditClassDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CLASS_NAME).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            editClassroomDescriptor.setClassName(ClassroomParserUtil.parseClassName(className));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            editClassroomDescriptor.setModuleCode(ParserUtil.parseModuleCode(moduleCode));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAXENROLLMENT).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            editClassroomDescriptor.setEnrollment(ClassroomParserUtil.parseEnrollment(maxEnrollment));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!editClassroomDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new ParseException(ClassEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new ClassEditCommand(className, moduleCode, editClassroomDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClassroomParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Enrollment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassroomParserUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Parses a {@code String className} into a {@code ClassName}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @throws ParseException if the given {@code className} is invalid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static ClassName parseClassName(String className) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(className);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String trimmedClassName \u003d className.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!ClassName.isValidClassName(className)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new ParseException(ClassName.MESSAGE_CLASSNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new ClassName(trimmedClassName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Parses a {@code String maxEnrollment} into a {@code parseEnrollment}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * @throws ParseException if the given {@code className} is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static Enrollment parseEnrollment(String maxEnrollment) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(maxEnrollment);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String trimmedMaxEnrollment \u003d maxEnrollment.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!Enrollment.isValidEnrollment(maxEnrollment)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new ParseException(Enrollment.MESSAGE_ENROLLMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new Enrollment(trimmedMaxEnrollment);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final Prefix PREFIX_MATRIC \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /* TODO: Reorder the prefixes above in alphabetical order using the foll"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    owing template */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /* Class prefixes */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final Prefix PREFIX_CLASS_NAME \u003d new Prefix(\"cn/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final Prefix PREFIX_MAXENROLLMENT \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /* Course prefixes */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final Prefix PREFIX_COURSE_CODE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final Prefix PREFIX_COURSE_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final Prefix PREFIX_COURSE_FACULTY \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /* Gradebook prefixes */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final Prefix PREFIX_GRADEBOOK_ITEM \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final Prefix PREFIX_GRADEBOOK_MAXMARKS \u003d new Prefix(\"mm/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final Prefix PREFIX_GRADEBOOK_WEIGHTAGE \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final Prefix PREFIX_GRADEBOOK_ITEM_EDIT \u003d new Prefix(\"ei/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /* Module prefixes */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"mc/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final Prefix PREFIX_MODULE_NAME \u003d new Prefix(\"mn/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /* User prefixes */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final Prefix PREFIX_AUTH_PASSWORD \u003d new Prefix(\"pw/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /* Note prefixes */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final Prefix PREFIX_NOTE_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final Prefix PREFIX_NOTE_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final Prefix PREFIX_NOTE_FILE_NAME \u003d new Prefix(\"fn/\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final Prefix PREFIX_NOTE_LOCATION \u003d new Prefix(\"lc/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final Prefix PREFIX_NOTE_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final Prefix PREFIX_NOTE_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final Prefix PREFIX_NOTE_TITLE \u003d new Prefix(\"tt/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 4,
      "m-aslam-mj2": 6,
      "zhicaizack": 2,
      "jomcruz93": 7,
      "-": 15,
      "harriuscai": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CourseAddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_FACULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.CourseAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.FacultyName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Parses input arguments and creates a new CourseAddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class CourseAddCommandParser implements Parser\u003cCourseAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CourseAddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * and returns an CourseAddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CourseAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COURSE_CODE, PREFIX_COURSE_FACULTY, PREFIX_COURSE_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_COURSE_CODE, PREFIX_COURSE_FACULTY, PREFIX_COURSE_NAME)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CourseAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        CourseCode courseCode \u003d ParserUtil.parseCourseCode(argMultimap.getValue(PREFIX_COURSE_CODE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        CourseName courseName \u003d ParserUtil.parseCourseName(argMultimap.getValue(PREFIX_COURSE_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        FacultyName originFaculty \u003d ParserUtil.parseFacultyName(argMultimap.getValue(PREFIX_COURSE_FACULTY).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        Course course \u003d new Course(courseCode, courseName, originFaculty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new CourseAddCommand(course);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CourseDeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COURSE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.CourseDeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Parses input arguments and creates a new CourseDeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class CourseDeleteCommandParser implements Parser\u003cCourseDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CourseDeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * and returns an CourseDeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CourseDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COURSE_CODE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_COURSE_CODE)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CourseDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String courseCode \u003d argMultimap.getValue(PREFIX_COURSE_CODE).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new CourseDeleteCommand(courseCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentEditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Parses input arguments and creates a new StudentEditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class EditCommandParser implements Parser\u003cStudentEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StudentEditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * and returns an StudentEditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public StudentEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                    StudentEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new ParseException(StudentEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new StudentEditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 11,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Parses input arguments and creates a new StudentFindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class FindCommandParser implements Parser\u003cStudentFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StudentFindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * and returns an StudentFindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public StudentFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new StudentFindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 8,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GradebookAddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_MAXMARKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_WEIGHTAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.GradebookAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.GradebookManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " * Parses input arguments and creates a new GradebookAddCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookAddCommandParser implements Parser\u003cGradebookAddCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUTS \u003d \"Module code and gradebook component name cannot be empty\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_MAX_MARKS_ERROR \u003d \"Invalid input. \\nMaximum marks should only be an integer\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_WEIGHTAGE_ERROR \u003d \"Invalid input. \\nWeightage should only be an integer\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_MAX_MARKS_INVALID \u003d \"Max marks should be within 0-100 range\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static final String MESSAGE_DUPLICATE \u003d \"Gradebook component already exist in Trajectory\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static final String MESSAGE_WEIGHTAGE_INVALID \u003d \"Weightage should be within 0-100 range\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static final String MESSAGE_WEIGHTAGE_EXCEED \u003d \"The accumulated weightage for module stated has exceeded!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Parses the given {@code String args} of arguments in the context of the GradebookAddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * and returns a GradebookAddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public GradebookAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int gradeComponentMaxMarksArg \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int gradeComponentWeightageArg \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookManager gradebookManager \u003d new GradebookManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_GRADEBOOK_ITEM,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                PREFIX_GRADEBOOK_MAXMARKS, PREFIX_GRADEBOOK_WEIGHTAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_GRADEBOOK_ITEM)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GradebookAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_GRADEBOOK_MAXMARKS) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradeComponentMaxMarksArg \u003d Integer.parseInt(argMultimap.getValue(PREFIX_GRADEBOOK_MAXMARKS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            } catch (NumberFormatException nme) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                throw new ParseException(MESSAGE_MAX_MARKS_ERROR);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_GRADEBOOK_WEIGHTAGE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradeComponentWeightageArg \u003d Integer.parseInt(argMultimap.getValue(PREFIX_GRADEBOOK_WEIGHTAGE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            } catch (NumberFormatException nme) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                throw new ParseException(MESSAGE_WEIGHTAGE_ERROR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCodeArg \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradeComponentNameArg \u003d argMultimap.getValue(PREFIX_GRADEBOOK_ITEM).get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isEmpty \u003d gradebookManager.isEmpty(moduleCodeArg, gradeComponentNameArg);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(MESSAGE_EMPTY_INPUTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isDuplicate \u003d gradebookManager.isDuplicate(moduleCodeArg, gradeComponentNameArg);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (isDuplicate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isMaxMarksValid \u003d gradebookManager.isMaxMarksValid(gradeComponentMaxMarksArg);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (!isMaxMarksValid) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(MESSAGE_MAX_MARKS_INVALID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isWeightageValid \u003d gradebookManager.isWeightageValid(gradeComponentWeightageArg);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (!isWeightageValid) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(MESSAGE_WEIGHTAGE_INVALID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean hasWeightageExceed \u003d gradebookManager.hasWeightageExceed(moduleCodeArg, gradeComponentWeightageArg);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (hasWeightageExceed) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(MESSAGE_WEIGHTAGE_EXCEED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        Gradebook gradebook \u003d new Gradebook("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                moduleCodeArg,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradeComponentNameArg,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradeComponentMaxMarksArg,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradeComponentWeightageArg);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return new GradebookAddCommand(gradebook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GradebookDeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.GradebookDeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.GradebookManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " * Parses input arguments and creates a new GradebookDeleteCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookDeleteCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUTS \u003d \"Module code and gradebook component name cannot be empty\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Parses the given {@code String args} of arguments in the context of the GradebookDeleteCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * and returns a GradebookDeleteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public GradebookDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookManager gradebookManager \u003d new GradebookManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_GRADEBOOK_ITEM);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_GRADEBOOK_ITEM)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                    GradebookDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCodeArg \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradeComponentNameArg \u003d argMultimap.getValue(PREFIX_GRADEBOOK_ITEM).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isEmpty \u003d gradebookManager.isEmpty(moduleCodeArg, gradeComponentNameArg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(MESSAGE_EMPTY_INPUTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return new GradebookDeleteCommand(moduleCodeArg, gradeComponentNameArg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GradebookEditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_ITEM_EDIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_MAXMARKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_WEIGHTAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.GradebookEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.GradebookManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " * Parses input arguments and creates a new GradebookEditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookEditCommandParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_ERROR_EMPTY \u003d \"Module code and gradebook component name cannot be empty\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_MAX_MARKS_INVALID \u003d \"Max marks should be within 0-100 range\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_MAX_MARKS_ERROR \u003d \"Invalid input. \\nMaximum marks should only be an integer\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_WEIGHTAGE_ERROR \u003d \"Invalid input. \\nWeightage should only be an integer\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_WEIGHTAGE_INVALID \u003d \"Weightage should be within 0-100 range\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_WEIGHTAGE_EXCEED \u003d \"The accumulated weightage for module stated has exceeded!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Parses the given {@code String args} of arguments in the context of the GradebookFindCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * and returns a GradebookFindCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public GradebookEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int gradeComponentMaxMarksArg \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int gradeComponentWeightageArg \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String newGradeComponentNameArg \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookManager gradebookManager \u003d new GradebookManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_GRADEBOOK_ITEM,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                PREFIX_GRADEBOOK_ITEM_EDIT, PREFIX_GRADEBOOK_MAXMARKS, PREFIX_GRADEBOOK_WEIGHTAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_GRADEBOOK_ITEM)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                    GradebookEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_GRADEBOOK_MAXMARKS) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradeComponentMaxMarksArg \u003d Integer.parseInt(argMultimap.getValue(PREFIX_GRADEBOOK_MAXMARKS).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            } catch (NumberFormatException nme) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                throw new ParseException(MESSAGE_MAX_MARKS_ERROR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_GRADEBOOK_WEIGHTAGE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradeComponentWeightageArg \u003d Integer.parseInt(argMultimap.getValue(PREFIX_GRADEBOOK_WEIGHTAGE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            } catch (NumberFormatException nme) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                throw new ParseException(MESSAGE_WEIGHTAGE_ERROR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_GRADEBOOK_ITEM_EDIT) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            newGradeComponentNameArg \u003d argMultimap.getValue(PREFIX_GRADEBOOK_ITEM_EDIT).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCodeArg \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradeComponentNameArg \u003d argMultimap.getValue(PREFIX_GRADEBOOK_ITEM).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isEmpty \u003d gradebookManager.isEmpty(moduleCodeArg, gradeComponentNameArg);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(MESSAGE_ERROR_EMPTY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isMaxMarksValid \u003d gradebookManager.isMaxMarksValid(gradeComponentMaxMarksArg);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (!isMaxMarksValid) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(MESSAGE_MAX_MARKS_INVALID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isWeightageValid \u003d gradebookManager.isWeightageValid(gradeComponentWeightageArg);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (!isWeightageValid) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(MESSAGE_WEIGHTAGE_INVALID);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean hasWeightageExceed \u003d gradebookManager.hasWeightageExceed(moduleCodeArg, gradeComponentWeightageArg);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (hasWeightageExceed) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(MESSAGE_WEIGHTAGE_EXCEED);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        Gradebook gradebook \u003d new Gradebook("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                moduleCodeArg,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradeComponentNameArg,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                newGradeComponentNameArg,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradeComponentMaxMarksArg,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradeComponentWeightageArg);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return new GradebookEditCommand(gradebook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GradebookFindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.GradebookFindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.GradebookManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " * Parses input arguments and creates a new GradebookFindCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookFindCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUTS \u003d \"Module code and gradebook component name cannot be empty\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Parses the given {@code String args} of arguments in the context of the GradebookFindCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * and returns a GradebookFindCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public GradebookFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookManager gradebookManager \u003d new GradebookManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_GRADEBOOK_ITEM);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_GRADEBOOK_ITEM)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                    GradebookFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCodeArg \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradeComponentNameArg \u003d argMultimap.getValue(PREFIX_GRADEBOOK_ITEM).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isEmpty \u003d gradebookManager.isEmpty(moduleCodeArg, gradeComponentNameArg);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            throw new ParseException(MESSAGE_EMPTY_INPUTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        Gradebook gradebook \u003d new Gradebook(moduleCodeArg, gradeComponentNameArg);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return new GradebookFindCommand(gradebook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTH_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Parses input arguments and creates a new LoginCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * and returns an LoginCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public LoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EMAIL, PREFIX_AUTH_PASSWORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EMAIL, PREFIX_AUTH_PASSWORD)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String email \u003d argMultimap.getValue(PREFIX_EMAIL).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String authPassword \u003d argMultimap.getValue(PREFIX_AUTH_PASSWORD).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new LoginCommand(new User(email, authPassword, 0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModuleAddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.commands.ModuleAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Parses input arguments and creates a new ModuleAddCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleAddCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleAddCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * and returns a ModuleAddCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ModuleAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODULE_NAME, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_NAME, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleName moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_MODULE_NAME).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Module module \u003d new Module(moduleCode, moduleName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new ModuleAddCommand(module);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModuleDeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.commands.ModuleDeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Parses input arguments and creates a new ModuleDeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleDeleteCommandParser implements Parser\u003cModuleDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleDeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * and returns an ModuleDeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ModuleDeleteCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new ModuleDeleteCommand(moduleCode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModuleEditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.commands.ModuleEditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.commands.ModuleEditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleEditCommandParser implements Parser\u003cModuleEditCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleEditCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * and returns an ModuleEditCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @param args represents the new module details from the user\u0027s input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ModuleEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_MODULE_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        editModuleDescriptor.setModuleCode(ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_NAME).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            editModuleDescriptor.setModuleName("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                    ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_MODULE_NAME).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new ParseException(ModuleEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new ModuleEditCommand(moduleCode, editModuleDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModuleEnrolCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.commands.ModuleEnrolCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Parses input arguments and creates a new ModuleEnrolCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleEnrolCommandParser implements Parser\u003cModuleEnrolCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleEnrolCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * and returns an ModuleEnrolCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @param args represents the new module details from the user\u0027s input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ModuleEnrolCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_MATRIC);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // Module code and at least 1 matric no. must be present"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_MATRIC)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleEnrolCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Set\u003cMatricNo\u003e studentMatricNo \u003d ParserUtil.parseMatricNums(argMultimap.getAllValues(PREFIX_MATRIC));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new ModuleEnrolCommand(moduleCode, studentMatricNo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NoteAddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Parses input arguments and creates a new NoteAddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteAddCommandParser implements Parser\u003cNoteAddCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NoteAddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * and returns a NoteAddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_MODULE_CODE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_NOTE_TITLE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_NOTE_START_DATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_NOTE_START_TIME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_NOTE_END_DATE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_NOTE_END_TIME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_NOTE_LOCATION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String startDate \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String startTime \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String endDate \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String endTime \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String location \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                    NoteAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            // TODO: Check validity of input moduleCode value"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            title \u003d argMultimap.getValue(PREFIX_NOTE_TITLE).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            // TODO: Check validity of input startDate value"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            startDate \u003d argMultimap.getValue(PREFIX_NOTE_START_DATE).get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            // TODO: Check validity of input startTime value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            startTime \u003d argMultimap.getValue(PREFIX_NOTE_START_TIME).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            // TODO: Check validity of input endDate value"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            endDate \u003d argMultimap.getValue(PREFIX_NOTE_END_DATE).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            // TODO: Check validity of input endTime value"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            endTime \u003d argMultimap.getValue(PREFIX_NOTE_END_TIME).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            location \u003d argMultimap.getValue(PREFIX_NOTE_LOCATION).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        // TODO: Validate date \u0026 time difference for \u0027start\u0027 and \u0027end\u0027 here"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        Note note \u003d new Note("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                moduleCode,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                title,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                startDate,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                endDate,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                endTime,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                location,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                \"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return new NoteAddCommand(note);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "jomcruz93": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NoteDeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteDeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Parses input arguments and creates a new NoteDeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteDeleteCommandParser implements Parser\u003cNoteDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NoteDeleteCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * and returns a NoteDeleteCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String index \u003d args.trim().replaceAll(\" +\", \"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (index.matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new NoteDeleteCommand(Integer.parseInt(index));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NoteDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NoteEditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteEditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Parses input arguments and creates a new NoteEditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteEditCommandParser implements Parser\u003cNoteEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Used to separate the index and optional parameters in the arguments."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final Pattern ARGS_FORMAT \u003d Pattern.compile(\"^\\\\s*(?\u003cindex\u003e\\\\S+)(?\u003coptionalParams\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NoteEditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * and returns a NoteEditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        Matcher matcher \u003d ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                    NoteEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        final String index \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        final String optionalParams \u003d matcher.group(\"optionalParams\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                ArgumentTokenizer.tokenize(optionalParams,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_MODULE_CODE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_NOTE_TITLE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_NOTE_START_DATE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_NOTE_START_TIME,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_NOTE_END_DATE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_NOTE_END_TIME,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        PREFIX_NOTE_LOCATION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (!index.matches(\"\\\\d+\") || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                    NoteEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String startDate \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String startTime \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String endDate \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String endTime \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String location \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            // TODO: Check validity of input moduleCode value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            title \u003d argMultimap.getValue(PREFIX_NOTE_TITLE).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            // TODO: Check validity of input startDate value"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            startDate \u003d argMultimap.getValue(PREFIX_NOTE_START_DATE).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            // TODO: Check validity of input startTime value"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            startTime \u003d argMultimap.getValue(PREFIX_NOTE_START_TIME).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            // TODO: Check validity of input endDate value"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            endDate \u003d argMultimap.getValue(PREFIX_NOTE_END_DATE).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            // TODO: Check validity of input endTime value"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            endTime \u003d argMultimap.getValue(PREFIX_NOTE_END_TIME).get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            location \u003d argMultimap.getValue(PREFIX_NOTE_LOCATION).get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return new NoteEditCommand("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                Integer.parseInt(index),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                moduleCode,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                title,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                startDate,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                endDate,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                endTime,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                location);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NoteExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_FILE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteExportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Parses input arguments and creates a new NoteExportCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteExportCommandParser implements Parser\u003cNoteExportCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NoteExportCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * and returns a NoteExportCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NOTE_FILE_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NOTE_FILE_NAME)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NoteExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String fileName \u003d argMultimap.getValue(PREFIX_NOTE_FILE_NAME).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (!fileName.matches(\"[ a-zA-Z0-9_\\\\-]+\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, NoteExportCommand.MESSAGE_INVALID_FILE_NAME));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return new NoteExportCommand(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NoteListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Parses input arguments and creates a new NoteListCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteListCommandParser implements Parser\u003cNoteListCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NoteListCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * and returns a NoteListCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new NoteListCommand(moduleCode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } else if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return new NoteListCommand(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                    NoteListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.FacultyName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Parses a {@code String matricNo} into an {@code MatricNo}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @throws ParseException if the given {@code matricNo} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static MatricNo parseMatric(String matricNo) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        requireNonNull(matricNo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String trimmedMatricNo \u003d matricNo.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!MatricNo.isValidMatricNo(trimmedMatricNo)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new ParseException(MatricNo.MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new MatricNo(trimmedMatricNo);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Parses a {@code Collection\u003cString\u003e matricNums} into a {@code Set\u003cMatricNo\u003e}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static Set\u003cMatricNo\u003e parseMatricNums(Collection\u003cString\u003e matricNums) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireNonNull(matricNums);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        final Set\u003cMatricNo\u003e matricNoSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        for (String matricNumber : matricNums) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            MatricNo matricNo \u003d parseMatric(matricNumber);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            matricNoSet.add(matricNo);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return matricNoSet;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Parses a {@code String courseName} into an {@code CourseName}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @throws ParseException if the given {@code courseName} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static CourseName parseCourseName(String courseName) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        requireNonNull(courseName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String trimmedCourseName \u003d courseName.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!CourseName.isValidCourseName(trimmedCourseName)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new ParseException(CourseName.MESSAGE_COURSE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new CourseName(trimmedCourseName);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Parses a {@code String facultyName} into an {@code FacultyName}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @throws ParseException if the given {@code facultyName} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static FacultyName parseFacultyName(String facultyName) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        requireNonNull(facultyName);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String trimmedFacultyName \u003d facultyName.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!FacultyName.isValidFacultyName(trimmedFacultyName)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new ParseException(FacultyName.MESSAGE_COURSE_FACULTY_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new FacultyName(trimmedFacultyName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Parses a {@code String courseCode} into an {@code CourseCode}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @throws ParseException if the given {@code courseCode} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static CourseCode parseCourseCode(String courseCode) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        requireNonNull(courseCode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String trimmedCourseCode \u003d courseCode.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!CourseCode.isValidCourseCode(trimmedCourseCode)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new ParseException(CourseCode.MESSAGE_COURSE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new CourseCode(trimmedCourseCode);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Parses a {@code String moduleCode} into a {@code ModuleCode}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @throws ParseException if the given {@code moduleCode} is invalid."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_MODULE_CODE_CONSTRAINT);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new ModuleCode(trimmedModuleCode);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Parses a {@code String moduleName} into a {@code ModuleName}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @throws ParseException if the given {@code moduleName} is invalid."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static ModuleName parseModuleName(String moduleName) throws ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        String trimmedModuleName \u003d moduleName.trim();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (!ModuleName.isValidModuleName(trimmedModuleName)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new ParseException(ModuleName.MESSAGE_MODULE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new ModuleName(trimmedModuleName);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 64,
      "-": 124,
      "harriuscai": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TrajectoryParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * This is a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class TrajectoryParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord1\u003e\\\\S+)(\\\\s*)(?\u003ccommandWord2\u003e\\\\S+)(\\\\s*)(?\u003carguments\u003e.*)\"); // to be updated"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "//    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 3,
      "jomcruz93": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * same as another existing person in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 2,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * The person identity of {@code editedPerson} must"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 4,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/StorageController.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedClassroom;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedCourse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedGradebook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedModule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedNote;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedStudentModule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.storage.serializable.XmlSerializableClassroomList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.serializable.XmlSerializableCourseList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.storage.serializable.XmlSerializableGradebookList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.storage.serializable.XmlSerializableModuleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.storage.serializable.XmlSerializableNoteList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.storage.serializable.XmlSerializableStudentModuleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.serializable.XmlSerializableUserList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * This class is a storage controller for the other datasets that work alongside the main student list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class StorageController {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final String BASE_DIRECTORY \u003d \"data/\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final String STORAGE_COURSES \u003d BASE_DIRECTORY + \"courseList.xml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final String STORAGE_MODULES \u003d BASE_DIRECTORY + \"modules.xml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final String STORAGE_CLASSES \u003d BASE_DIRECTORY + \"classes.xml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final String STORAGE_GRADEBOOK \u003d BASE_DIRECTORY + \"gradebook.xml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final String STORAGE_NOTES \u003d BASE_DIRECTORY + \"notes.xml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final String STORAGE_USERS \u003d BASE_DIRECTORY + \"users.xml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static final String STORAGE_STUDENT_MODULE \u003d BASE_DIRECTORY + \"studentModule.xml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static ArrayList\u003cXmlAdaptedCourse\u003e courseStorage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static ArrayList\u003cXmlAdaptedModule\u003e moduleStorage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static ArrayList\u003cXmlAdaptedClassroom\u003e classesStorage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static ArrayList\u003cXmlAdaptedGradebook\u003e gradebookStorage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static ArrayList\u003cXmlAdaptedNote\u003e noteStorage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static ArrayList\u003cXmlAdaptedUser\u003e userStorage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static ArrayList\u003cXmlAdaptedStudentModule\u003e studentModuleStorage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * This method retrieves all datasets saved locally."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static void retrieveData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        createFiles();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            XmlSerializableCourseList cl \u003d XmlUtil"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                    .getDataFromFile(Paths.get(STORAGE_COURSES), XmlSerializableCourseList.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            courseStorage \u003d cl.getList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            XmlSerializableModuleList moduleList \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                    XmlUtil.getDataFromFile(Paths.get(STORAGE_MODULES), XmlSerializableModuleList.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            moduleStorage \u003d moduleList.getModules();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            XmlSerializableClassroomList classroomList \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                    XmlUtil.getDataFromFile(Paths.get(STORAGE_CLASSES), XmlSerializableClassroomList.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            classesStorage \u003d classroomList.getClassroomList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            XmlSerializableNoteList noteList \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                    XmlUtil.getDataFromFile(Paths.get(STORAGE_NOTES), XmlSerializableNoteList.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteStorage \u003d noteList.getNotes();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            XmlSerializableGradebookList gradebookSerializable \u003d XmlUtil.getDataFromFile(Paths.get(STORAGE_GRADEBOOK),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                    XmlSerializableGradebookList.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            gradebookStorage \u003d gradebookSerializable.getGradebookList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            XmlSerializableUserList ul \u003d XmlUtil"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                    .getDataFromFile(Paths.get(STORAGE_USERS), XmlSerializableUserList.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            userStorage \u003d ul.getList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            XmlSerializableStudentModuleList studentModuleList \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                    XmlUtil.getDataFromFile(Paths.get(STORAGE_STUDENT_MODULE), XmlSerializableStudentModuleList.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            studentModuleStorage \u003d studentModuleList.getStudentModuleList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * This method creates files for all datasets if they do not exist on the local filesystem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static void createFiles() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        File classes \u003d new File(STORAGE_CLASSES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        File courses \u003d new File(STORAGE_COURSES);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        File modules \u003d new File(STORAGE_MODULES);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        File notes \u003d new File(STORAGE_NOTES);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        File gradebook \u003d new File(STORAGE_GRADEBOOK);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        File users \u003d new File(STORAGE_USERS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        File studentModule \u003d new File(STORAGE_STUDENT_MODULE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            classes.createNewFile();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            courses.createNewFile();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            modules.createNewFile();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            notes.createNewFile();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            gradebook.createNewFile();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            users.createNewFile();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            studentModule.createNewFile();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * This method stores all data within the arraylists above to local storage."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static void storeData() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            XmlSerializableCourseList cl \u003d new XmlSerializableCourseList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            cl.setCourseList(courseStorage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            XmlUtil.saveDataToFile(Paths.get(STORAGE_COURSES), cl);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            XmlSerializableModuleList moduleList \u003d new XmlSerializableModuleList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            moduleList.setModules(moduleStorage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            XmlUtil.saveDataToFile(Paths.get(STORAGE_MODULES), moduleList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            XmlSerializableClassroomList classroomList \u003d new XmlSerializableClassroomList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            classroomList.setClassroomList(classesStorage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            XmlUtil.saveDataToFile(Paths.get(STORAGE_CLASSES), classroomList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            XmlSerializableNoteList noteList \u003d new XmlSerializableNoteList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteList.setNotes(noteStorage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            XmlUtil.saveDataToFile(Paths.get(STORAGE_NOTES), noteList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            XmlSerializableGradebookList gradebookList \u003d new XmlSerializableGradebookList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            gradebookList.setGradebookList(gradebookStorage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            XmlUtil.saveDataToFile(Paths.get(STORAGE_GRADEBOOK), gradebookList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            XmlSerializableUserList ul \u003d new XmlSerializableUserList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            ul.setUserList(userStorage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            XmlUtil.saveDataToFile(Paths.get(STORAGE_USERS), ul);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            XmlSerializableStudentModuleList studentModuleList \u003d new XmlSerializableStudentModuleList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            studentModuleList.setStudentModuleList(studentModuleStorage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            XmlUtil.saveDataToFile(Paths.get(STORAGE_STUDENT_MODULE), studentModuleList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static ArrayList\u003cXmlAdaptedCourse\u003e getCourseStorage() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return courseStorage;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static void setCourseStorage(ArrayList\u003cXmlAdaptedCourse\u003e courseStorage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StorageController.courseStorage \u003d courseStorage;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static ArrayList\u003cXmlAdaptedModule\u003e getModuleStorage() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return moduleStorage;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static void setModuleStorage(ArrayList\u003cXmlAdaptedModule\u003e moduleList) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        moduleStorage \u003d moduleList;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static ArrayList\u003cXmlAdaptedClassroom\u003e getClassesStorage() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return classesStorage;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static void setClassesStorage(ArrayList\u003cXmlAdaptedClassroom\u003e classesStorage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StorageController.classesStorage \u003d classesStorage;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static ArrayList\u003cXmlAdaptedGradebook\u003e getGradebookStorage() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return gradebookStorage;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static void setGradebookStorage(ArrayList\u003cXmlAdaptedGradebook\u003e gradebookStorage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StorageController.gradebookStorage \u003d gradebookStorage;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static ArrayList\u003cXmlAdaptedNote\u003e getNoteStorage() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return noteStorage;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static void setNoteStorage(ArrayList\u003cXmlAdaptedNote\u003e noteList) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteStorage \u003d noteList;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static ArrayList\u003cXmlAdaptedUser\u003e getUserStorage() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return userStorage;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static void setUserStorage(ArrayList\u003cXmlAdaptedUser\u003e userStorage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StorageController.userStorage \u003d userStorage;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static ArrayList\u003cXmlAdaptedStudentModule\u003e getStudentModuleStorage() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return studentModuleStorage;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static void setStudentModuleStorage(ArrayList\u003cXmlAdaptedStudentModule\u003e studentModuleStorage) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        StorageController.studentModuleStorage \u003d studentModuleStorage;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 11,
      "m-aslam-mj2": 109,
      "zhicaizack": 10,
      "jomcruz93": 44,
      "harriuscai": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/classroom/ClassName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.model.classroom;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Represents a classname."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_CLASSNAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            \"Class Names should only contain between 1 to 3 alphanumeric characters and it should not be blank.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static final String MESSAGE_CLASSNAME_REGEX \u003d \"^[a-zA-Z0-9]{1,3}$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassName(String className) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(className);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        checkArgument(isValidClassName(className), MESSAGE_CLASSNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        value \u003d className;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static Boolean isValidClassName(String test) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return test.matches(MESSAGE_CLASSNAME_REGEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                || (other instanceof ClassName // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                \u0026\u0026 value.equals(((ClassName) other).value)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 2,
      "zhicaizack": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/classroom/Classroom.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.model.classroom;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.ui.HtmlTableProcessor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Represents a classroom in the app."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class Classroom {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private ClassName className;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private Enrollment maxEnrollment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private ArrayList\u003cString\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public Classroom(ClassName className, ModuleCode moduleCode, Enrollment maxEnrollment) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(className);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.className \u003d className;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.maxEnrollment \u003d maxEnrollment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassName getClassName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return className;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public Enrollment getMaxEnrollment() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return maxEnrollment;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ArrayList\u003cString\u003e getStudents() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return students;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void setStudents(ArrayList\u003cString\u003e students) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        builder.append(\"Class name: \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                .append(getClassName())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                .append(\" Module code: \")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                .append(getModuleCode())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                .append(\" Max Enrollment: \")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                .append(getMaxEnrollment());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Converts class into html string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public String toClassHtmlString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return HtmlTableProcessor"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                .renderTableItem(new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                        .asList(className.getValue(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                                moduleCode.moduleCode,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                                maxEnrollment.getValue())));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Returns true if both classrooms of the same className have the same moduleCode."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * This defines a weaker notion of equality between two classrooms."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public boolean isSameClassroom(Classroom otherClassroom) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (otherClassroom \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return otherClassroom !\u003d null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                \u0026\u0026 otherClassroom.getClassName().equals(getClassName())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                \u0026\u0026 (otherClassroom.getModuleCode().equals(getModuleCode()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Returns true if both classrooms have the same identity and data fields."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * This defines a stronger notion of equality between two classrooms."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!(other instanceof Classroom)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Classroom otherClassroom \u003d (Classroom) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return otherClassroom.getClassName().equals(getClassName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                \u0026\u0026 otherClassroom.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                \u0026\u0026 otherClassroom.getMaxEnrollment().equals(getMaxEnrollment());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Returns true if both classroom have the same class-specific fields."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return Objects.hash(className, moduleCode, maxEnrollment);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/classroom/ClassroomManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.model.classroom;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.StorageController;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedClassroom;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * This classroom manager stores classrooms for Trajectory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassroomManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ClassroomManager.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static ClassroomManager classroomManager \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private ArrayList\u003cClassroom\u003e classroomList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private ClassroomManager() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        readClassroomList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static ClassroomManager getInstance() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (classroomManager \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            classroomManager \u003d new ClassroomManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return classroomManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Adds a new classroomList to the in-memory array list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void addClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomList.add(classroom);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Finds a classroom from classroomList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public Classroom findClassroom(String className, String moduleCode) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        for (Classroom classroom : classroomList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            if (classroom.getClassName().getValue().equalsIgnoreCase(className)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                    \u0026\u0026 classroom.getModuleCode().moduleCode.equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                return classroom;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Search for duplication of student assigned to classroom"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public boolean isDuplicateClassroomStudent(Classroom classroom, String matricNo) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!classroom.getStudents().isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return classroom.getStudents().contains(matricNo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Removes a classroom from classroomList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void deleteClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomList.remove(classroom);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Gets the classroom list from storage and converts it to a Classroom array list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private void readClassroomList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ArrayList\u003cXmlAdaptedClassroom\u003e xmlClassroomList \u003d StorageController.getClassesStorage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        for (XmlAdaptedClassroom xmlClassroom : xmlClassroomList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                classroomList.add(xmlClassroom.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                logger.info(\"Illegal values found when reading classroom list: \" + e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Converts the classroom array list and invokes the StorageController to save the current classroom list to file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void saveClassroomList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ArrayList\u003cXmlAdaptedClassroom\u003e xmlClassroomList \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                classroomList"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                        .map(XmlAdaptedClassroom::new)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                        .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        StorageController.setClassesStorage(xmlClassroomList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        StorageController.storeData();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ArrayList\u003cClassroom\u003e getClassroomList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return this.classroomList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void setClassroomList(ArrayList\u003cClassroom\u003e classroomList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.classroomList \u003d classroomList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Returns true if a classroom with the same identity as {@code classToCreate} exists in the classroom list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public boolean hasClassroom(Classroom classToCreate) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(classToCreate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return (findClassroom(classToCreate.getClassName().getValue(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                classToCreate.getModuleCode().moduleCode)) !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Replaces the classroom {@code classtoEdit} in the list with {@code editedClass}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void updateClassroom(Classroom classtoEdit, Classroom editedClass) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        int index \u003d classroomList.indexOf(classtoEdit);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomList.set(index, editedClass);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Assigns a student by matricNo to the class"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void assignStudent(Classroom classToAssignStudent, String matricNo) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classToAssignStudent.getStudents().add(matricNo);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Unassigns a student by matricNo from the class"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void unassignStudent(Classroom classToUnassignStudent, String matricNo) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classToUnassignStudent.getStudents().remove(matricNo);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Checks if there exist this student matricNo from the classroom"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public boolean hasClassroomStudent(Classroom classToUnassignStudent, String matricNo) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return (classToUnassignStudent.getStudents().contains(matricNo));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/classroom/Enrollment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.model.classroom;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Represents an enrollment size for the class in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class Enrollment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MESSAGE_ENROLLMENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            \"Class enrollment size should only contain between 1 to 425 numeric characters\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                    + \" and it should not be blank.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private static final String MESSAGE_ENROLLMENT_REGEX \u003d \"^([1-9]|[1-9][0-9]|[1-4][0-2][0-5])$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public Enrollment() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public Enrollment(String maxEnrollment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        requireNonNull(maxEnrollment);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        checkArgument(isValidEnrollment(maxEnrollment), MESSAGE_ENROLLMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        value \u003d maxEnrollment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static Boolean isValidEnrollment(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return test.matches(MESSAGE_ENROLLMENT_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                || (other instanceof Enrollment // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                \u0026\u0026 value.equals(((Enrollment) other).value)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 2,
      "zhicaizack": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/Course.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * This is a representation of a course."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class Course {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private CourseCode courseCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private CourseName courseName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private FacultyName facultyName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public Course(CourseCode courseCode, CourseName courseName, FacultyName facultyName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseCode \u003d courseCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.facultyName \u003d facultyName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CourseCode getCourseCode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return courseCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setCourseCode(CourseCode courseCode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseCode \u003d courseCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CourseName getCourseName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return courseName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setCourseName(CourseName courseName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public FacultyName getFacultyName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return facultyName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setFacultyName(FacultyName facultyName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.facultyName \u003d facultyName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/CourseCode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Represents a course code, for individual courses."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCourseCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class CourseCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_COURSE_CODE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            \"Course codes may only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String COURSE_CODE_VALIDATION_REGEX \u003d \"^[a-zA-Z\\\\s]*$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public final String courseCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Constructs a {@code CourseCode}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @param courseCode A valid course code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CourseCode(String courseCode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        requireNonNull(courseCode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        checkArgument(isValidCourseCode(courseCode), MESSAGE_COURSE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseCode \u003d courseCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Returns true if a given string is a valid course code."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static boolean isValidCourseCode(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return test.matches(COURSE_CODE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return courseCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                || (other instanceof CourseCode // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 courseCode.equals(((CourseCode) other).courseCode)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return courseCode.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/CourseManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.StorageController;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedCourse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.ui.HtmlTableProcessor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * This class represents the model-level layer for course management."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class CourseManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static CourseManager initCM \u003d new CourseManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private ArrayList\u003cCourse\u003e courseList \u003d new ArrayList\u003cCourse\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private CourseManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        loadCourses();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Loads all the courses from the storage-layer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void loadCourses() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        for (XmlAdaptedCourse xmlCourse : StorageController.getCourseStorage()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            courseList.add(xmlCourse.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void deleteCourse (Course course) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        courseList.remove(course);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void addCourse(Course course) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        courseList.add(course);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static CourseManager getInstance() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initCM \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            initCM \u003d new CourseManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return initCM;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Checks if a course code already exists in Trajectory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @param courseCode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public boolean hasCourse(String courseCode) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        for (Course c: courseList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            if (c.getCourseCode().toString().equals(courseCode)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String getTableRepresentation() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        sb.append(HtmlTableProcessor.getH3Representation(\"Course List\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        sb.append(HtmlTableProcessor.renderTableStart(new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                Arrays.asList(\"Course Name\", \"Course Code\", \"School/Faculty\"))));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        sb.append(HtmlTableProcessor.getTableItemStart());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        for (Course c : courseList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            sb.append(HtmlTableProcessor"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                    .renderTableItem(new ArrayList\u003cString\u003e(Arrays"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                            .asList(c.getCourseName().toString(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                                    c.getCourseCode().toString(), c.getFacultyName().toString()))));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        sb.append(HtmlTableProcessor.getTableItemEnd());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public Course getCourse(String courseCode) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        for (Course c: courseList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            if (courseCode.equalsIgnoreCase(c.getCourseCode().toString())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                return c;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        throw new NullPointerException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Saves all courses currently in memory to file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void saveCourseList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        ArrayList\u003cXmlAdaptedCourse\u003e xmlAdaptedCourses \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                courseList.stream().map(XmlAdaptedCourse::new).collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StorageController.setCourseStorage(xmlAdaptedCourses);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StorageController.storeData();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public ArrayList\u003cCourse\u003e getCourses() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return courseList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setCourses(ArrayList\u003cCourse\u003e courses) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseList \u003d courses;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 98,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/CourseName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Represents a course name, for individual courses."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCourseName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class CourseName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_COURSE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            \"Course names may only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String COURSE_NAME_VALIDATION_REGEX \u003d \"^[a-zA-Z\\\\s]*$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public final String courseName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Constructs a {@code CourseName}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @param courseName A valid course code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CourseName(String courseName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        requireNonNull(courseName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        checkArgument(isValidCourseName(courseName), COURSE_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Returns true if a given string is a valid course code."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static boolean isValidCourseName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return test.matches(COURSE_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return courseName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                || (other instanceof CourseName // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 courseName.equals(((CourseName) other).courseName)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return courseName.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/FacultyName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Represents the name of a given faculty, for individual courses."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFacultyName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class FacultyName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_COURSE_FACULTY_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            \"Course codes may only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String COURSE_FACULTY_NAME_VALIDATION_REGEX \u003d \"^[a-zA-Z\\\\s]*$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public final String facultyName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Constructs a {@code FacultyName}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @param facultyName A valid course code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public FacultyName(String facultyName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        requireNonNull(facultyName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        checkArgument(isValidFacultyName(facultyName), MESSAGE_COURSE_FACULTY_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.facultyName \u003d facultyName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Returns true if a given string is a valid course code."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static boolean isValidFacultyName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return test.matches(COURSE_FACULTY_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return facultyName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                || (other instanceof FacultyName // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 facultyName.equals(((FacultyName) other).facultyName)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return facultyName.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/gradebook/Gradebook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.model.gradebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " This class includes all necessary validation for gradebook objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class Gradebook {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private String gradebookComponentName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private String gradebookNewComponentName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private int gradebookMaxMarks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private int gradebookWeightage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public Gradebook("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            String moduleCode,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            String gradebookComponentName,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            int gradebookMaxMarks,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            int gradebookWeightage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookComponentName \u003d gradebookComponentName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookMaxMarks \u003d gradebookMaxMarks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookWeightage \u003d gradebookWeightage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public Gradebook("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            String moduleCode,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            String gradebookComponentName,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            String gradebookNewComponentName,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            int gradebookMaxMarks,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            int gradebookWeightage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookComponentName \u003d gradebookComponentName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookNewComponentName \u003d gradebookNewComponentName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookMaxMarks \u003d gradebookMaxMarks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookWeightage \u003d gradebookWeightage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public Gradebook(String moduleCode, String gradebookComponentName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookComponentName \u003d gradebookComponentName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public String getgradebookNewComponentName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return this.gradebookNewComponentName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public String getGradeComponentName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return this.gradebookComponentName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void setGradeComponentName (String gradebookComponentName) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookComponentName \u003d gradebookComponentName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public int getGradeComponentMaxMarks() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return this.gradebookMaxMarks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void setgradebookMaxMarks (int gradebookMaxMarks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookMaxMarks \u003d gradebookMaxMarks;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public int getGradeComponentWeightage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return this.gradebookWeightage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void setgradebookWeightage (int gradebookWeightage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookWeightage \u003d gradebookWeightage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/gradebook/GradebookManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.model.gradebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.StorageController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedGradebook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " * The API of the GradebookManager component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private ArrayList\u003cGradebook\u003e gradebooks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public GradebookManager() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        readGradebookComponentsList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public ArrayList\u003cGradebook\u003e getGradebooks() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return gradebooks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Gets gradebook component list from storage and converts it to a Gradebook array list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private void readGradebookComponentsList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        ArrayList\u003cXmlAdaptedGradebook\u003e xmlGradebookList \u003d StorageController.getGradebookStorage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        for (XmlAdaptedGradebook xmlGradebook : xmlGradebookList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            gradebooks.add(xmlGradebook.toGradebookType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Converts the Gradebook array list and invokes the StorageController to save the current gradebook list to file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void saveGradebookList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        ArrayList\u003cXmlAdaptedGradebook\u003e xmlAdaptedGradebooks \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebooks.stream().map(XmlAdaptedGradebook::new).collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        StorageController.setGradebookStorage(xmlAdaptedGradebooks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        StorageController.storeData();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void clearGradebook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebooks.clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     This method adds gradebook component to a module in Trajectory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void addGradebookComponent (Gradebook gradebook) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebooks.add(gradebook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     This method deletes gradebook component to a module in Trajectory."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void deleteGradebookComponent (Gradebook gradebook) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebooks.remove(gradebook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     This method finds gradebook component to a module in Trajectory."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public Gradebook findGradebookComponent (String moduleCode, String gradebookComponentName) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        for (Gradebook gradebook : gradebooks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            if (gradebook.getModuleCode().equals(moduleCode)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                    \u0026\u0026 gradebook.getGradeComponentName().equals(gradebookComponentName)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                return gradebook;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     This method checks if module code and component name have empty inputs."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public boolean isEmpty (String moduleCode, String gradebookComponentName) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isEmpty \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (moduleCode.equals(\"\") || gradebookComponentName.equals(\"\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            isEmpty \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return isEmpty;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     This method checks if module code and component name already exist."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public boolean isDuplicate (String moduleCode, String gradebookComponentName) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isDuplicate \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        Gradebook gradebook \u003d findGradebookComponent(moduleCode, gradebookComponentName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (gradebook !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            isDuplicate \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return isDuplicate;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     This method checks if maximum marks are within acceptable range."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public boolean isMaxMarksValid (int gradebookMaxMarks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isMaxMarksValid \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (gradebookMaxMarks \u003e\u003d 0 \u0026\u0026 gradebookMaxMarks \u003c\u003d 100) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            isMaxMarksValid \u003d true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return isMaxMarksValid;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     This method checks if maximum marks are within acceptable range."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public boolean isWeightageValid (int gradebookWeightage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean isWeightageValid \u003d false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (gradebookWeightage \u003e\u003d 0 \u0026\u0026 gradebookWeightage \u003c\u003d 100) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            isWeightageValid \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return isWeightageValid;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     This method checks if weightage adds up to a maximum of 100."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public boolean hasWeightageExceed (String moduleCode, int gradebookWeightage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        boolean hasWeightageExceed \u003d false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int totalWeightage \u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        for (Gradebook gradebook : gradebooks) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            if (gradebook.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                totalWeightage +\u003d gradebook.getGradeComponentWeightage();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        if (totalWeightage + gradebookWeightage \u003e 101) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "            hasWeightageExceed \u003d true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return hasWeightageExceed;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Represents a module in Trajectory"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private ModuleName moduleName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private ArrayList\u003cPerson\u003e students;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public Module(ModuleCode moduleCode, ModuleName moduleName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ModuleName getModuleName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return this.moduleName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ArrayList\u003cPerson\u003e getEnrolledStudents() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return this.students;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void addStudent(Person student) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.students.add(student);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void removeStudent(Person student) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.students.remove(student);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Returns true if both modules have the same module code and name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                \u0026\u0026 otherModule.getModuleName().equals(getModuleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        builder.append(\"Module Code: \")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                .append(getModuleCode())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                .append(\" Module Name: \")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                .append(getModuleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Returns true if both modules have the same module code and data fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return otherModule.getModuleCode().equals((getModuleCode()))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                \u0026\u0026 otherModule.getModuleName().equals(getModuleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleCode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Represents a module code of a Module in Trajectory"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_MODULE_CODE_CONSTRAINT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            \"Module code should begin with 2 or 3 uppercase letters, followed by a 4-digit number and an optional\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \" uppercase letter at the end.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * The first 2 or 3 (optional) characters must be uppercase letters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * The following 1 character must be an integer from 1-9 (0 is not valid!)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * The subsequent 3 characters must be integers from 0-9."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Optionally, one more character may be added at the end to denote subtypes of a module."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * This final character must be an uppercase letter."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static final String MODULE_CODE_VALIDATION_REGEX \u003d \"^[A-Z]{2,3}[1-9][0-9]{3}[A-Z]?$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public final String moduleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Constructs a {@code ModuleCode}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @param moduleCode has to be a valid module code."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_MODULE_CODE_CONSTRAINT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Returns true if the input is a valid module code"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static boolean isValidModuleCode(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return input.matches(MODULE_CODE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((ModuleCode) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.StorageController;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.student.StudentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedStudentModule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * This module manager stores modules for Trajectory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleManager {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModuleManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static ModuleManager instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private ArrayList\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private ModuleManager() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        readModuleList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static ModuleManager getInstance() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            instance \u003d new ModuleManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Adds a new module to the in-memory array list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void addModule(Module module) throws DuplicateModuleException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (doesModuleExist(module)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * {@code target} must already exist in Trajectory"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        int targetIndex \u003d modules.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        modules.set(targetIndex, editedModule);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void deleteModule(Module toDelete) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        modules.remove(toDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void enrolStudentInModule(Module module, Person student) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        module.addStudent(student);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void removeStudentFromModule(Module module, Person student) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        module.removeStudent(student);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public boolean isStudentEnrolledInModule(Module module, Person student) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return module.getEnrolledStudents().stream().anyMatch(s -\u003e s.equals(student));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Gets the module list from storage and converts it to a Module array list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Also reads the association data between Student and Module and stores it in-memory in the module."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private void readModuleList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ArrayList\u003cXmlAdaptedModule\u003e xmlModuleList \u003d StorageController.getModuleStorage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ArrayList\u003cXmlAdaptedStudentModule\u003e xmlAdaptedStudentModuleList \u003d StorageController.getStudentModuleStorage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            for (XmlAdaptedModule xmlModule : xmlModuleList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                Module m \u003d xmlModule.toModelType();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                modules.add(m);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                // Look for associations between this module and any students (i.e. any enrolled students?)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                for (XmlAdaptedStudentModule xmlStudentModule : xmlAdaptedStudentModuleList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                    if (xmlStudentModule.getModuleCode().equals(m.getModuleCode().moduleCode)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                        Person student \u003d StudentManager.getInstance()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                                .retrieveStudentByMatricNo(xmlStudentModule.getStudentMatricNo());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                        m.addStudent(student);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            logger.info(\"Illegal values found when reading enrolled students: \" + npe.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            logger.info(\"Illegal values found when reading module list: \" + ive.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Converts the Module array list and invokes the StorageController to save the current module list to file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Also passes info on the association between Student and Module to be saved to file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void saveModuleList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ArrayList\u003cXmlAdaptedModule\u003e xmlAdaptedModules \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                modules.stream().map(XmlAdaptedModule::new).collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        StorageController.setModuleStorage(xmlAdaptedModules);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ArrayList\u003cXmlAdaptedStudentModule\u003e xmlAdaptedStudentModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        for (Module m : modules) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            xmlAdaptedStudentModuleList.addAll("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                    m.getEnrolledStudents()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                            .stream()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                            .map(s -\u003e new XmlAdaptedStudentModule("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                                    s.getMatricNo().matricNo, m.getModuleCode().moduleCode))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                            .collect(Collectors.toCollection(ArrayList::new))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            );"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        StorageController.setStudentModuleStorage(xmlAdaptedStudentModuleList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        StorageController.storeData();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Searches the list of modules to find a module that matches the {@code moduleCode}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @param moduleCode The target module\u0027s code to find"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @return The module object that matches the module code, or {@code null} if there isn\u0027t a matching module"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public Module getModuleByModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return this.modules.stream()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                .filter(module -\u003e module.getModuleCode().moduleCode.equals(moduleCode))"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                .findAny()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Checks if the input module already exists in Trajectory."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @param module The module whose existence needs to be checked."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @return True if the module exists; false otherwise."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public boolean doesModuleExist(Module module) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return this.modules.stream().anyMatch(m -\u003e m.equals(module));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Checks if the input module code matches a module that exists in Trajectory."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * This is an overload to make it easier to check a module\u0027s existence without"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * creating a whole {@oode Module} object."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * This overload adheres to the DRY principle by invoking the original"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * {@link #doesModuleExist(Module)} mathod."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @param moduleCode The module code that will be used to check for the module\u0027s existence."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @return True if the module exists; false otherwise."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public boolean doesModuleExist(String moduleCode) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Module module \u003d getModuleByModuleCode(moduleCode);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (module !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            return doesModuleExist(module);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ArrayList\u003cModule\u003e getModules() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return this.modules;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 173
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Represents a module name of a Module in Trajectory"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MESSAGE_MODULE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            \"Module name should only contain alphanumeric characters, spaces, hyphens (-), and ampersands (\u0026),\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            + \" and it should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * The first character of the module name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * The regex allows hyphens (-) for hyphenated words,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * and ampersands (\u0026) for shortening lengthy names with the word \"and\"."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * The 2 accepted symbols are not allowed as the first character of the module name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private static final String MODULE_NAME_VALIDATION_REGEX \u003d \"^[a-zA-z0-9][a-zA-z0-9-\u0026 ]+$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public final String moduleName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Constructs a {@code ModuleName}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * @param moduleName must be a valid module name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ModuleName(String moduleName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        checkArgument(isValidModuleName(moduleName), MESSAGE_MODULE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Returns true if the input is a valid module name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static boolean isValidModuleName(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return input.matches(MODULE_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return this.moduleName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                || (other instanceof ModuleName // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                \u0026\u0026 moduleName.equals(((ModuleName) other).moduleName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/DuplicateModuleException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Indicates if an operation will result in duplicate modules."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Modules are considered to be duplicates if they have the same module code and module name."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class DuplicateModuleException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        super(\"Module already exists\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Note.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Represents a note in Trajectory."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String noteText;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public Note(String moduleCode,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                String title,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                String startDate,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                String startTime,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                String endDate,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                String endTime,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                String location,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                String noteText) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.noteText \u003d noteText;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setStartDate(String startDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setStartTime(String startTime) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.endDate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setEndDate(String endDate) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setEndTime(String endTime) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.location;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getNoteText() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.noteText;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setNoteText(String noteText) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.noteText \u003d noteText;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 3,
      "jomcruz93": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/NoteManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.StorageController;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedNote;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.ui.HtmlCardProcessor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Represents the in-memory model of the Note data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final ArrayList\u003cString\u003e NOTE_CSV_HEADERS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                    \"subject\", \"startDate\", \"startTime\", \"endDate\", \"endTime\", \"description\", \"location\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static NoteManager noteManager \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private ArrayList\u003cNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private List\u003cNote\u003e filteredNotes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String currentFilter \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteManager() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        readNoteList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        filteredNotes \u003d notes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static NoteManager getInstance() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (noteManager \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteManager \u003d new NoteManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return noteManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Adds the new note to the in-memory ArrayList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        setFilteredNotes(currentFilter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Deletes the specified note from the in-memory ArrayList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * It also updates the filteredNotes list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void deleteNote(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        notes.remove(getNoteAt(index));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        setFilteredNotes(currentFilter);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getHtmlNoteList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        int listId \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        for (Note note: filteredNotes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(HtmlCardProcessor.getCardStart());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            if (note.getTitle().trim().isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                sb.append(HtmlCardProcessor.renderCardHeader("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        \"h4\", \"#\" + listId + \"\u0026nbsp;\u0026nbsp;\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                                + HtmlCardProcessor.CARD_NO_TITLE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                sb.append(HtmlCardProcessor.renderCardHeader("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        \"h4\", \"#\" + listId + \"\u0026nbsp;\u0026nbsp;\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                                + HtmlCardProcessor.adaptToHtml(note.getTitle())));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(HtmlCardProcessor.getCardBodyStart());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(HtmlCardProcessor.renderCardTitle(note.getModuleCode()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            // TODO: Check if note contains a date, otherwise do not render date subtitle"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(HtmlCardProcessor.renderCardSubtitle("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                    \"From \" + note.getStartDate() + \" \" + note.getStartTime()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                            + \" to \" + note.getEndDate() + \" \" + note.getEndTime()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(HtmlCardProcessor.renderCardSubtitle(HtmlCardProcessor.adaptToHtml(note.getLocation())));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(HtmlCardProcessor.renderCardText(HtmlCardProcessor.adaptToHtml(note.getNoteText())));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(HtmlCardProcessor.getDivEndTag()); // end of card-body"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(HtmlCardProcessor.getDivEndTag()); // end of card"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            listId++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Retrieves the Note object at the specified {@code index}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @param index index of the element to retrieve from the filteredNotes"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @return Note object at the specified index, or null if index is out of bounds."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public Note getNoteAt(int index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        Note noteToGet;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteToGet \u003d filteredNotes.get(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return noteToGet;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Gets the note list from storage and converts it to a Notes array list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private void readNoteList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        ArrayList\u003cXmlAdaptedNote\u003e xmlNoteList \u003d StorageController.getNoteStorage();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        for (XmlAdaptedNote xmlNote : xmlNoteList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            notes.add(xmlNote.toModelType());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Converts the Note array list and invokes the StorageController to save the current note list to file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void saveNoteList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        ArrayList\u003cXmlAdaptedNote\u003e xmlAdaptedNotes \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                notes.stream().map(XmlAdaptedNote::new).collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        StorageController.setNoteStorage(xmlAdaptedNotes);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        StorageController.storeData();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public ArrayList\u003cNote\u003e getNotes() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.notes;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setFilteredNotes(String moduleCode) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (!moduleCode.trim().isEmpty()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            filteredNotes \u003d notes.stream()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                    .filter(p -\u003e p.getModuleCode().equalsIgnoreCase(moduleCode)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            if (filteredNotes.size() \u003e 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                currentFilter \u003d moduleCode;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            currentFilter \u003d \"\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            filteredNotes \u003d notes;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public List\u003cNote\u003e getFilteredNotes() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return filteredNotes;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getCurrentFilter() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.currentFilter;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Removes all elements in notes list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void clearNotes() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        notes.clear();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        filteredNotes.clear();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        currentFilter \u003d \"\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public ArrayList\u003cString\u003e getCsvHeaders() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return NOTE_CSV_HEADERS;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public ArrayList\u003cNote\u003e getExportableNotes() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        ArrayList\u003cNote\u003e exportableNotes;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        exportableNotes \u003d notes.stream()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                .filter(p -\u003e (!p.getStartDate().isEmpty())).collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return exportableNotes;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 179
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/MatricNo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Represents a person\u0027s matriculation number."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatricNo(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class MatricNo {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MESSAGE_MATRIC_NO_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            \"Matriculation numbers are required to start with\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                    + \" A, followed by a combination of 7 numbers\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                    + \" and end with a checksum letter, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MATRIC_NO_VALIDATION_REGEX \u003d \"^[A]{1}\\\\d{7}[A-Z]{1}$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public final String matricNo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Constructs a {@code MatricNo}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @param matricNo A valid matric number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public MatricNo(String matricNo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        requireNonNull(matricNo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        checkArgument(isValidMatricNo(matricNo), MATRIC_NO_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.matricNo \u003d matricNo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Returns true if a given string is a valid matric number."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static boolean isValidMatricNo(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return test.matches(MATRIC_NO_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return matricNo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                || (other instanceof MatricNo // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 matricNo.equals(((MatricNo) other).matricNo)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return matricNo.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    // Student-specific fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private final CourseCode courseCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private final MatricNo matricNo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                  Set\u003cTag\u003e tags, CourseCode courseCode, MatricNo matricNo) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, courseCode, matricNo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseCode \u003d courseCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.matricNo \u003d matricNo;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CourseCode getCourseCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return courseCode;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public MatricNo getMatricNo() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return matricNo;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 otherPerson.getMatricNo().equals(getMatricNo())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 otherPerson.getCourseCode().equals(getCourseCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        builder.append(\"Course Code: \").append(getCourseCode()).append(\"Matric No: \").append(getMatricNo());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 24,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 2,
      "-": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/StudentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * This class represents the model-level layer for student management."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class StudentManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static StudentManager initSM \u003d new StudentManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model studentModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Link StudentManager to initialized Model in MainApp."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initializeModel(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        studentModel \u003d model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static StudentManager getInstance() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initSM \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            initSM \u003d new StudentManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return initSM;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether given matric code belongs to an existing student."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param matricNo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean doesStudentExistForGivenMatricNo(String matricNo) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person p:studentModel.getAddressBook().getPersonList()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            if (p.getMatricNo().matricNo.equals(matricNo)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether given matric code belongs to an existing student."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean doesStudentExistForGivenEmail(String email) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person p:studentModel.getAddressBook().getPersonList()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            if (p.getEmail().value.equals(email)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrives a student object for a given matriculation no."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param matricNo"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person retrieveStudentByMatricNo(String matricNo) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean studentFound \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person p:studentModel.getAddressBook().getPersonList()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            if (p.getMatricNo().matricNo.equals(matricNo)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                studentFound \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!studentFound) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrives a student object for a given matriculation no."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person retrieveStudentByEmail(String email) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean studentFound \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person p:studentModel.getAddressBook().getPersonList()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            if (p.getEmail().value.equals(email)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                studentFound \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!studentFound) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 2,
      "-": 98,
      "harriuscai": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * This is a representation of a user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String unhashedPassword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private int role;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public User(String email, String unhashedPassword, int role) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.unhashedPassword \u003d unhashedPassword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setEmail(String email) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String getUnhashedPassword() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return unhashedPassword;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setUnhashedPassword(String unhashedPassword) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.unhashedPassword \u003d unhashedPassword;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public int getRole() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setRole(int role) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/UserManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.StorageController;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * This class represents the model-level layer for user management."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class UserManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static UserManager initUM \u003d new UserManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private ArrayList\u003cUser\u003e userList \u003d new ArrayList\u003cUser\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private User loggedInUser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private boolean isAuthenticated \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private boolean disarmAuthSystem \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public UserManager() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        loadUsers();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Loads all the users from the storage-layer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void loadUsers() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        for (XmlAdaptedUser xmlUser : StorageController.getUserStorage()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            userList.add(xmlUser.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public boolean isDisarmAuthSystem() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return disarmAuthSystem;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static UserManager getInstance() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (initUM \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            initUM \u003d new UserManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return initUM;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void deleteUser (User user) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        userList.remove(user);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void addUser(User user) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        userList.add(user);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Authenticates the provided credentials of a user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public boolean authenticate(User user) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!hasUser(user.getEmail())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        User foundUser \u003d getUser(user.getEmail());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            if (foundUser.getUnhashedPassword().equals(user.getUnhashedPassword())) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                isAuthenticated \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                loggedInUser \u003d foundUser;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                logger.info(\"User has logged in.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Checks if the logged-in user is a teacher."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public boolean isTeacher() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (getLoggedInUserRole() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public int getLoggedInUserRole() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (isAuthenticated) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return loggedInUser.getRole();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public User getLoggedInUser() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return loggedInUser;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setLoggedInUser(User loggedInUser) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.loggedInUser \u003d loggedInUser;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public boolean isAuthenticated() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return isAuthenticated;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setAuthenticated(boolean authenticated) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        isAuthenticated \u003d authenticated;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Check if a user account with a provided email address exists."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public boolean hasUser(String userEmail) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        for (User c: userList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            if (userEmail.equalsIgnoreCase(c.getEmail())) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public User getUser(String userEmail) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        for (User c: userList) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            if (userEmail.equalsIgnoreCase(c.getEmail())) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                return c;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        throw new NullPointerException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Saves all users currently in memory to file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void saveUserList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        ArrayList\u003cXmlAdaptedUser\u003e xmlAdaptedUsers \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                userList.stream().map(XmlAdaptedUser::new).collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StorageController.setUserStorage(xmlAdaptedUsers);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StorageController.storeData();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public ArrayList\u003cUser\u003e getUsers() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return userList;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setUsers(ArrayList\u003cUser\u003e users) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.userList \u003d users;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 159
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                getTagSet(\"friends\"), new CourseCode(\"CEG\"), new MatricNo(\"A0154812B\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), new CourseCode(\"CEG\"), new MatricNo(\"A0154812B\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                getTagSet(\"neighbours\"), new CourseCode(\"CEG\"), new MatricNo(\"A0154812B\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                getTagSet(\"family\"), new CourseCode(\"CEG\"), new MatricNo(\"A0154812B\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                getTagSet(\"classmates\"), new CourseCode(\"CEG\"), new MatricNo(\"A0154812B\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                getTagSet(\"colleagues\"), new CourseCode(\"CEG\"), new MatricNo(\"A0154812B\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 8,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/adapter/CsvAdaptedNote.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.storage.adapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * CSV-friendly version of Note."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class CsvAdaptedNote {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final String COMMA_DELIM \u003d \",\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final String DOUBLE_QUOTE \u003d \"\\\"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String noteText;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public CsvAdaptedNote(Note note) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.moduleCode \u003d note.getModuleCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.title \u003d note.getTitle();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startDate \u003d note.getStartDate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startTime \u003d note.getStartTime();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endDate \u003d note.getEndDate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endTime \u003d note.getEndTime();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.location \u003d note.getLocation();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.noteText \u003d adaptToCsv(note.getNoteText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Escapes special characters used for HTML codes and"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * replaces string reserved characters to their HTML counterparts."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String adaptToCsv(String text) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return text"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                .replaceAll(\"\u0026\", \"\u0026amp;\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                .replaceAll(\"\u003c\", \"\u0026lt;\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                .replaceAll(\"\u003e\", \"\u0026gt;\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                .replaceAll(\"\\t\", \"\u0026emsp;\u0026emsp;\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                .replaceAll(\"(\\r\\n|\\n)\", \"\u003cbr /\u003e\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Creates a CSV-friendly string of Note data."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (!moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(DOUBLE_QUOTE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(moduleCode + \": \" + title);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(DOUBLE_QUOTE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(DOUBLE_QUOTE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(title);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            sb.append(DOUBLE_QUOTE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(COMMA_DELIM);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(startDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(COMMA_DELIM);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(startTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(COMMA_DELIM);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(endDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(COMMA_DELIM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(endTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(COMMA_DELIM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(DOUBLE_QUOTE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(noteText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(DOUBLE_QUOTE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(COMMA_DELIM);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(DOUBLE_QUOTE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(location);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(DOUBLE_QUOTE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/adapter/XmlAdaptedClassroom.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.storage.adapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Enrollment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * JAXB-friendly adapted version of the Classroom."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "@XmlRootElement(name \u003d \"class\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class XmlAdaptedClassroom {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Classroom\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    //class-specific fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @XmlElement(name \u003d \"className\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private String className;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @XmlElement(name \u003d \"moduleCode\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @XmlElement(name \u003d \"maxEnrollment\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private String maxEnrollment;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @XmlElementWrapper(name \u003d \"students\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @XmlElement(name \u003d \"matricNo\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private ArrayList\u003cString\u003e studentList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Constructs an XmlAdaptedClassroom."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public XmlAdaptedClassroom() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Constructs an {@code XmlAdaptedClassroom} with the given classroom details"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public XmlAdaptedClassroom(String className, String moduleCode, String maxEnrollment,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                               ArrayList\u003cString\u003e studentsList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.className \u003d className;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.maxEnrollment \u003d maxEnrollment;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.studentList \u003d studentsList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Converts a Classroom into an {@code XmlAdaptedClassroom} for JAXB use"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public XmlAdaptedClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.className \u003d classroom.getClassName().getValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.moduleCode \u003d classroom.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.maxEnrollment \u003d classroom.getMaxEnrollment().getValue();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.studentList \u003d classroom.getStudents();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Converts this XmlAdaptedClassroom into the model\u0027s Classroom object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public Classroom toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (className \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                    ClassName.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!ClassName.isValidClassName(className)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new IllegalValueException(ClassName.MESSAGE_CLASSNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final ClassName modelClassName \u003d new ClassName(className);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                    ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_MODULE_CODE_CONSTRAINT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (maxEnrollment \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                    Enrollment.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!Enrollment.isValidEnrollment(maxEnrollment)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            throw new IllegalValueException(Enrollment.MESSAGE_ENROLLMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final Enrollment modelEnrollment \u003d new Enrollment(maxEnrollment);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Classroom classroom \u003d new Classroom(modelClassName, modelModuleCode, modelEnrollment);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroom.setStudents(studentList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return classroom;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        if (!(other instanceof XmlAdaptedClassroom)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        XmlAdaptedClassroom otherClassroom \u003d (XmlAdaptedClassroom) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return Objects.equals(className, otherClassroom.className)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                \u0026\u0026 Objects.equals(moduleCode, otherClassroom.moduleCode)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                \u0026\u0026 Objects.equals(maxEnrollment, otherClassroom.maxEnrollment);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/adapter/XmlAdaptedCourse.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.storage.adapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.FacultyName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * This represents a course in Trajectory."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "@XmlRootElement(name \u003d \"course\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class XmlAdaptedCourse {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String courseCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String courseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String facultyName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlAdaptedCourse(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlAdaptedCourse(String courseCode, String courseName, String originFaculty) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseCode \u003d courseCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.facultyName \u003d originFaculty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlAdaptedCourse(Course course) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseCode \u003d course.getCourseCode().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseName \u003d course.getCourseName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.facultyName \u003d course.getFacultyName().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(name \u003d \"courseCode\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String getCourseCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return courseCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setCourseCode(String courseCode) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseCode \u003d courseCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(name \u003d \"courseName\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String getCourseName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return courseName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setCourseName(String courseName) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(name \u003d \"facultyName\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String getFacultyName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return facultyName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setFacultyName(String facultyName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.facultyName \u003d facultyName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public Course toModelType() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new Course(new CourseCode(courseCode), new CourseName(courseName), new FacultyName(facultyName));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/adapter/XmlAdaptedGradebook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.storage.adapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessorType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " * JAXB-friendly adapted version of the Gradebook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "@XmlRootElement(name \u003d \"gradeComponent\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "@XmlAccessorType(XmlAccessType.FIELD)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class XmlAdaptedGradebook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @XmlElement(name \u003d \"moduleCode\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @XmlElement(name \u003d \"gradeComponentName\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private String gradeComponentName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @XmlElement(name \u003d \"gradeComponentMaxMarks\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private int gradeComponentMaxMarks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @XmlElement(name \u003d \"gradeComponentWeightage\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private int gradeComponentWeightage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Constructs an XmlAdaptedModule."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public XmlAdaptedGradebook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Constructs an {@code XmlAdaptedGradebook} with the given gradebook component details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public XmlAdaptedGradebook(Gradebook gradebook) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.moduleCode \u003d gradebook.getModuleCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradeComponentName \u003d gradebook.getGradeComponentName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradeComponentMaxMarks \u003d gradebook.getGradeComponentMaxMarks();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradeComponentWeightage \u003d gradebook.getGradeComponentWeightage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Converts this XmlAdaptedGradebook into the model\u0027s Gradebook object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public Gradebook toGradebookType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return new Gradebook(moduleCode, gradeComponentName, gradeComponentMaxMarks, gradeComponentWeightage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public String getGradeComponentName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return gradeComponentName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public int getGradeComponentMaxMarks() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return gradeComponentMaxMarks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public int getGradeComponentWeightage() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return gradeComponentWeightage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/adapter/XmlAdaptedModule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.storage.adapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * JAXB-friendly adapted version of the Module."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "@XmlRootElement(name \u003d \"module\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class XmlAdaptedModule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @XmlElement(name \u003d \"moduleName\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @XmlElement(name \u003d \"moduleCode\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Constructs an XmlAdaptedModule."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public XmlAdaptedModule() { }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Constructs an {@code XmlAdaptedModule} with the given module details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public XmlAdaptedModule(String name, String code) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Converts a Module into an {@code XmlAdaptedModule} for JAXB use"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public XmlAdaptedModule(Module module) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.name \u003d module.getModuleName().moduleName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.code \u003d module.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Converts this XmlAdaptedModule into the model\u0027s Module object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (code \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(code)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_MODULE_CODE_CONSTRAINT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        final ModuleCode moduleCode \u003d new ModuleCode(code);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleName.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        if (!ModuleName.isValidModuleName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "            throw new IllegalValueException(ModuleName.MESSAGE_MODULE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        final ModuleName moduleName \u003d new ModuleName(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return new Module(moduleCode, moduleName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/adapter/XmlAdaptedNote.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.storage.adapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessorType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * JAXB-friendly adapted version of the Note."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "@XmlRootElement(name \u003d \"note\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "@XmlAccessorType(XmlAccessType.FIELD)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class XmlAdaptedNote {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @XmlElement(name \u003d \"moduleCode\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @XmlElement(name \u003d \"title\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @XmlElement(name \u003d \"startDate\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @XmlElement(name \u003d \"startTime\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @XmlElement(name \u003d \"endDate\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @XmlElement(name \u003d \"endTime\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @XmlElement(name \u003d \"location\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @XmlElement(name \u003d \"noteText\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String noteText;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Constructs an XmlAdaptedNote."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public XmlAdaptedNote() { }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Constructs an {@code XmlAdaptedNote} with the given note details"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public XmlAdaptedNote("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String moduleCode,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String title,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String startDate,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String startTime,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String endDate,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String endTime,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String location,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String noteText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.noteText \u003d noteText;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Converts a Note into an {@code XmlAdaptedNote} for JAXB use"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public XmlAdaptedNote(Note note) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.moduleCode \u003d note.getModuleCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.title \u003d note.getTitle();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startDate \u003d note.getStartDate();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startTime \u003d note.getStartTime();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endDate \u003d note.getEndDate();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endTime \u003d note.getEndTime();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.location \u003d note.getLocation();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.noteText \u003d note.getNoteText();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Converts this XmlAdaptedNote into the model\u0027s Note object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public Note toModelType() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return new Note("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                moduleCode,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                title,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                startDate,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                endDate,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                endTime,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                location,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                noteText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.endDate;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.location;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getNoteText() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.noteText;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/adapter/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "//@@author m-aslam-mj2"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.storage.adapter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String courseCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String matricNo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged, String courseCode, String matricNo) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.matricNo \u003d matricNo;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseCode \u003d courseCode;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        matricNo \u003d source.getMatricNo().matricNo;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        courseCode \u003d source.getCourseCode().courseCode;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (matricNo \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                    MatricNo.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!MatricNo.isValidMatricNo(matricNo)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new IllegalValueException(MatricNo.MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        final MatricNo modelMatricNo \u003d new MatricNo(matricNo);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (courseCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                    CourseCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!CourseCode.isValidCourseCode(courseCode)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new IllegalValueException(CourseCode.MESSAGE_COURSE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        final CourseCode modelCourseCode \u003d new CourseCode(courseCode);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelCourseCode, modelMatricNo);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 Objects.equals(courseCode, otherPerson.courseCode)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 Objects.equals(matricNo, otherPerson.matricNo)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 170
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/adapter/XmlAdaptedStudentModule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.storage.adapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * JAXB-friendly representation of the association between Student and Module."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "@XmlRootElement(name \u003d \"studentModule\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class XmlAdaptedStudentModule {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @XmlElement(name \u003d \"studentMatricNo\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private String studentMatricNo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @XmlElement(name \u003d \"moduleCode\", required \u003d true, nillable \u003d true)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public XmlAdaptedStudentModule() { }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Constructs an {@code XmlAdaptedStudentModule} with the given association details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public XmlAdaptedStudentModule(String studentMatricNo, String moduleCode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.studentMatricNo \u003d studentMatricNo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public String getStudentMatricNo() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return studentMatricNo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/adapter/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.storage.adapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/adapter/XmlAdaptedUser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.storage.adapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * This represents a user in Trajectory."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "@XmlRootElement(name \u003d \"user\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class XmlAdaptedUser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String unhashedPassword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private String role;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlAdaptedUser(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlAdaptedUser(String email, String unhashedPassword, String role) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.unhashedPassword \u003d unhashedPassword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlAdaptedUser(User user) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.email \u003d user.getEmail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.unhashedPassword \u003d user.getUnhashedPassword();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.role \u003d user.getRole() + \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(name \u003d \"email\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setEmail(String email) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(name \u003d \"unhashedPassword\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String getUnhashedPassword() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return unhashedPassword;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setUnhashedPassword(String unhashedPassword) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.unhashedPassword \u003d unhashedPassword;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(name \u003d \"role\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public String getRole() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setRole(String role) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public User toModelType() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new User(email, unhashedPassword, Integer.parseInt(role));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/serializable/XmlSerializableClassroomList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.storage.serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessorType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedClassroom;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * Represents a list of classrooms that is serializable to XML format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "@XmlRootElement(namespace \u003d \"seedu.address.storage.serializable\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "@XmlAccessorType(XmlAccessType.FIELD)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class XmlSerializableClassroomList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @XmlElementWrapper(name \u003d \"classrooms\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @XmlElement(name \u003d \"class\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private ArrayList\u003cXmlAdaptedClassroom\u003e classroomList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Initializes an empty list of classrooms"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public XmlSerializableClassroomList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        classroomList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ArrayList\u003cXmlAdaptedClassroom\u003e getClassroomList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return classroomList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void setClassroomList(ArrayList\u003cXmlAdaptedClassroom\u003e classroomList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.classroomList \u003d classroomList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/serializable/XmlSerializableCourseList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.storage.serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedCourse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "This course manager stores courses for Trajectory."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "@XmlRootElement(namespace \u003d \"seedu.address.model\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class XmlSerializableCourseList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElementWrapper(name \u003d \"courses\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(name \u003d \"course\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private ArrayList\u003cXmlAdaptedCourse\u003e courseList \u003d new ArrayList\u003cXmlAdaptedCourse\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlSerializableCourseList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        courseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlSerializableCourseList(ArrayList\u003cCourse\u003e src) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        courseList.addAll(src.stream().map(XmlAdaptedCourse::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public ArrayList\u003cXmlAdaptedCourse\u003e getList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return courseList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setCourseList(ArrayList\u003cXmlAdaptedCourse\u003e courseList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseList \u003d courseList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/serializable/XmlSerializableGradebookList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.storage.serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessorType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedGradebook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " * Represents a list of gradebook components that is serializable to XML format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "@XmlRootElement(namespace \u003d \"seedu.address.model\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "@XmlAccessorType(XmlAccessType.FIELD)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class XmlSerializableGradebookList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @XmlElementWrapper(name \u003d \"gradebook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @XmlElement(name \u003d \"gradeComponent\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private ArrayList\u003cXmlAdaptedGradebook\u003e gradebookList \u003d new ArrayList\u003cXmlAdaptedGradebook\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public ArrayList\u003cXmlAdaptedGradebook\u003e getGradebookList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return this.gradebookList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void setGradebookList(ArrayList\u003cXmlAdaptedGradebook\u003e gradebookList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookList \u003d gradebookList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/serializable/XmlSerializableModuleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.storage.serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessorType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedModule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Represents a list of modules that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "@XmlRootElement(namespace \u003d \"seedu.address.storage.serializable\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "@XmlAccessorType(XmlAccessType.FIELD)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class XmlSerializableModuleList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @XmlElementWrapper(name \u003d \"modules\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @XmlElement(name \u003d \"module\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private ArrayList\u003cXmlAdaptedModule\u003e modules;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Initializes an empty list of modules"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public XmlSerializableModuleList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Converts an array list of Modules into this class\u0027 format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public XmlSerializableModuleList(ArrayList\u003cModule\u003e src) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        modules.addAll(src.stream().map(XmlAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ArrayList\u003cXmlAdaptedModule\u003e getModules() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void setModules(ArrayList\u003cXmlAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/serializable/XmlSerializableNoteList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.storage.serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessorType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedNote;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Represents a list of notes that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "@XmlRootElement(namespace \u003d \"seedu.address.storage.serializable\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "@XmlAccessorType(XmlAccessType.FIELD)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class XmlSerializableNoteList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @XmlElementWrapper(name \u003d \"notes\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @XmlElement(name \u003d \"note\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private ArrayList\u003cXmlAdaptedNote\u003e notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Initializes an empty list of notes"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public XmlSerializableNoteList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Converts an array list of notes into this class\u0027 format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public XmlSerializableNoteList(ArrayList\u003cNote\u003e src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        notes.addAll(src.stream().map(XmlAdaptedNote::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public ArrayList\u003cXmlAdaptedNote\u003e getNotes() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setNotes(ArrayList\u003cXmlAdaptedNote\u003e notes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/serializable/XmlSerializableStudentModuleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.storage.serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessorType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedStudentModule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " * Represents a list of student-module associations that is serializable to XML format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "@XmlRootElement(namespace \u003d \"seedu.address.storage.serializable\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "@XmlAccessorType(XmlAccessType.FIELD)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class XmlSerializableStudentModuleList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @XmlElementWrapper(name \u003d \"studentModules\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @XmlElement(name \u003d \"studentModule\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    private ArrayList\u003cXmlAdaptedStudentModule\u003e studentModules;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     * Initializes an empty list of student-module associations"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public XmlSerializableStudentModuleList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.studentModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public ArrayList\u003cXmlAdaptedStudentModule\u003e getStudentModuleList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        return studentModules;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void setStudentModuleList(ArrayList\u003cXmlAdaptedStudentModule\u003e studentModules) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        this.studentModules \u003d studentModules;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/serializable/XmlSerializableUserList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.storage.serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " This user manager stores users for Trajectory."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "@XmlRootElement(namespace \u003d \"seedu.address.model\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class XmlSerializableUserList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElementWrapper(name \u003d \"users\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @XmlElement(name \u003d \"user\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private ArrayList\u003cXmlAdaptedUser\u003e userList \u003d new ArrayList\u003cXmlAdaptedUser\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlSerializableUserList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        userList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public XmlSerializableUserList(ArrayList\u003cUser\u003e src) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        userList.addAll(src.stream().map(XmlAdaptedUser::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public ArrayList\u003cXmlAdaptedUser\u003e getList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return userList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void setUserList(ArrayList\u003cXmlAdaptedUser\u003e userList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.userList \u003d userList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.commons.events.ui.NewInfoMessageEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        initializeCss();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        browser.getEngine().loadContent(HtmlTableProcessor"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                .renderCard(\"Welcome to Trajectory. Please login to use the platform.\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private void initializeCss() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        browser.getEngine().setUserStyleSheetLocation(getClass()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                .getResource(\"/rendering/bootstrap.min.css\").toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private void handleNewInfo(NewInfoMessageEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        browser.getEngine().loadContent(event.message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 16,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.commons.events.ui.NewInfoMessageEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            raise(new NewInfoMessageEvent(commandResult.feedbackToUserWebView));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 3,
      "jomcruz93": 3,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HtmlCardProcessor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * This class handles utility methods for the rendering of Strings to HTML cards."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class HtmlCardProcessor {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String CARD_NO_TITLE \u003d \"\u0026lt;No Title\u0026gt;\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * The top-most tag required to render a card in HTML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static String getCardStart() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return \"\u003cdiv class\u003d\\\"card text-white bg-primary mb-3\\\"\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Constructs a card header section in the card."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Uses the header style {@code headingType} specified."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @param headingType"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @param header"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @return string containing the HTML card header tag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static String renderCardHeader(String headingType, String header) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(\"  \u003c\" + headingType + \" class\u003d\\\"card-header\\\"\u003e\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(header);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(\"\u003c/\" + headingType + \"\u003e\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Constructs a card title section in the card."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @return string containing the HTML card title tag"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static String renderCardTitle(String title) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(\"    \u003ch4 class\u003d\\\"card-title\\\"\u003e\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(title);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(\"\u003c/h4\u003e\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Constructs a card subtitle section in the card."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @param subtitle"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @return string containing the HTML card subtitle tag"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static String renderCardSubtitle(String subtitle) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(\"    \u003ch6 class\u003d\\\"card-subtitle mb-2 text-muted\\\"\u003e\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(subtitle);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(\"\u003c/h6\u003e\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Constructs a card text section in the card."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @param text"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @return string containing the HTML card text tag"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static String renderCardText(String text) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(\"    \u003cp class\u003d\\\"card-text\\\"\u003e\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(text);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(\"\u003c/p\u003e\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * This method renders a footer to the card."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static String renderCardFooter(String footer) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(\"\u003cdiv class\u003d\\\"card-footer text-muted\\\"\u003e\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(\"  \" + footer + \"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        sb.append(getDivEndTag());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static String getCardBodyStart() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return \"\u003cdiv class\u003d\\\"card-body\\\"\u003e\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static String getDivEndTag() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return \"\u003c/div\u003e\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * This method converts HTML special characters in the string to"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * its literal character representation."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * The character \u0027\u0026\u0027 is replaced first so that HTML character entities in the string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * will be escaped."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * It is followed by replacing \u0027\u003c\u0027, and \u0027\u003e\u0027, to prevent"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * user input to be identified as HTML tags."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * String escape characters are converted to their HTML counterparts."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @param text"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @return an HTML adapted string"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static String adaptToHtml(String text) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return text"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                .replaceAll(\"\u0026\", \"\u0026amp;\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                .replaceAll(\"\u003c\", \"\u0026lt;\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                .replaceAll(\"\u003e\", \"\u0026gt;\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                .replaceAll(\" \", \"\u0026nbsp;\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                .replaceAll(\"\\t\", \"\u0026emsp;\u0026emsp;\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                .replaceAll(\"(\\r\\n|\\n)\", \"\u003cbr /\u003e\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HtmlTableProcessor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * This class handles utility methods for the rendering of Strings to HTML tables."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class HtmlTableProcessor {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * This method renders the table titles component ."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static String renderTableStart(ArrayList\u003cString\u003e tableHeaders) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        sb.append(getTableHeadStart());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        for (String s: tableHeaders) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            sb.append(getTableItem(s));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        sb.append(getTableHeadEnd());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * This method returns HTML resembling a single item in a HTML table."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static String renderTableItem(ArrayList\u003cString\u003e tableItem) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        sb.append(getTableItemStart());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        for (String s: tableItem) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            sb.append(getTableItem(s));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        sb.append(getTableItemEnd());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static String getTableHeadStart() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return \"\u003ctable class\u003d\\\"table table-hover\\\"\u003e\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + \"  \u003cthead\u003e\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + \"    \u003ctr\u003e\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static String getTableHeadItem(String item) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return \"\u003cth scope\u003d\\\"col\\\"\u003e\" + item + \"\u003c/th\u003e\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static String getH1Representation(String text) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return \"\u003ch1\u003e\" + text + \"\u003c/h1\u003e\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * This method returns HTML in a card form."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static String renderCard(String text) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return \"\u003cdiv class\u003d\\\"container-fluid\\\"\u003e\u003cdiv class\u003d\\\"row\\\"\u003e \u003cdiv class\u003d\\\"col-xl\\\"\u003e\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + \"\u003cdiv class\u003d\\\"card border-primary bg-primary mb-3\\\" style\u003d\\\"margin-top:30px;\\\"\u003e\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + \"  \u003cdiv class\u003d\\\"card-header\\\"\u003eInfo\u003c/div\u003e\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + \"  \u003cdiv class\u003d\\\"card-body\\\"\u003e\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + \"    \u003ch4 class\u003d\\\"card-title\\\"\u003e\" + text + \"\u003c/h4\u003e\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + \"\u003cp class\u003d\\\"card-text\\\"\u003e\" + \"\" + \"\u003c/p\u003e\\n\" + \"  \u003c/div\u003e\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + \"\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static String getH3Representation(String text) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return \"\u003ch3\u003e\" + text + \"\u003c/h3\u003e\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static String getTableHeadEnd() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return \"\u003c/tr\u003e\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + \"  \u003c/thead\u003e\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + \"  \u003ctbody\u003e\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static String getTableItemStart() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return \"\u003ctr class\u003d\\\"table-active\\\"\u003e\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static String getTableItem(String item) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return \"\u003ctd\u003e\" + item + \"\u003c/td\u003e\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static String getTableItemEnd() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return \"\u003c/tr\u003e\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static String getTableEnd() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return \"\\\"  \u003c/tbody\u003e\\\\n\\\" +\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + \"\\\"\u003c/table\u003e \\\"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        commandBox.focus();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 2,
      "-": 204
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NoteEntryPrompt.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.scene.input.KeyCodeCombination;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * This is the controller for the NoteEntryPromptWindow FXML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * It consists of a TextArea for the user to enter input in multiple lines."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteEntryPrompt {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final String NOTE_TAB_OVERWRITE \u003d \"    \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final String NOTE_TEXT_EMPTY_MESSAGE \u003d \"Saving failed! The field is empty.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final KeyCombination keyCombinationSave \u003d new KeyCodeCombination(KeyCode.S, KeyCombination.CONTROL_DOWN);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private final KeyCombination keyCombinationCancel \u003d new KeyCodeCombination(KeyCode.Q, KeyCombination.CONTROL_DOWN);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private TextArea noteContent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private Label feedbackLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private Stage dialogStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private boolean feedbackLabelIsDisplayed \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private boolean isCancelled \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteEntryPrompt() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setDialogStage(Stage dialogStage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.dialogStage \u003d dialogStage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Populates the TextArea with the editable note."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @param note"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setNote(Note note) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteContent.setText(note.getNoteText());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteContent.setPromptText(\"Enter note here.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Changes the behaviour of TAB key to add four spaces instead."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Key combination CTRL+S will save the note if the TextArea is not blank,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * otherwise, displays an error message."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Key combination CTRL+Q will close the window without saving the note."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (keyEvent.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            String tempStr \u003d noteContent.getText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            tempStr \u003d tempStr.substring(0, tempStr.length() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteContent.setText(tempStr);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            noteContent.appendText(NOTE_TAB_OVERWRITE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (feedbackLabelIsDisplayed \u0026\u0026 !keyEvent.getCode().isModifierKey()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            feedbackLabel.setText(\"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            feedbackLabelIsDisplayed \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (keyCombinationSave.match(keyEvent)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            saveAndCloseWindow();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (keyCombinationCancel.match(keyEvent)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            closeWindow();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Saves the note and closes the window."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void saveAndCloseWindow() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String tempNote \u003d noteContent.getText();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        if (!tempNote.trim().isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            note.setNoteText(tempNote);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            dialogStage.close();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            displayFeedbackLabel();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            feedbackLabelIsDisplayed \u003d true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private void displayFeedbackLabel() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        feedbackLabel.setStyle(\"-fx-font-size: 12; -fx-text-fill: red;\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        feedbackLabel.setText(NOTE_TEXT_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Closes the window without saving the note data."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void closeWindow() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        isCancelled \u003d true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        dialogStage.close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Returns true if the user pressed the key combination to cancel."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Otherwise, return false."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @return value of isCancelled."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public boolean isCancelled() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return isCancelled;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NoteTextEditWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Handles the displaying of a TextArea window for adding/editing a note."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteTextEditWindow {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final String PATH \u003d \"/view/NoteEntryPromptWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final String DEFAULT_WINDOW_TITLE \u003d \"Add/Edit note\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final double DEFAULT_MINIMUM_WIDTH \u003d 380.0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static final double DEFAULT_MINIMUM_HEIGHT \u003d 350.0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private Stage notePromptStage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteEntryPrompt controller;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteTextEditWindow(Note note) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        setUpWindow(DEFAULT_MINIMUM_WIDTH, DEFAULT_MINIMUM_HEIGHT, DEFAULT_WINDOW_TITLE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * This method sets up the window to be loaded and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * handles its configuration and behaviour."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private void setUpWindow(double minWidth, double minHeight, String title) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            controller \u003d new NoteEntryPrompt();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader(getClass().getResource(PATH));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            loader.setController(controller);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            BorderPane layout \u003d loader.load();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            Scene scene \u003d new Scene(layout);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            notePromptStage \u003d new Stage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            notePromptStage.setMinWidth(minWidth);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            notePromptStage.setMinHeight(minHeight);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            notePromptStage.setTitle(title);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            notePromptStage.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            notePromptStage.setScene(scene);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            notePromptStage.setOnCloseRequest(e -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                e.consume();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                controller.closeWindow();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            controller.setDialogStage(notePromptStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            controller.setNote(note);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void showAndWait() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        notePromptStage.showAndWait();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public boolean isCancelled() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return controller.isCancelled();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private Label matricNo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private Label courseCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        matricNo.setText(person.getMatricNo().matricNo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        courseCode.setText(person.getCourseCode().courseCode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 6,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(resultDisplay.getText() + event.message + \"\\n\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        Platform.runLater(() -\u003e resultDisplay.setScrollTop(Integer.MAX_VALUE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        Platform.runLater(() -\u003e resultDisplay.positionCaret(Integer.MAX_VALUE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 3,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            raise(new NewResultAvailableEvent(Messages.MESSAGE_WELCOME));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 4,
      "-": 120
    }
  },
  {
    "path": "src/main/resources/rendering/bootstrap.min.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "/*!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Bootswatch v4.1.3"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Homepage: https://bootswatch.com"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Copyright 2012-2018 Thomas Park"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Licensed under MIT"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Based on Bootstrap"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "*//*!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Bootstrap v4.1.3 (https://getbootstrap.com/)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Copyright 2011-2018 The Bootstrap Authors"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Copyright 2011-2018 Twitter, Inc."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " */@import url(\"https://fonts.googleapis.com/css?family\u003dLato:400,700,400italic\");:root{--blue:#375a7f;--indigo:#6610f2;--purple:#6f42c1;--pink:#e83e8c;--red:#E74C3C;--orange:#fd7e14;--yellow:#F39C12;--green:#00bc8c;--teal:#20c997;--cyan:#3498DB;--white:#fff;--gray:#999;--gray-dark:#303030;--primary:#375a7f;--secondary:#444;--success:#00bc8c;--info:#3498DB;--warning:#F39C12;--danger:#E74C3C;--light:#303030;--dark:#adb5bd;--breakpoint-xs:0;--breakpoint-sm:576px;--breakpoint-md:768px;--breakpoint-lg:992px;--breakpoint-xl:1200px;--font-family-sans-serif:\"Lato\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";--font-family-monospace:SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace}*,*::before,*::after{-webkit-box-sizing:border-box;box-sizing:border-box}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;-ms-overflow-style:scrollbar;-webkit-tap-highlight-color:transparent}@-ms-viewport{width:device-width}article,aside,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:\"Lato\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:0.9375rem;font-weight:400;line-height:1.5;color:#fff;text-align:left;background-color:#222}[tabindex\u003d\"-1\"]:focus{outline:0 !important}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:0.5rem}p{margin-top:0;margin-bottom:1rem}abbr[title],abbr[data-original-title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;border-bottom:0}address{margin-bottom:1rem;font-style:normal;line-height:inherit}ol,ul,dl{margin-top:0;margin-bottom:1rem}ol ol,ul ul,ol ul,ul ol{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}dfn{font-style:italic}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:#00bc8c;text-decoration:none;background-color:transparent;-webkit-text-decoration-skip:objects}a:hover{color:#007053;text-decoration:underline}a:not([href]):not([tabindex]){color:inherit;text-decoration:none}a:not([href]):not([tabindex]):hover,a:not([href]):not([tabindex]):focus{color:inherit;text-decoration:none}a:not([href]):not([tabindex]):focus{outline:0}pre,code,kbd,samp{font-family:SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1em}pre{margin-top:0;margin-bottom:1rem;overflow:auto;-ms-overflow-style:scrollbar}figure{margin:0 0 1rem}img{vertical-align:middle;border-style:none}svg{overflow:hidden;vertical-align:middle}table{border-collapse:collapse}caption{padding-top:0.75rem;padding-bottom:0.75rem;color:#999;text-align:left;caption-side:bottom}th{text-align:inherit}label{display:inline-block;margin-bottom:0.5rem}button{border-radius:0}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}input,button,select,optgroup,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}button,html [type\u003d\"button\"],[type\u003d\"reset\"],[type\u003d\"submit\"]{-webkit-appearance:button}button::-moz-focus-inner,[type\u003d\"button\"]::-moz-focus-inner,[type\u003d\"reset\"]::-moz-focus-inner,[type\u003d\"submit\"]::-moz-focus-inner{padding:0;border-style:none}input[type\u003d\"radio\"],input[type\u003d\"checkbox\"]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}input[type\u003d\"date\"],input[type\u003d\"time\"],input[type\u003d\"datetime-local\"],input[type\u003d\"month\"]{-webkit-appearance:listbox}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:.5rem;font-size:1.5rem;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type\u003d\"number\"]::-webkit-inner-spin-button,[type\u003d\"number\"]::-webkit-outer-spin-button{height:auto}[type\u003d\"search\"]{outline-offset:-2px;-webkit-appearance:none}[type\u003d\"search\"]::-webkit-search-cancel-button,[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item;cursor:pointer}template{display:none}[hidden]{display:none !important}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6{margin-bottom:0.5rem;font-family:inherit;font-weight:500;line-height:1.2;color:inherit}h1,.h1{font-size:3rem}h2,.h2{font-size:2.5rem}h3,.h3{font-size:2rem}h4,.h4{font-size:1.40625rem}h5,.h5{font-size:1.171875rem}h6,.h6{font-size:0.9375rem}.lead{font-size:1.171875rem;font-weight:300}.display-1{font-size:6rem;font-weight:300;line-height:1.2}.display-2{font-size:5.5rem;font-weight:300;line-height:1.2}.display-3{font-size:4.5rem;font-weight:300;line-height:1.2}.display-4{font-size:3.5rem;font-weight:300;line-height:1.2}hr{margin-top:1rem;margin-bottom:1rem;border:0;border-top:1px solid rgba(0,0,0,0.1)}small,.small{font-size:80%;font-weight:400}mark,.mark{padding:0.2em;background-color:#fcf8e3}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:0.5rem}.initialism{font-size:90%;text-transform:uppercase}.blockquote{margin-bottom:1rem;font-size:1.171875rem}.blockquote-footer{display:block;font-size:80%;color:#999}.blockquote-footer::before{content:\"\\2014 \\00A0\"}.img-fluid{max-width:100%;height:auto}.img-thumbnail{padding:0.25rem;background-color:#222;border:1px solid #dee2e6;border-radius:0.25rem;max-width:100%;height:auto}.figure{display:inline-block}.figure-img{margin-bottom:0.5rem;line-height:1}.figure-caption{font-size:90%;color:#999}code{font-size:87.5%;color:#e83e8c;word-break:break-word}a\u003ecode{color:inherit}kbd{padding:0.2rem 0.4rem;font-size:87.5%;color:#fff;background-color:#222;border-radius:0.2rem}kbd kbd{padding:0;font-size:100%;font-weight:700}pre{display:block;font-size:87.5%;color:inherit}pre code{font-size:inherit;color:inherit;word-break:normal}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width: 576px){.container{max-width:540px}}@media (min-width: 768px){.container{max-width:720px}}@media (min-width: 992px){.container{max-width:960px}}@media (min-width: 1200px){.container{max-width:1140px}}.container-fluid{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.row{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.no-gutters{margin-right:0;margin-left:0}.no-gutters\u003e.col,.no-gutters\u003e[class*\u003d\"col-\"]{padding-right:0;padding-left:0}.col-1,.col-2,.col-3,.col-4,.col-5,.col-6,.col-7,.col-8,.col-9,.col-10,.col-11,.col-12,.col,.col-auto,.col-sm-1,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm,.col-sm-auto,.col-md-1,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-10,.col-md-11,.col-md-12,.col-md,.col-md-auto,.col-lg-1,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg,.col-lg-auto,.col-xl-1,.col-xl-2,.col-xl-3,.col-xl-4,.col-xl-5,.col-xl-6,.col-xl-7,.col-xl-8,.col-xl-9,.col-xl-10,.col-xl-11,.col-xl-12,.col-xl,.col-xl-auto{position:relative;width:100%;min-height:1px;padding-right:15px;padding-left:15px}.col{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-1{-webkit-box-flex:0;-ms-flex:0 0 8.3333333333%;flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-2{-webkit-box-flex:0;-ms-flex:0 0 16.6666666667%;flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-4{-webkit-box-flex:0;-ms-flex:0 0 33.3333333333%;flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-5{-webkit-box-flex:0;-ms-flex:0 0 41.6666666667%;flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-7{-webkit-box-flex:0;-ms-flex:0 0 58.3333333333%;flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-8{-webkit-box-flex:0;-ms-flex:0 0 66.6666666667%;flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-10{-webkit-box-flex:0;-ms-flex:0 0 83.3333333333%;flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-11{-webkit-box-flex:0;-ms-flex:0 0 91.6666666667%;flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-last{-webkit-box-ordinal-group:14;-ms-flex-order:13;order:13}.order-0{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}.order-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-1{margin-left:8.3333333333%}.offset-2{margin-left:16.6666666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.3333333333%}.offset-5{margin-left:41.6666666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.3333333333%}.offset-8{margin-left:66.6666666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.3333333333%}.offset-11{margin-left:91.6666666667%}@media (min-width: 576px){.col-sm{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-sm-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-sm-1{-webkit-box-flex:0;-ms-flex:0 0 8.3333333333%;flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-sm-2{-webkit-box-flex:0;-ms-flex:0 0 16.6666666667%;flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-sm-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-sm-4{-webkit-box-flex:0;-ms-flex:0 0 33.3333333333%;flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-sm-5{-webkit-box-flex:0;-ms-flex:0 0 41.6666666667%;flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-sm-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-sm-7{-webkit-box-flex:0;-ms-flex:0 0 58.3333333333%;flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-sm-8{-webkit-box-flex:0;-ms-flex:0 0 66.6666666667%;flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-sm-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-sm-10{-webkit-box-flex:0;-ms-flex:0 0 83.3333333333%;flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-sm-11{-webkit-box-flex:0;-ms-flex:0 0 91.6666666667%;flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-sm-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-sm-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-sm-last{-webkit-box-ordinal-group:14;-ms-flex-order:13;order:13}.order-sm-0{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}.order-sm-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-sm-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-sm-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-sm-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-sm-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-sm-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-sm-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-sm-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-sm-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-sm-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-sm-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-sm-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.3333333333%}.offset-sm-2{margin-left:16.6666666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.3333333333%}.offset-sm-5{margin-left:41.6666666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.3333333333%}.offset-sm-8{margin-left:66.6666666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.3333333333%}.offset-sm-11{margin-left:91.6666666667%}}@media (min-width: 768px){.col-md{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-md-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-md-1{-webkit-box-flex:0;-ms-flex:0 0 8.3333333333%;flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-md-2{-webkit-box-flex:0;-ms-flex:0 0 16.6666666667%;flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-md-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-md-4{-webkit-box-flex:0;-ms-flex:0 0 33.3333333333%;flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-md-5{-webkit-box-flex:0;-ms-flex:0 0 41.6666666667%;flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-md-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-md-7{-webkit-box-flex:0;-ms-flex:0 0 58.3333333333%;flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-md-8{-webkit-box-flex:0;-ms-flex:0 0 66.6666666667%;flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-md-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-md-10{-webkit-box-flex:0;-ms-flex:0 0 83.3333333333%;flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-md-11{-webkit-box-flex:0;-ms-flex:0 0 91.6666666667%;flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-md-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-md-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-md-last{-webkit-box-ordinal-group:14;-ms-flex-order:13;order:13}.order-md-0{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}.order-md-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-md-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-md-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-md-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-md-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-md-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-md-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-md-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-md-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-md-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-md-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-md-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.3333333333%}.offset-md-2{margin-left:16.6666666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.3333333333%}.offset-md-5{margin-left:41.6666666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.3333333333%}.offset-md-8{margin-left:66.6666666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.3333333333%}.offset-md-11{margin-left:91.6666666667%}}@media (min-width: 992px){.col-lg{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-lg-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-lg-1{-webkit-box-flex:0;-ms-flex:0 0 8.3333333333%;flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-lg-2{-webkit-box-flex:0;-ms-flex:0 0 16.6666666667%;flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-lg-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-lg-4{-webkit-box-flex:0;-ms-flex:0 0 33.3333333333%;flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-lg-5{-webkit-box-flex:0;-ms-flex:0 0 41.6666666667%;flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-lg-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-lg-7{-webkit-box-flex:0;-ms-flex:0 0 58.3333333333%;flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-lg-8{-webkit-box-flex:0;-ms-flex:0 0 66.6666666667%;flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-lg-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-lg-10{-webkit-box-flex:0;-ms-flex:0 0 83.3333333333%;flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-lg-11{-webkit-box-flex:0;-ms-flex:0 0 91.6666666667%;flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-lg-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-lg-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-lg-last{-webkit-box-ordinal-group:14;-ms-flex-order:13;order:13}.order-lg-0{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}.order-lg-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-lg-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-lg-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-lg-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-lg-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-lg-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-lg-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-lg-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-lg-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-lg-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-lg-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-lg-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.3333333333%}.offset-lg-2{margin-left:16.6666666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.3333333333%}.offset-lg-5{margin-left:41.6666666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.3333333333%}.offset-lg-8{margin-left:66.6666666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.3333333333%}.offset-lg-11{margin-left:91.6666666667%}}@media (min-width: 1200px){.col-xl{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-xl-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-xl-1{-webkit-box-flex:0;-ms-flex:0 0 8.3333333333%;flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-xl-2{-webkit-box-flex:0;-ms-flex:0 0 16.6666666667%;flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-xl-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-xl-4{-webkit-box-flex:0;-ms-flex:0 0 33.3333333333%;flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-xl-5{-webkit-box-flex:0;-ms-flex:0 0 41.6666666667%;flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-xl-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-xl-7{-webkit-box-flex:0;-ms-flex:0 0 58.3333333333%;flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-xl-8{-webkit-box-flex:0;-ms-flex:0 0 66.6666666667%;flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-xl-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-xl-10{-webkit-box-flex:0;-ms-flex:0 0 83.3333333333%;flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-xl-11{-webkit-box-flex:0;-ms-flex:0 0 91.6666666667%;flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-xl-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-xl-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-xl-last{-webkit-box-ordinal-group:14;-ms-flex-order:13;order:13}.order-xl-0{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}.order-xl-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-xl-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-xl-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-xl-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-xl-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-xl-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-xl-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-xl-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-xl-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-xl-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-xl-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-xl-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.3333333333%}.offset-xl-2{margin-left:16.6666666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.3333333333%}.offset-xl-5{margin-left:41.6666666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.3333333333%}.offset-xl-8{margin-left:66.6666666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.3333333333%}.offset-xl-11{margin-left:91.6666666667%}}.table{width:100%;margin-bottom:1rem;background-color:transparent}.table th,.table td{padding:0.75rem;vertical-align:top;border-top:1px solid #444}.table thead th{vertical-align:bottom;border-bottom:2px solid #444}.table tbody+tbody{border-top:2px solid #444}.table .table{background-color:#222}.table-sm th,.table-sm td{padding:0.3rem}.table-bordered{border:1px solid #444}.table-bordered th,.table-bordered td{border:1px solid #444}.table-bordered thead th,.table-bordered thead td{border-bottom-width:2px}.table-borderless th,.table-borderless td,.table-borderless thead th,.table-borderless tbody+tbody{border:0}.table-striped tbody tr:nth-of-type(odd){background-color:#303030}.table-hover tbody tr:hover{background-color:rgba(0,0,0,0.075)}.table-primary,.table-primary\u003eth,.table-primary\u003etd{background-color:#c7d1db}.table-hover .table-primary:hover{background-color:#b7c4d1}.table-hover .table-primary:hover\u003etd,.table-hover .table-primary:hover\u003eth{background-color:#b7c4d1}.table-secondary,.table-secondary\u003eth,.table-secondary\u003etd{background-color:#cbcbcb}.table-hover .table-secondary:hover{background-color:#bebebe}.table-hover .table-secondary:hover\u003etd,.table-hover .table-secondary:hover\u003eth{background-color:#bebebe}.table-success,.table-success\u003eth,.table-success\u003etd{background-color:#b8ecdf}.table-hover .table-success:hover{background-color:#a4e7d6}.table-hover .table-success:hover\u003etd,.table-hover .table-success:hover\u003eth{background-color:#a4e7d6}.table-info,.table-info\u003eth,.table-info\u003etd{background-color:#c6e2f5}.table-hover .table-info:hover{background-color:#b0d7f1}.table-hover .table-info:hover\u003etd,.table-hover .table-info:hover\u003eth{background-color:#b0d7f1}.table-warning,.table-warning\u003eth,.table-warning\u003etd{background-color:#fce3bd}.table-hover .table-warning:hover{background-color:#fbd9a5}.table-hover .table-warning:hover\u003etd,.table-hover .table-warning:hover\u003eth{background-color:#fbd9a5}.table-danger,.table-danger\u003eth,.table-danger\u003etd{background-color:#f8cdc8}.table-hover .table-danger:hover{background-color:#f5b8b1}.table-hover .table-danger:hover\u003etd,.table-hover .table-danger:hover\u003eth{background-color:#f5b8b1}.table-light,.table-light\u003eth,.table-light\u003etd{background-color:#c5c5c5}.table-hover .table-light:hover{background-color:#b8b8b8}.table-hover .table-light:hover\u003etd,.table-hover .table-light:hover\u003eth{background-color:#b8b8b8}.table-dark,.table-dark\u003eth,.table-dark\u003etd{background-color:#e8eaed}.table-hover .table-dark:hover{background-color:#dadde2}.table-hover .table-dark:hover\u003etd,.table-hover .table-dark:hover\u003eth{background-color:#dadde2}.table-active,.table-active\u003eth,.table-active\u003etd{background-color:rgba(0,0,0,0.075)}.table-hover .table-active:hover{background-color:rgba(0,0,0,0.075)}.table-hover .table-active:hover\u003etd,.table-hover .table-active:hover\u003eth{background-color:rgba(0,0,0,0.075)}.table .thead-dark th{color:#222;background-color:#adb5bd;border-color:#98a2ac}.table .thead-light th{color:#444;background-color:#ebebeb;border-color:#444}.table-dark{color:#222;background-color:#adb5bd}.table-dark th,.table-dark td,.table-dark thead th{border-color:#98a2ac}.table-dark.table-bordered{border:0}.table-dark.table-striped tbody tr:nth-of-type(odd){background-color:rgba(255,255,255,0.05)}.table-dark.table-hover tbody tr:hover{background-color:rgba(255,255,255,0.075)}@media (max-width: 575.98px){.table-responsive-sm{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-sm\u003e.table-bordered{border:0}}@media (max-width: 767.98px){.table-responsive-md{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-md\u003e.table-bordered{border:0}}@media (max-width: 991.98px){.table-responsive-lg{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-lg\u003e.table-bordered{border:0}}@media (max-width: 1199.98px){.table-responsive-xl{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-xl\u003e.table-bordered{border:0}}.table-responsive{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive\u003e.table-bordered{border:0}.form-control{display:block;width:100%;height:calc(2.15625rem + 2px);padding:0.375rem 0.75rem;font-size:0.9375rem;line-height:1.5;color:#444;background-color:#fff;background-clip:padding-box;border:1px solid transparent;border-radius:0.25rem;-webkit-transition:border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out}@media screen and (prefers-reduced-motion: reduce){.form-control{-webkit-transition:none;transition:none}}.form-control::-ms-expand{background-color:transparent;border:0}.form-control:focus{color:#444;background-color:#fff;border-color:#739ac2;outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(55,90,127,0.25);box-shadow:0 0 0 0.2rem rgba(55,90,127,0.25)}.form-control::-webkit-input-placeholder{color:#999;opacity:1}.form-control:-ms-input-placeholder{color:#999;opacity:1}.form-control::-ms-input-placeholder{color:#999;opacity:1}.form-control::placeholder{color:#999;opacity:1}.form-control:disabled,.form-control[readonly]{background-color:#ebebeb;opacity:1}select.form-control:focus::-ms-value{color:#444;background-color:#fff}.form-control-file,.form-control-range{display:block;width:100%}.col-form-label{padding-top:calc(0.375rem + 1px);padding-bottom:calc(0.375rem + 1px);margin-bottom:0;font-size:inherit;line-height:1.5}.col-form-label-lg{padding-top:calc(0.5rem + 1px);padding-bottom:calc(0.5rem + 1px);font-size:1.171875rem;line-height:1.5}.col-form-label-sm{padding-top:calc(0.25rem + 1px);padding-bottom:calc(0.25rem + 1px);font-size:0.8203125rem;line-height:1.5}.form-control-plaintext{display:block;width:100%;padding-top:0.375rem;padding-bottom:0.375rem;margin-bottom:0;line-height:1.5;color:#fff;background-color:transparent;border:solid transparent;border-width:1px 0}.form-control-plaintext.form-control-sm,.form-control-plaintext.form-control-lg{padding-right:0;padding-left:0}.form-control-sm{height:calc(1.73046875rem + 2px);padding:0.25rem 0.5rem;font-size:0.8203125rem;line-height:1.5;border-radius:0.2rem}.form-control-lg{height:calc(2.7578125rem + 2px);padding:0.5rem 1rem;font-size:1.171875rem;line-height:1.5;border-radius:0.3rem}select.form-control[size],select.form-control[multiple]{height:auto}textarea.form-control{height:auto}.form-group{margin-bottom:1rem}.form-text{display:block;margin-top:0.25rem}.form-row{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-5px;margin-left:-5px}.form-row\u003e.col,.form-row\u003e[class*\u003d\"col-\"]{padding-right:5px;padding-left:5px}.form-check{position:relative;display:block;padding-left:1.25rem}.form-check-input{position:absolute;margin-top:0.3rem;margin-left:-1.25rem}.form-check-input:disabled ~ .form-check-label{color:#999}.form-check-label{margin-bottom:0}.form-check-inline{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-left:0;margin-right:0.75rem}.form-check-inline .form-check-input{position:static;margin-top:0;margin-right:0.3125rem;margin-left:0}.valid-feedback{display:none;width:100%;margin-top:0.25rem;font-size:80%;color:#00bc8c}.valid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:0.25rem 0.5rem;margin-top:.1rem;font-size:0.8203125rem;line-height:1.5;color:#fff;background-color:rgba(0,188,140,0.9);border-radius:0.25rem}.was-validated .form-control:valid,.form-control.is-valid,.was-validated .custom-select:valid,.custom-select.is-valid{border-color:#00bc8c}.was-validated .form-control:valid:focus,.form-control.is-valid:focus,.was-validated .custom-select:valid:focus,.custom-select.is-valid:focus{border-color:#00bc8c;-webkit-box-shadow:0 0 0 0.2rem rgba(0,188,140,0.25);box-shadow:0 0 0 0.2rem rgba(0,188,140,0.25)}.was-validated .form-control:valid ~ .valid-feedback,.was-validated .form-control:valid ~ .valid-tooltip,.form-control.is-valid ~ .valid-feedback,.form-control.is-valid ~ .valid-tooltip,.was-validated .custom-select:valid ~ .valid-feedback,.was-validated .custom-select:valid ~ .valid-tooltip,.custom-select.is-valid ~ .valid-feedback,.custom-select.is-valid ~ .valid-tooltip{display:block}.was-validated .form-control-file:valid ~ .valid-feedback,.was-validated .form-control-file:valid ~ .valid-tooltip,.form-control-file.is-valid ~ .valid-feedback,.form-control-file.is-valid ~ .valid-tooltip{display:block}.was-validated .form-check-input:valid ~ .form-check-label,.form-check-input.is-valid ~ .form-check-label{color:#00bc8c}.was-validated .form-check-input:valid ~ .valid-feedback,.was-validated .form-check-input:valid ~ .valid-tooltip,.form-check-input.is-valid ~ .valid-feedback,.form-check-input.is-valid ~ .valid-tooltip{display:block}.was-validated .custom-control-input:valid ~ .custom-control-label,.custom-control-input.is-valid ~ .custom-control-label{color:#00bc8c}.was-validated .custom-control-input:valid ~ .custom-control-label::before,.custom-control-input.is-valid ~ .custom-control-label::before{background-color:#3dffcd}.was-validated .custom-control-input:valid ~ .valid-feedback,.was-validated .custom-control-input:valid ~ .valid-tooltip,.custom-control-input.is-valid ~ .valid-feedback,.custom-control-input.is-valid ~ .valid-tooltip{display:block}.was-validated .custom-control-input:valid:checked ~ .custom-control-label::before,.custom-control-input.is-valid:checked ~ .custom-control-label::before{background-color:#00efb2}.was-validated .custom-control-input:valid:focus ~ .custom-control-label::before,.custom-control-input.is-valid:focus ~ .custom-control-label::before{-webkit-box-shadow:0 0 0 1px #222,0 0 0 0.2rem rgba(0,188,140,0.25);box-shadow:0 0 0 1px #222,0 0 0 0.2rem rgba(0,188,140,0.25)}.was-validated .custom-file-input:valid ~ .custom-file-label,.custom-file-input.is-valid ~ .custom-file-label{border-color:#00bc8c}.was-validated .custom-file-input:valid ~ .custom-file-label::after,.custom-file-input.is-valid ~ .custom-file-label::after{border-color:inherit}.was-validated .custom-file-input:valid ~ .valid-feedback,.was-validated .custom-file-input:valid ~ .valid-tooltip,.custom-file-input.is-valid ~ .valid-feedback,.custom-file-input.is-valid ~ .valid-tooltip{display:block}.was-validated .custom-file-input:valid:focus ~ .custom-file-label,.custom-file-input.is-valid:focus ~ .custom-file-label{-webkit-box-shadow:0 0 0 0.2rem rgba(0,188,140,0.25);box-shadow:0 0 0 0.2rem rgba(0,188,140,0.25)}.invalid-feedback{display:none;width:100%;margin-top:0.25rem;font-size:80%;color:#E74C3C}.invalid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:0.25rem 0.5rem;margin-top:.1rem;font-size:0.8203125rem;line-height:1.5;color:#fff;background-color:rgba(231,76,60,0.9);border-radius:0.25rem}.was-validated .form-control:invalid,.form-control.is-invalid,.was-validated .custom-select:invalid,.custom-select.is-invalid{border-color:#E74C3C}.was-validated .form-control:invalid:focus,.form-control.is-invalid:focus,.was-validated .custom-select:invalid:focus,.custom-select.is-invalid:focus{border-color:#E74C3C;-webkit-box-shadow:0 0 0 0.2rem rgba(231,76,60,0.25);box-shadow:0 0 0 0.2rem rgba(231,76,60,0.25)}.was-validated .form-control:invalid ~ .invalid-feedback,.was-validated .form-control:invalid ~ .invalid-tooltip,.form-control.is-invalid ~ .invalid-feedback,.form-control.is-invalid ~ .invalid-tooltip,.was-validated .custom-select:invalid ~ .invalid-feedback,.was-validated .custom-select:invalid ~ .invalid-tooltip,.custom-select.is-invalid ~ .invalid-feedback,.custom-select.is-invalid ~ .invalid-tooltip{display:block}.was-validated .form-control-file:invalid ~ .invalid-feedback,.was-validated .form-control-file:invalid ~ .invalid-tooltip,.form-control-file.is-invalid ~ .invalid-feedback,.form-control-file.is-invalid ~ .invalid-tooltip{display:block}.was-validated .form-check-input:invalid ~ .form-check-label,.form-check-input.is-invalid ~ .form-check-label{color:#E74C3C}.was-validated .form-check-input:invalid ~ .invalid-feedback,.was-validated .form-check-input:invalid ~ .invalid-tooltip,.form-check-input.is-invalid ~ .invalid-feedback,.form-check-input.is-invalid ~ .invalid-tooltip{display:block}.was-validated .custom-control-input:invalid ~ .custom-control-label,.custom-control-input.is-invalid ~ .custom-control-label{color:#E74C3C}.was-validated .custom-control-input:invalid ~ .custom-control-label::before,.custom-control-input.is-invalid ~ .custom-control-label::before{background-color:#f5b4ae}.was-validated .custom-control-input:invalid ~ .invalid-feedback,.was-validated .custom-control-input:invalid ~ .invalid-tooltip,.custom-control-input.is-invalid ~ .invalid-feedback,.custom-control-input.is-invalid ~ .invalid-tooltip{display:block}.was-validated .custom-control-input:invalid:checked ~ .custom-control-label::before,.custom-control-input.is-invalid:checked ~ .custom-control-label::before{background-color:#ed7669}.was-validated .custom-control-input:invalid:focus ~ .custom-control-label::before,.custom-control-input.is-invalid:focus ~ .custom-control-label::before{-webkit-box-shadow:0 0 0 1px #222,0 0 0 0.2rem rgba(231,76,60,0.25);box-shadow:0 0 0 1px #222,0 0 0 0.2rem rgba(231,76,60,0.25)}.was-validated .custom-file-input:invalid ~ .custom-file-label,.custom-file-input.is-invalid ~ .custom-file-label{border-color:#E74C3C}.was-validated .custom-file-input:invalid ~ .custom-file-label::after,.custom-file-input.is-invalid ~ .custom-file-label::after{border-color:inherit}.was-validated .custom-file-input:invalid ~ .invalid-feedback,.was-validated .custom-file-input:invalid ~ .invalid-tooltip,.custom-file-input.is-invalid ~ .invalid-feedback,.custom-file-input.is-invalid ~ .invalid-tooltip{display:block}.was-validated .custom-file-input:invalid:focus ~ .custom-file-label,.custom-file-input.is-invalid:focus ~ .custom-file-label{-webkit-box-shadow:0 0 0 0.2rem rgba(231,76,60,0.25);box-shadow:0 0 0 0.2rem rgba(231,76,60,0.25)}.form-inline{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.form-inline .form-check{width:100%}@media (min-width: 576px){.form-inline label{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-bottom:0}.form-inline .form-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-bottom:0}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-plaintext{display:inline-block}.form-inline .input-group,.form-inline .custom-select{width:auto}.form-inline .form-check{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:auto;padding-left:0}.form-inline .form-check-input{position:relative;margin-top:0;margin-right:0.25rem;margin-left:0}.form-inline .custom-control{-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.form-inline .custom-control-label{margin-bottom:0}}.btn{display:inline-block;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid transparent;padding:0.375rem 0.75rem;font-size:0.9375rem;line-height:1.5;border-radius:0.25rem;-webkit-transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out}@media screen and (prefers-reduced-motion: reduce){.btn{-webkit-transition:none;transition:none}}.btn:hover,.btn:focus{text-decoration:none}.btn:focus,.btn.focus{outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(55,90,127,0.25);box-shadow:0 0 0 0.2rem rgba(55,90,127,0.25)}.btn.disabled,.btn:disabled{opacity:0.65}.btn:not(:disabled):not(.disabled){cursor:pointer}a.btn.disabled,fieldset:disabled a.btn{pointer-events:none}.btn-primary{color:#fff;background-color:#375a7f;border-color:#375a7f}.btn-primary:hover{color:#fff;background-color:#2b4764;border-color:#28415b}.btn-primary:focus,.btn-primary.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(55,90,127,0.5);box-shadow:0 0 0 0.2rem rgba(55,90,127,0.5)}.btn-primary.disabled,.btn-primary:disabled{color:#fff;background-color:#375a7f;border-color:#375a7f}.btn-primary:not(:disabled):not(.disabled):active,.btn-primary:not(:disabled):not(.disabled).active,.show\u003e.btn-primary.dropdown-toggle{color:#fff;background-color:#28415b;border-color:#243a53}.btn-primary:not(:disabled):not(.disabled):active:focus,.btn-primary:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-primary.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(55,90,127,0.5);box-shadow:0 0 0 0.2rem rgba(55,90,127,0.5)}.btn-secondary{color:#fff;background-color:#444;border-color:#444}.btn-secondary:hover{color:#fff;background-color:#313131;border-color:#2b2a2a}.btn-secondary:focus,.btn-secondary.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(68,68,68,0.5);box-shadow:0 0 0 0.2rem rgba(68,68,68,0.5)}.btn-secondary.disabled,.btn-secondary:disabled{color:#fff;background-color:#444;border-color:#444}.btn-secondary:not(:disabled):not(.disabled):active,.btn-secondary:not(:disabled):not(.disabled).active,.show\u003e.btn-secondary.dropdown-toggle{color:#fff;background-color:#2b2a2a;border-color:#242424}.btn-secondary:not(:disabled):not(.disabled):active:focus,.btn-secondary:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-secondary.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(68,68,68,0.5);box-shadow:0 0 0 0.2rem rgba(68,68,68,0.5)}.btn-success{color:#fff;background-color:#00bc8c;border-color:#00bc8c}.btn-success:hover{color:#fff;background-color:#009670;border-color:#008966}.btn-success:focus,.btn-success.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(0,188,140,0.5);box-shadow:0 0 0 0.2rem rgba(0,188,140,0.5)}.btn-success.disabled,.btn-success:disabled{color:#fff;background-color:#00bc8c;border-color:#00bc8c}.btn-success:not(:disabled):not(.disabled):active,.btn-success:not(:disabled):not(.disabled).active,.show\u003e.btn-success.dropdown-toggle{color:#fff;background-color:#008966;border-color:#007c5d}.btn-success:not(:disabled):not(.disabled):active:focus,.btn-success:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-success.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(0,188,140,0.5);box-shadow:0 0 0 0.2rem rgba(0,188,140,0.5)}.btn-info{color:#fff;background-color:#3498DB;border-color:#3498DB}.btn-info:hover{color:#fff;background-color:#2384c6;border-color:#217dbb}.btn-info:focus,.btn-info.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(52,152,219,0.5);box-shadow:0 0 0 0.2rem rgba(52,152,219,0.5)}.btn-info.disabled,.btn-info:disabled{color:#fff;background-color:#3498DB;border-color:#3498DB}.btn-info:not(:disabled):not(.disabled):active,.btn-info:not(:disabled):not(.disabled).active,.show\u003e.btn-info.dropdown-toggle{color:#fff;background-color:#217dbb;border-color:#1f76b0}.btn-info:not(:disabled):not(.disabled):active:focus,.btn-info:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-info.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(52,152,219,0.5);box-shadow:0 0 0 0.2rem rgba(52,152,219,0.5)}.btn-warning{color:#fff;background-color:#F39C12;border-color:#F39C12}.btn-warning:hover{color:#fff;background-color:#d4860b;border-color:#c87f0a}.btn-warning:focus,.btn-warning.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(243,156,18,0.5);box-shadow:0 0 0 0.2rem rgba(243,156,18,0.5)}.btn-warning.disabled,.btn-warning:disabled{color:#fff;background-color:#F39C12;border-color:#F39C12}.btn-warning:not(:disabled):not(.disabled):active,.btn-warning:not(:disabled):not(.disabled).active,.show\u003e.btn-warning.dropdown-toggle{color:#fff;background-color:#c87f0a;border-color:#bc770a}.btn-warning:not(:disabled):not(.disabled):active:focus,.btn-warning:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-warning.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(243,156,18,0.5);box-shadow:0 0 0 0.2rem rgba(243,156,18,0.5)}.btn-danger{color:#fff;background-color:#E74C3C;border-color:#E74C3C}.btn-danger:hover{color:#fff;background-color:#e12e1c;border-color:#d62c1a}.btn-danger:focus,.btn-danger.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(231,76,60,0.5);box-shadow:0 0 0 0.2rem rgba(231,76,60,0.5)}.btn-danger.disabled,.btn-danger:disabled{color:#fff;background-color:#E74C3C;border-color:#E74C3C}.btn-danger:not(:disabled):not(.disabled):active,.btn-danger:not(:disabled):not(.disabled).active,.show\u003e.btn-danger.dropdown-toggle{color:#fff;background-color:#d62c1a;border-color:#ca2a19}.btn-danger:not(:disabled):not(.disabled):active:focus,.btn-danger:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-danger.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(231,76,60,0.5);box-shadow:0 0 0 0.2rem rgba(231,76,60,0.5)}.btn-light{color:#fff;background-color:#303030;border-color:#303030}.btn-light:hover{color:#fff;background-color:#1d1d1d;border-color:#171616}.btn-light:focus,.btn-light.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(48,48,48,0.5);box-shadow:0 0 0 0.2rem rgba(48,48,48,0.5)}.btn-light.disabled,.btn-light:disabled{color:#fff;background-color:#303030;border-color:#303030}.btn-light:not(:disabled):not(.disabled):active,.btn-light:not(:disabled):not(.disabled).active,.show\u003e.btn-light.dropdown-toggle{color:#fff;background-color:#171616;border-color:#101010}.btn-light:not(:disabled):not(.disabled):active:focus,.btn-light:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-light.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(48,48,48,0.5);box-shadow:0 0 0 0.2rem rgba(48,48,48,0.5)}.btn-dark{color:#222;background-color:#adb5bd;border-color:#adb5bd}.btn-dark:hover{color:#fff;background-color:#98a2ac;border-color:#919ca6}.btn-dark:focus,.btn-dark.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5);box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5)}.btn-dark.disabled,.btn-dark:disabled{color:#222;background-color:#adb5bd;border-color:#adb5bd}.btn-dark:not(:disabled):not(.disabled):active,.btn-dark:not(:disabled):not(.disabled).active,.show\u003e.btn-dark.dropdown-toggle{color:#fff;background-color:#919ca6;border-color:#8a95a1}.btn-dark:not(:disabled):not(.disabled):active:focus,.btn-dark:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-dark.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5);box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5)}.btn-outline-primary{color:#375a7f;background-color:transparent;background-image:none;border-color:#375a7f}.btn-outline-primary:hover{color:#fff;background-color:#375a7f;border-color:#375a7f}.btn-outline-primary:focus,.btn-outline-primary.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(55,90,127,0.5);box-shadow:0 0 0 0.2rem rgba(55,90,127,0.5)}.btn-outline-primary.disabled,.btn-outline-primary:disabled{color:#375a7f;background-color:transparent}.btn-outline-primary:not(:disabled):not(.disabled):active,.btn-outline-primary:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-primary.dropdown-toggle{color:#fff;background-color:#375a7f;border-color:#375a7f}.btn-outline-primary:not(:disabled):not(.disabled):active:focus,.btn-outline-primary:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-primary.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(55,90,127,0.5);box-shadow:0 0 0 0.2rem rgba(55,90,127,0.5)}.btn-outline-secondary{color:#444;background-color:transparent;background-image:none;border-color:#444}.btn-outline-secondary:hover{color:#fff;background-color:#444;border-color:#444}.btn-outline-secondary:focus,.btn-outline-secondary.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(68,68,68,0.5);box-shadow:0 0 0 0.2rem rgba(68,68,68,0.5)}.btn-outline-secondary.disabled,.btn-outline-secondary:disabled{color:#444;background-color:transparent}.btn-outline-secondary:not(:disabled):not(.disabled):active,.btn-outline-secondary:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-secondary.dropdown-toggle{color:#fff;background-color:#444;border-color:#444}.btn-outline-secondary:not(:disabled):not(.disabled):active:focus,.btn-outline-secondary:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-secondary.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(68,68,68,0.5);box-shadow:0 0 0 0.2rem rgba(68,68,68,0.5)}.btn-outline-success{color:#00bc8c;background-color:transparent;background-image:none;border-color:#00bc8c}.btn-outline-success:hover{color:#fff;background-color:#00bc8c;border-color:#00bc8c}.btn-outline-success:focus,.btn-outline-success.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(0,188,140,0.5);box-shadow:0 0 0 0.2rem rgba(0,188,140,0.5)}.btn-outline-success.disabled,.btn-outline-success:disabled{color:#00bc8c;background-color:transparent}.btn-outline-success:not(:disabled):not(.disabled):active,.btn-outline-success:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-success.dropdown-toggle{color:#fff;background-color:#00bc8c;border-color:#00bc8c}.btn-outline-success:not(:disabled):not(.disabled):active:focus,.btn-outline-success:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-success.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(0,188,140,0.5);box-shadow:0 0 0 0.2rem rgba(0,188,140,0.5)}.btn-outline-info{color:#3498DB;background-color:transparent;background-image:none;border-color:#3498DB}.btn-outline-info:hover{color:#fff;background-color:#3498DB;border-color:#3498DB}.btn-outline-info:focus,.btn-outline-info.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(52,152,219,0.5);box-shadow:0 0 0 0.2rem rgba(52,152,219,0.5)}.btn-outline-info.disabled,.btn-outline-info:disabled{color:#3498DB;background-color:transparent}.btn-outline-info:not(:disabled):not(.disabled):active,.btn-outline-info:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-info.dropdown-toggle{color:#fff;background-color:#3498DB;border-color:#3498DB}.btn-outline-info:not(:disabled):not(.disabled):active:focus,.btn-outline-info:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-info.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(52,152,219,0.5);box-shadow:0 0 0 0.2rem rgba(52,152,219,0.5)}.btn-outline-warning{color:#F39C12;background-color:transparent;background-image:none;border-color:#F39C12}.btn-outline-warning:hover{color:#fff;background-color:#F39C12;border-color:#F39C12}.btn-outline-warning:focus,.btn-outline-warning.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(243,156,18,0.5);box-shadow:0 0 0 0.2rem rgba(243,156,18,0.5)}.btn-outline-warning.disabled,.btn-outline-warning:disabled{color:#F39C12;background-color:transparent}.btn-outline-warning:not(:disabled):not(.disabled):active,.btn-outline-warning:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-warning.dropdown-toggle{color:#fff;background-color:#F39C12;border-color:#F39C12}.btn-outline-warning:not(:disabled):not(.disabled):active:focus,.btn-outline-warning:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-warning.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(243,156,18,0.5);box-shadow:0 0 0 0.2rem rgba(243,156,18,0.5)}.btn-outline-danger{color:#E74C3C;background-color:transparent;background-image:none;border-color:#E74C3C}.btn-outline-danger:hover{color:#fff;background-color:#E74C3C;border-color:#E74C3C}.btn-outline-danger:focus,.btn-outline-danger.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(231,76,60,0.5);box-shadow:0 0 0 0.2rem rgba(231,76,60,0.5)}.btn-outline-danger.disabled,.btn-outline-danger:disabled{color:#E74C3C;background-color:transparent}.btn-outline-danger:not(:disabled):not(.disabled):active,.btn-outline-danger:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-danger.dropdown-toggle{color:#fff;background-color:#E74C3C;border-color:#E74C3C}.btn-outline-danger:not(:disabled):not(.disabled):active:focus,.btn-outline-danger:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-danger.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(231,76,60,0.5);box-shadow:0 0 0 0.2rem rgba(231,76,60,0.5)}.btn-outline-light{color:#303030;background-color:transparent;background-image:none;border-color:#303030}.btn-outline-light:hover{color:#fff;background-color:#303030;border-color:#303030}.btn-outline-light:focus,.btn-outline-light.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(48,48,48,0.5);box-shadow:0 0 0 0.2rem rgba(48,48,48,0.5)}.btn-outline-light.disabled,.btn-outline-light:disabled{color:#303030;background-color:transparent}.btn-outline-light:not(:disabled):not(.disabled):active,.btn-outline-light:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-light.dropdown-toggle{color:#fff;background-color:#303030;border-color:#303030}.btn-outline-light:not(:disabled):not(.disabled):active:focus,.btn-outline-light:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-light.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(48,48,48,0.5);box-shadow:0 0 0 0.2rem rgba(48,48,48,0.5)}.btn-outline-dark{color:#adb5bd;background-color:transparent;background-image:none;border-color:#adb5bd}.btn-outline-dark:hover{color:#222;background-color:#adb5bd;border-color:#adb5bd}.btn-outline-dark:focus,.btn-outline-dark.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5);box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5)}.btn-outline-dark.disabled,.btn-outline-dark:disabled{color:#adb5bd;background-color:transparent}.btn-outline-dark:not(:disabled):not(.disabled):active,.btn-outline-dark:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-dark.dropdown-toggle{color:#222;background-color:#adb5bd;border-color:#adb5bd}.btn-outline-dark:not(:disabled):not(.disabled):active:focus,.btn-outline-dark:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-dark.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5);box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5)}.btn-link{font-weight:400;color:#00bc8c;background-color:transparent}.btn-link:hover{color:#007053;text-decoration:underline;background-color:transparent;border-color:transparent}.btn-link:focus,.btn-link.focus{text-decoration:underline;border-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link:disabled,.btn-link.disabled{color:#999;pointer-events:none}.btn-lg,.btn-group-lg\u003e.btn{padding:0.5rem 1rem;font-size:1.171875rem;line-height:1.5;border-radius:0.3rem}.btn-sm,.btn-group-sm\u003e.btn{padding:0.25rem 0.5rem;font-size:0.8203125rem;line-height:1.5;border-radius:0.2rem}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:0.5rem}input[type\u003d\"submit\"].btn-block,input[type\u003d\"reset\"].btn-block,input[type\u003d\"button\"].btn-block{width:100%}.fade{-webkit-transition:opacity 0.15s linear;transition:opacity 0.15s linear}@media screen and (prefers-reduced-motion: reduce){.fade{-webkit-transition:none;transition:none}}.fade:not(.show){opacity:0}.collapse:not(.show){display:none}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition:height 0.35s ease;transition:height 0.35s ease}@media screen and (prefers-reduced-motion: reduce){.collapsing{-webkit-transition:none;transition:none}}.dropup,.dropright,.dropdown,.dropleft{position:relative}.dropdown-toggle::after{display:inline-block;width:0;height:0;margin-left:0.255em;vertical-align:0.255em;content:\"\";border-top:0.3em solid;border-right:0.3em solid transparent;border-bottom:0;border-left:0.3em solid transparent}.dropdown-toggle:empty::after{margin-left:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:0.5rem 0;margin:0.125rem 0 0;font-size:0.9375rem;color:#fff;text-align:left;list-style:none;background-color:#222;background-clip:padding-box;border:1px solid #444;border-radius:0.25rem}.dropdown-menu-right{right:0;left:auto}.dropup .dropdown-menu{top:auto;bottom:100%;margin-top:0;margin-bottom:0.125rem}.dropup .dropdown-toggle::after{display:inline-block;width:0;height:0;margin-left:0.255em;vertical-align:0.255em;content:\"\";border-top:0;border-right:0.3em solid transparent;border-bottom:0.3em solid;border-left:0.3em solid transparent}.dropup .dropdown-toggle:empty::after{margin-left:0}.dropright .dropdown-menu{top:0;right:auto;left:100%;margin-top:0;margin-left:0.125rem}.dropright .dropdown-toggle::after{display:inline-block;width:0;height:0;margin-left:0.255em;vertical-align:0.255em;content:\"\";border-top:0.3em solid transparent;border-right:0;border-bottom:0.3em solid transparent;border-left:0.3em solid}.dropright .dropdown-toggle:empty::after{margin-left:0}.dropright .dropdown-toggle::after{vertical-align:0}.dropleft .dropdown-menu{top:0;right:100%;left:auto;margin-top:0;margin-right:0.125rem}.dropleft .dropdown-toggle::after{display:inline-block;width:0;height:0;margin-left:0.255em;vertical-align:0.255em;content:\"\"}.dropleft .dropdown-toggle::after{display:none}.dropleft .dropdown-toggle::before{display:inline-block;width:0;height:0;margin-right:0.255em;vertical-align:0.255em;content:\"\";border-top:0.3em solid transparent;border-right:0.3em solid;border-bottom:0.3em solid transparent}.dropleft .dropdown-toggle:empty::after{margin-left:0}.dropleft .dropdown-toggle::before{vertical-align:0}.dropdown-menu[x-placement^\u003d\"top\"],.dropdown-menu[x-placement^\u003d\"right\"],.dropdown-menu[x-placement^\u003d\"bottom\"],.dropdown-menu[x-placement^\u003d\"left\"]{right:auto;bottom:auto}.dropdown-divider{height:0;margin:0.5rem 0;overflow:hidden;border-top:1px solid #444}.dropdown-item{display:block;width:100%;padding:0.25rem 1.5rem;clear:both;font-weight:400;color:#fff;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item:hover,.dropdown-item:focus{color:#fff;text-decoration:none;background-color:#375a7f}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#375a7f}.dropdown-item.disabled,.dropdown-item:disabled{color:#999;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:0.5rem 1.5rem;margin-bottom:0;font-size:0.8203125rem;color:#999;white-space:nowrap}.dropdown-item-text{display:block;padding:0.25rem 1.5rem;color:#fff}.btn-group,.btn-group-vertical{position:relative;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle}.btn-group\u003e.btn,.btn-group-vertical\u003e.btn{position:relative;-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto}.btn-group\u003e.btn:hover,.btn-group-vertical\u003e.btn:hover{z-index:1}.btn-group\u003e.btn:focus,.btn-group\u003e.btn:active,.btn-group\u003e.btn.active,.btn-group-vertical\u003e.btn:focus,.btn-group-vertical\u003e.btn:active,.btn-group-vertical\u003e.btn.active{z-index:1}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group,.btn-group-vertical .btn+.btn,.btn-group-vertical .btn+.btn-group,.btn-group-vertical .btn-group+.btn,.btn-group-vertical .btn-group+.btn-group{margin-left:-1px}.btn-toolbar{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group\u003e.btn:first-child{margin-left:0}.btn-group\u003e.btn:not(:last-child):not(.dropdown-toggle),.btn-group\u003e.btn-group:not(:last-child)\u003e.btn{border-top-right-radius:0;border-bottom-right-radius:0}.btn-group\u003e.btn:not(:first-child),.btn-group\u003e.btn-group:not(:first-child)\u003e.btn{border-top-left-radius:0;border-bottom-left-radius:0}.dropdown-toggle-split{padding-right:0.5625rem;padding-left:0.5625rem}.dropdown-toggle-split::after,.dropup .dropdown-toggle-split::after,.dropright .dropdown-toggle-split::after{margin-left:0}.dropleft .dropdown-toggle-split::before{margin-right:0}.btn-sm+.dropdown-toggle-split,.btn-group-sm\u003e.btn+.dropdown-toggle-split{padding-right:0.375rem;padding-left:0.375rem}.btn-lg+.dropdown-toggle-split,.btn-group-lg\u003e.btn+.dropdown-toggle-split{padding-right:0.75rem;padding-left:0.75rem}.btn-group-vertical{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.btn-group-vertical .btn,.btn-group-vertical .btn-group{width:100%}.btn-group-vertical\u003e.btn+.btn,.btn-group-vertical\u003e.btn+.btn-group,.btn-group-vertical\u003e.btn-group+.btn,.btn-group-vertical\u003e.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical\u003e.btn:not(:last-child):not(.dropdown-toggle),.btn-group-vertical\u003e.btn-group:not(:last-child)\u003e.btn{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical\u003e.btn:not(:first-child),.btn-group-vertical\u003e.btn-group:not(:first-child)\u003e.btn{border-top-left-radius:0;border-top-right-radius:0}.btn-group-toggle\u003e.btn,.btn-group-toggle\u003e.btn-group\u003e.btn{margin-bottom:0}.btn-group-toggle\u003e.btn input[type\u003d\"radio\"],.btn-group-toggle\u003e.btn input[type\u003d\"checkbox\"],.btn-group-toggle\u003e.btn-group\u003e.btn input[type\u003d\"radio\"],.btn-group-toggle\u003e.btn-group\u003e.btn input[type\u003d\"checkbox\"]{position:absolute;clip:rect(0, 0, 0, 0);pointer-events:none}.input-group{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;width:100%}.input-group\u003e.form-control,.input-group\u003e.custom-select,.input-group\u003e.custom-file{position:relative;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:1%;margin-bottom:0}.input-group\u003e.form-control+.form-control,.input-group\u003e.form-control+.custom-select,.input-group\u003e.form-control+.custom-file,.input-group\u003e.custom-select+.form-control,.input-group\u003e.custom-select+.custom-select,.input-group\u003e.custom-select+.custom-file,.input-group\u003e.custom-file+.form-control,.input-group\u003e.custom-file+.custom-select,.input-group\u003e.custom-file+.custom-file{margin-left:-1px}.input-group\u003e.form-control:focus,.input-group\u003e.custom-select:focus,.input-group\u003e.custom-file .custom-file-input:focus ~ .custom-file-label{z-index:3}.input-group\u003e.custom-file .custom-file-input:focus{z-index:4}.input-group\u003e.form-control:not(:last-child),.input-group\u003e.custom-select:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.input-group\u003e.form-control:not(:first-child),.input-group\u003e.custom-select:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.input-group\u003e.custom-file{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.input-group\u003e.custom-file:not(:last-child) .custom-file-label,.input-group\u003e.custom-file:not(:last-child) .custom-file-label::after{border-top-right-radius:0;border-bottom-right-radius:0}.input-group\u003e.custom-file:not(:first-child) .custom-file-label{border-top-left-radius:0;border-bottom-left-radius:0}.input-group-prepend,.input-group-append{display:-webkit-box;display:-ms-flexbox;display:flex}.input-group-prepend .btn,.input-group-append .btn{position:relative;z-index:2}.input-group-prepend .btn+.btn,.input-group-prepend .btn+.input-group-text,.input-group-prepend .input-group-text+.input-group-text,.input-group-prepend .input-group-text+.btn,.input-group-append .btn+.btn,.input-group-append .btn+.input-group-text,.input-group-append .input-group-text+.input-group-text,.input-group-append .input-group-text+.btn{margin-left:-1px}.input-group-prepend{margin-right:-1px}.input-group-append{margin-left:-1px}.input-group-text{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0.375rem 0.75rem;margin-bottom:0;font-size:0.9375rem;font-weight:400;line-height:1.5;color:#adb5bd;text-align:center;white-space:nowrap;background-color:#444;border:1px solid transparent;border-radius:0.25rem}.input-group-text input[type\u003d\"radio\"],.input-group-text input[type\u003d\"checkbox\"]{margin-top:0}.input-group-lg\u003e.form-control,.input-group-lg\u003e.input-group-prepend\u003e.input-group-text,.input-group-lg\u003e.input-group-append\u003e.input-group-text,.input-group-lg\u003e.input-group-prepend\u003e.btn,.input-group-lg\u003e.input-group-append\u003e.btn{height:calc(2.7578125rem + 2px);padding:0.5rem 1rem;font-size:1.171875rem;line-height:1.5;border-radius:0.3rem}.input-group-sm\u003e.form-control,.input-group-sm\u003e.input-group-prepend\u003e.input-group-text,.input-group-sm\u003e.input-group-append\u003e.input-group-text,.input-group-sm\u003e.input-group-prepend\u003e.btn,.input-group-sm\u003e.input-group-append\u003e.btn{height:calc(1.73046875rem + 2px);padding:0.25rem 0.5rem;font-size:0.8203125rem;line-height:1.5;border-radius:0.2rem}.input-group\u003e.input-group-prepend\u003e.btn,.input-group\u003e.input-group-prepend\u003e.input-group-text,.input-group\u003e.input-group-append:not(:last-child)\u003e.btn,.input-group\u003e.input-group-append:not(:last-child)\u003e.input-group-text,.input-group\u003e.input-group-append:last-child\u003e.btn:not(:last-child):not(.dropdown-toggle),.input-group\u003e.input-group-append:last-child\u003e.input-group-text:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.input-group\u003e.input-group-append\u003e.btn,.input-group\u003e.input-group-append\u003e.input-group-text,.input-group\u003e.input-group-prepend:not(:first-child)\u003e.btn,.input-group\u003e.input-group-prepend:not(:first-child)\u003e.input-group-text,.input-group\u003e.input-group-prepend:first-child\u003e.btn:not(:first-child),.input-group\u003e.input-group-prepend:first-child\u003e.input-group-text:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.custom-control{position:relative;display:block;min-height:1.40625rem;padding-left:1.5rem}.custom-control-inline{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;margin-right:1rem}.custom-control-input{position:absolute;z-index:-1;opacity:0}.custom-control-input:checked ~ .custom-control-label::before{color:#fff;background-color:#375a7f}.custom-control-input:focus ~ .custom-control-label::before{-webkit-box-shadow:0 0 0 1px #222,0 0 0 0.2rem rgba(55,90,127,0.25);box-shadow:0 0 0 1px #222,0 0 0 0.2rem rgba(55,90,127,0.25)}.custom-control-input:active ~ .custom-control-label::before{color:#fff;background-color:#97b3d2}.custom-control-input:disabled ~ .custom-control-label{color:#999}.custom-control-input:disabled ~ .custom-control-label::before{background-color:#ebebeb}.custom-control-label{position:relative;margin-bottom:0}.custom-control-label::before{position:absolute;top:0.203125rem;left:-1.5rem;display:block;width:1rem;height:1rem;pointer-events:none;content:\"\";-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#dee2e6}.custom-control-label::after{position:absolute;top:0.203125rem;left:-1.5rem;display:block;width:1rem;height:1rem;content:\"\";background-repeat:no-repeat;background-position:center center;background-size:50% 50%}.custom-checkbox .custom-control-label::before{border-radius:0.25rem}.custom-checkbox .custom-control-input:checked ~ .custom-control-label::before{background-color:#375a7f}.custom-checkbox .custom-control-input:checked ~ .custom-control-label::after{background-image:url(\"data:image/svg+xml;charset\u003dutf8,%3Csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 viewBox\u003d\u00270 0 8 8\u0027%3E%3Cpath fill\u003d\u0027%23fff\u0027 d\u003d\u0027M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z\u0027/%3E%3C/svg%3E\")}.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::before{background-color:#375a7f}.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::after{background-image:url(\"data:image/svg+xml;charset\u003dutf8,%3Csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 viewBox\u003d\u00270 0 4 4\u0027%3E%3Cpath stroke\u003d\u0027%23fff\u0027 d\u003d\u0027M0 2h4\u0027/%3E%3C/svg%3E\")}.custom-checkbox .custom-control-input:disabled:checked ~ .custom-control-label::before{background-color:rgba(55,90,127,0.5)}.custom-checkbox .custom-control-input:disabled:indeterminate ~ .custom-control-label::before{background-color:rgba(55,90,127,0.5)}.custom-radio .custom-control-label::before{border-radius:50%}.custom-radio .custom-control-input:checked ~ .custom-control-label::before{background-color:#375a7f}.custom-radio .custom-control-input:checked ~ .custom-control-label::after{background-image:url(\"data:image/svg+xml;charset\u003dutf8,%3Csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 viewBox\u003d\u0027-4 -4 8 8\u0027%3E%3Ccircle r\u003d\u00273\u0027 fill\u003d\u0027%23fff\u0027/%3E%3C/svg%3E\")}.custom-radio .custom-control-input:disabled:checked ~ .custom-control-label::before{background-color:rgba(55,90,127,0.5)}.custom-select{display:inline-block;width:100%;height:calc(2.15625rem + 2px);padding:0.375rem 1.75rem 0.375rem 0.75rem;line-height:1.5;color:#444;vertical-align:middle;background:#fff url(\"data:image/svg+xml;charset\u003dutf8,%3Csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 viewBox\u003d\u00270 0 4 5\u0027%3E%3Cpath fill\u003d\u0027%23303030\u0027 d\u003d\u0027M2 0L0 2h4zm0 5L0 3h4z\u0027/%3E%3C/svg%3E\") no-repeat right 0.75rem center;background-size:8px 10px;border:1px solid transparent;border-radius:0.25rem;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-select:focus{border-color:#739ac2;outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(115,154,194,0.5);box-shadow:0 0 0 0.2rem rgba(115,154,194,0.5)}.custom-select:focus::-ms-value{color:#444;background-color:#fff}.custom-select[multiple],.custom-select[size]:not([size\u003d\"1\"]){height:auto;padding-right:0.75rem;background-image:none}.custom-select:disabled{color:#999;background-color:#ebebeb}.custom-select::-ms-expand{opacity:0}.custom-select-sm{height:calc(1.73046875rem + 2px);padding-top:0.375rem;padding-bottom:0.375rem;font-size:75%}.custom-select-lg{height:calc(2.7578125rem + 2px);padding-top:0.375rem;padding-bottom:0.375rem;font-size:125%}.custom-file{position:relative;display:inline-block;width:100%;height:calc(2.15625rem + 2px);margin-bottom:0}.custom-file-input{position:relative;z-index:2;width:100%;height:calc(2.15625rem + 2px);margin:0;opacity:0}.custom-file-input:focus ~ .custom-file-label{border-color:#739ac2;-webkit-box-shadow:0 0 0 0.2rem rgba(55,90,127,0.25);box-shadow:0 0 0 0.2rem rgba(55,90,127,0.25)}.custom-file-input:focus ~ .custom-file-label::after{border-color:#739ac2}.custom-file-input:disabled ~ .custom-file-label{background-color:#ebebeb}.custom-file-input:lang(en) ~ .custom-file-label::after{content:\"Browse\"}.custom-file-label{position:absolute;top:0;right:0;left:0;z-index:1;height:calc(2.15625rem + 2px);padding:0.375rem 0.75rem;line-height:1.5;color:#adb5bd;background-color:#fff;border:1px solid #444;border-radius:0.25rem}.custom-file-label::after{position:absolute;top:0;right:0;bottom:0;z-index:3;display:block;height:2.15625rem;padding:0.375rem 0.75rem;line-height:1.5;color:#adb5bd;content:\"Browse\";background-color:#444;border-left:1px solid #444;border-radius:0 0.25rem 0.25rem 0}.custom-range{width:100%;padding-left:0;background-color:transparent;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-range:focus{outline:none}.custom-range:focus::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 1px #222,0 0 0 0.2rem rgba(55,90,127,0.25);box-shadow:0 0 0 1px #222,0 0 0 0.2rem rgba(55,90,127,0.25)}.custom-range:focus::-moz-range-thumb{box-shadow:0 0 0 1px #222,0 0 0 0.2rem rgba(55,90,127,0.25)}.custom-range:focus::-ms-thumb{box-shadow:0 0 0 1px #222,0 0 0 0.2rem rgba(55,90,127,0.25)}.custom-range::-moz-focus-outer{border:0}.custom-range::-webkit-slider-thumb{width:1rem;height:1rem;margin-top:-0.25rem;background-color:#375a7f;border:0;border-radius:1rem;-webkit-transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;-webkit-appearance:none;appearance:none}@media screen and (prefers-reduced-motion: reduce){.custom-range::-webkit-slider-thumb{-webkit-transition:none;transition:none}}.custom-range::-webkit-slider-thumb:active{background-color:#97b3d2}.custom-range::-webkit-slider-runnable-track{width:100%;height:0.5rem;color:transparent;cursor:pointer;background-color:#dee2e6;border-color:transparent;border-radius:1rem}.custom-range::-moz-range-thumb{width:1rem;height:1rem;background-color:#375a7f;border:0;border-radius:1rem;-webkit-transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;-moz-appearance:none;appearance:none}@media screen and (prefers-reduced-motion: reduce){.custom-range::-moz-range-thumb{-webkit-transition:none;transition:none}}.custom-range::-moz-range-thumb:active{background-color:#97b3d2}.custom-range::-moz-range-track{width:100%;height:0.5rem;color:transparent;cursor:pointer;background-color:#dee2e6;border-color:transparent;border-radius:1rem}.custom-range::-ms-thumb{width:1rem;height:1rem;margin-top:0;margin-right:0.2rem;margin-left:0.2rem;background-color:#375a7f;border:0;border-radius:1rem;-webkit-transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;appearance:none}@media screen and (prefers-reduced-motion: reduce){.custom-range::-ms-thumb{-webkit-transition:none;transition:none}}.custom-range::-ms-thumb:active{background-color:#97b3d2}.custom-range::-ms-track{width:100%;height:0.5rem;color:transparent;cursor:pointer;background-color:transparent;border-color:transparent;border-width:0.5rem}.custom-range::-ms-fill-lower{background-color:#dee2e6;border-radius:1rem}.custom-range::-ms-fill-upper{margin-right:15px;background-color:#dee2e6;border-radius:1rem}.custom-control-label::before,.custom-file-label,.custom-select{-webkit-transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out}@media screen and (prefers-reduced-motion: reduce){.custom-control-label::before,.custom-file-label,.custom-select{-webkit-transition:none;transition:none}}.nav{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:0.5rem 2rem}.nav-link:hover,.nav-link:focus{text-decoration:none}.nav-link.disabled{color:#adb5bd}.nav-tabs{border-bottom:1px solid #444}.nav-tabs .nav-item{margin-bottom:-1px}.nav-tabs .nav-link{border:1px solid transparent;border-top-left-radius:0.25rem;border-top-right-radius:0.25rem}.nav-tabs .nav-link:hover,.nav-tabs .nav-link:focus{border-color:#444 #444 transparent}.nav-tabs .nav-link.disabled{color:#adb5bd;background-color:transparent;border-color:transparent}.nav-tabs .nav-link.active,.nav-tabs .nav-item.show .nav-link{color:#fff;background-color:#222;border-color:#444 #444 transparent}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.nav-pills .nav-link{border-radius:0.25rem}.nav-pills .nav-link.active,.nav-pills .show\u003e.nav-link{color:#fff;background-color:#375a7f}.nav-fill .nav-item{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;text-align:center}.nav-justified .nav-item{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;text-align:center}.tab-content\u003e.tab-pane{display:none}.tab-content\u003e.active{display:block}.navbar{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:1rem 1rem}.navbar\u003e.container,.navbar\u003e.container-fluid{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.navbar-brand{display:inline-block;padding-top:0.32421875rem;padding-bottom:0.32421875rem;margin-right:1rem;font-size:1.171875rem;line-height:inherit;white-space:nowrap}.navbar-brand:hover,.navbar-brand:focus{text-decoration:none}.navbar-nav{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link{padding-right:0;padding-left:0}.navbar-nav .dropdown-menu{position:static;float:none}.navbar-text{display:inline-block;padding-top:0.5rem;padding-bottom:0.5rem}.navbar-collapse{-ms-flex-preferred-size:100%;flex-basis:100%;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.navbar-toggler{padding:0.25rem 0.75rem;font-size:1.171875rem;line-height:1;background-color:transparent;border:1px solid transparent;border-radius:0.25rem}.navbar-toggler:hover,.navbar-toggler:focus{text-decoration:none}.navbar-toggler:not(:disabled):not(.disabled){cursor:pointer}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;content:\"\";background:no-repeat center center;background-size:100% 100%}@media (max-width: 575.98px){.navbar-expand-sm\u003e.container,.navbar-expand-sm\u003e.container-fluid{padding-right:0;padding-left:0}}@media (min-width: 576px){.navbar-expand-sm{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-sm .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .nav-link{padding-right:0.5rem;padding-left:0.5rem}.navbar-expand-sm\u003e.container,.navbar-expand-sm\u003e.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-sm .navbar-collapse{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}}@media (max-width: 767.98px){.navbar-expand-md\u003e.container,.navbar-expand-md\u003e.container-fluid{padding-right:0;padding-left:0}}@media (min-width: 768px){.navbar-expand-md{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-md .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .nav-link{padding-right:0.5rem;padding-left:0.5rem}.navbar-expand-md\u003e.container,.navbar-expand-md\u003e.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-md .navbar-collapse{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}}@media (max-width: 991.98px){.navbar-expand-lg\u003e.container,.navbar-expand-lg\u003e.container-fluid{padding-right:0;padding-left:0}}@media (min-width: 992px){.navbar-expand-lg{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-lg .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .nav-link{padding-right:0.5rem;padding-left:0.5rem}.navbar-expand-lg\u003e.container,.navbar-expand-lg\u003e.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-lg .navbar-collapse{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}}@media (max-width: 1199.98px){.navbar-expand-xl\u003e.container,.navbar-expand-xl\u003e.container-fluid{padding-right:0;padding-left:0}}@media (min-width: 1200px){.navbar-expand-xl{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-xl .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .nav-link{padding-right:0.5rem;padding-left:0.5rem}.navbar-expand-xl\u003e.container,.navbar-expand-xl\u003e.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-xl .navbar-collapse{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}}.navbar-expand{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand\u003e.container,.navbar-expand\u003e.container-fluid{padding-right:0;padding-left:0}.navbar-expand .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .nav-link{padding-right:0.5rem;padding-left:0.5rem}.navbar-expand\u003e.container,.navbar-expand\u003e.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand .navbar-collapse{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-light .navbar-brand{color:#fff}.navbar-light .navbar-brand:hover,.navbar-light .navbar-brand:focus{color:#fff}.navbar-light .navbar-nav .nav-link{color:rgba(255,255,255,0.5)}.navbar-light .navbar-nav .nav-link:hover,.navbar-light .navbar-nav .nav-link:focus{color:#fff}.navbar-light .navbar-nav .nav-link.disabled{color:rgba(255,255,255,0.3)}.navbar-light .navbar-nav .show\u003e.nav-link,.navbar-light .navbar-nav .active\u003e.nav-link,.navbar-light .navbar-nav .nav-link.show,.navbar-light .navbar-nav .nav-link.active{color:#fff}.navbar-light .navbar-toggler{color:rgba(255,255,255,0.5);border-color:rgba(255,255,255,0.1)}.navbar-light .navbar-toggler-icon{background-image:url(\"data:image/svg+xml;charset\u003dutf8,%3Csvg viewBox\u003d\u00270 0 30 30\u0027 xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027%3E%3Cpath stroke\u003d\u0027rgba(255, 255, 255, 0.5)\u0027 stroke-width\u003d\u00272\u0027 stroke-linecap\u003d\u0027round\u0027 stroke-miterlimit\u003d\u002710\u0027 d\u003d\u0027M4 7h22M4 15h22M4 23h22\u0027/%3E%3C/svg%3E\")}.navbar-light .navbar-text{color:rgba(255,255,255,0.5)}.navbar-light .navbar-text a{color:#fff}.navbar-light .navbar-text a:hover,.navbar-light .navbar-text a:focus{color:#fff}.navbar-dark .navbar-brand{color:#fff}.navbar-dark .navbar-brand:hover,.navbar-dark .navbar-brand:focus{color:#fff}.navbar-dark .navbar-nav .nav-link{color:#fff}.navbar-dark .navbar-nav .nav-link:hover,.navbar-dark .navbar-nav .nav-link:focus{color:#00bc8c}.navbar-dark .navbar-nav .nav-link.disabled{color:rgba(255,255,255,0.25)}.navbar-dark .navbar-nav .show\u003e.nav-link,.navbar-dark .navbar-nav .active\u003e.nav-link,.navbar-dark .navbar-nav .nav-link.show,.navbar-dark .navbar-nav .nav-link.active{color:#fff}.navbar-dark .navbar-toggler{color:#fff;border-color:rgba(255,255,255,0.1)}.navbar-dark .navbar-toggler-icon{background-image:url(\"data:image/svg+xml;charset\u003dutf8,%3Csvg viewBox\u003d\u00270 0 30 30\u0027 xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027%3E%3Cpath stroke\u003d\u0027%23fff\u0027 stroke-width\u003d\u00272\u0027 stroke-linecap\u003d\u0027round\u0027 stroke-miterlimit\u003d\u002710\u0027 d\u003d\u0027M4 7h22M4 15h22M4 23h22\u0027/%3E%3C/svg%3E\")}.navbar-dark .navbar-text{color:#fff}.navbar-dark .navbar-text a{color:#fff}.navbar-dark .navbar-text a:hover,.navbar-dark .navbar-text a:focus{color:#fff}.card{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;min-width:0;word-wrap:break-word;background-color:#303030;background-clip:border-box;border:1px solid rgba(0,0,0,0.125);border-radius:0.25rem}.card\u003ehr{margin-right:0;margin-left:0}.card\u003e.list-group:first-child .list-group-item:first-child{border-top-left-radius:0.25rem;border-top-right-radius:0.25rem}.card\u003e.list-group:last-child .list-group-item:last-child{border-bottom-right-radius:0.25rem;border-bottom-left-radius:0.25rem}.card-body{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;padding:1.25rem}.card-title{margin-bottom:0.75rem}.card-subtitle{margin-top:-0.375rem;margin-bottom:0}.card-text:last-child{margin-bottom:0}.card-link:hover{text-decoration:none}.card-link+.card-link{margin-left:1.25rem}.card-header{padding:0.75rem 1.25rem;margin-bottom:0;background-color:#444;border-bottom:1px solid rgba(0,0,0,0.125)}.card-header:first-child{border-radius:calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0}.card-header+.list-group .list-group-item:first-child{border-top:0}.card-footer{padding:0.75rem 1.25rem;background-color:#444;border-top:1px solid rgba(0,0,0,0.125)}.card-footer:last-child{border-radius:0 0 calc(0.25rem - 1px) calc(0.25rem - 1px)}.card-header-tabs{margin-right:-0.625rem;margin-bottom:-0.75rem;margin-left:-0.625rem;border-bottom:0}.card-header-pills{margin-right:-0.625rem;margin-left:-0.625rem}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:1.25rem}.card-img{width:100%;border-radius:calc(0.25rem - 1px)}.card-img-top{width:100%;border-top-left-radius:calc(0.25rem - 1px);border-top-right-radius:calc(0.25rem - 1px)}.card-img-bottom{width:100%;border-bottom-right-radius:calc(0.25rem - 1px);border-bottom-left-radius:calc(0.25rem - 1px)}.card-deck{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.card-deck .card{margin-bottom:15px}@media (min-width: 576px){.card-deck{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;margin-right:-15px;margin-left:-15px}.card-deck .card{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 0 0%;flex:1 0 0%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;margin-right:15px;margin-bottom:0;margin-left:15px}}.card-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.card-group\u003e.card{margin-bottom:15px}@media (min-width: 576px){.card-group{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap}.card-group\u003e.card{-webkit-box-flex:1;-ms-flex:1 0 0%;flex:1 0 0%;margin-bottom:0}.card-group\u003e.card+.card{margin-left:0;border-left:0}.card-group\u003e.card:first-child{border-top-right-radius:0;border-bottom-right-radius:0}.card-group\u003e.card:first-child .card-img-top,.card-group\u003e.card:first-child .card-header{border-top-right-radius:0}.card-group\u003e.card:first-child .card-img-bottom,.card-group\u003e.card:first-child .card-footer{border-bottom-right-radius:0}.card-group\u003e.card:last-child{border-top-left-radius:0;border-bottom-left-radius:0}.card-group\u003e.card:last-child .card-img-top,.card-group\u003e.card:last-child .card-header{border-top-left-radius:0}.card-group\u003e.card:last-child .card-img-bottom,.card-group\u003e.card:last-child .card-footer{border-bottom-left-radius:0}.card-group\u003e.card:only-child{border-radius:0.25rem}.card-group\u003e.card:only-child .card-img-top,.card-group\u003e.card:only-child .card-header{border-top-left-radius:0.25rem;border-top-right-radius:0.25rem}.card-group\u003e.card:only-child .card-img-bottom,.card-group\u003e.card:only-child .card-footer{border-bottom-right-radius:0.25rem;border-bottom-left-radius:0.25rem}.card-group\u003e.card:not(:first-child):not(:last-child):not(:only-child){border-radius:0}.card-group\u003e.card:not(:first-child):not(:last-child):not(:only-child) .card-img-top,.card-group\u003e.card:not(:first-child):not(:last-child):not(:only-child) .card-img-bottom,.card-group\u003e.card:not(:first-child):not(:last-child):not(:only-child) .card-header,.card-group\u003e.card:not(:first-child):not(:last-child):not(:only-child) .card-footer{border-radius:0}}.card-columns .card{margin-bottom:0.75rem}@media (min-width: 576px){.card-columns{-webkit-column-count:3;column-count:3;-webkit-column-gap:1.25rem;column-gap:1.25rem;orphans:1;widows:1}.card-columns .card{display:inline-block;width:100%}}.accordion .card:not(:first-of-type):not(:last-of-type){border-bottom:0;border-radius:0}.accordion .card:not(:first-of-type) .card-header:first-child{border-radius:0}.accordion .card:first-of-type{border-bottom:0;border-bottom-right-radius:0;border-bottom-left-radius:0}.accordion .card:last-of-type{border-top-left-radius:0;border-top-right-radius:0}.breadcrumb{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:0.75rem 1rem;margin-bottom:1rem;list-style:none;background-color:#444;border-radius:0.25rem}.breadcrumb-item+.breadcrumb-item{padding-left:0.5rem}.breadcrumb-item+.breadcrumb-item::before{display:inline-block;padding-right:0.5rem;color:#999;content:\"/\"}.breadcrumb-item+.breadcrumb-item:hover::before{text-decoration:underline}.breadcrumb-item+.breadcrumb-item:hover::before{text-decoration:none}.breadcrumb-item.active{color:#999}.pagination{display:-webkit-box;display:-ms-flexbox;display:flex;padding-left:0;list-style:none;border-radius:0.25rem}.page-link{position:relative;display:block;padding:0.5rem 0.75rem;margin-left:0;line-height:1.25;color:#fff;background-color:#00bc8c;border:0 solid transparent}.page-link:hover{z-index:2;color:#fff;text-decoration:none;background-color:#00efb2;border-color:transparent}.page-link:focus{z-index:2;outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(55,90,127,0.25);box-shadow:0 0 0 0.2rem rgba(55,90,127,0.25)}.page-link:not(:disabled):not(.disabled){cursor:pointer}.page-item:first-child .page-link{margin-left:0;border-top-left-radius:0.25rem;border-bottom-left-radius:0.25rem}.page-item:last-child .page-link{border-top-right-radius:0.25rem;border-bottom-right-radius:0.25rem}.page-item.active .page-link{z-index:1;color:#fff;background-color:#00efb2;border-color:transparent}.page-item.disabled .page-link{color:#fff;pointer-events:none;cursor:auto;background-color:#007053;border-color:transparent}.pagination-lg .page-link{padding:0.75rem 1.5rem;font-size:1.171875rem;line-height:1.5}.pagination-lg .page-item:first-child .page-link{border-top-left-radius:0.3rem;border-bottom-left-radius:0.3rem}.pagination-lg .page-item:last-child .page-link{border-top-right-radius:0.3rem;border-bottom-right-radius:0.3rem}.pagination-sm .page-link{padding:0.25rem 0.5rem;font-size:0.8203125rem;line-height:1.5}.pagination-sm .page-item:first-child .page-link{border-top-left-radius:0.2rem;border-bottom-left-radius:0.2rem}.pagination-sm .page-item:last-child .page-link{border-top-right-radius:0.2rem;border-bottom-right-radius:0.2rem}.badge{display:inline-block;padding:0.25em 0.4em;font-size:75%;font-weight:700;line-height:1;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0.25rem}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.badge-pill{padding-right:0.6em;padding-left:0.6em;border-radius:10rem}.badge-primary{color:#fff;background-color:#375a7f}.badge-primary[href]:hover,.badge-primary[href]:focus{color:#fff;text-decoration:none;background-color:#28415b}.badge-secondary{color:#fff;background-color:#444}.badge-secondary[href]:hover,.badge-secondary[href]:focus{color:#fff;text-decoration:none;background-color:#2b2a2a}.badge-success{color:#fff;background-color:#00bc8c}.badge-success[href]:hover,.badge-success[href]:focus{color:#fff;text-decoration:none;background-color:#008966}.badge-info{color:#fff;background-color:#3498DB}.badge-info[href]:hover,.badge-info[href]:focus{color:#fff;text-decoration:none;background-color:#217dbb}.badge-warning{color:#fff;background-color:#F39C12}.badge-warning[href]:hover,.badge-warning[href]:focus{color:#fff;text-decoration:none;background-color:#c87f0a}.badge-danger{color:#fff;background-color:#E74C3C}.badge-danger[href]:hover,.badge-danger[href]:focus{color:#fff;text-decoration:none;background-color:#d62c1a}.badge-light{color:#fff;background-color:#303030}.badge-light[href]:hover,.badge-light[href]:focus{color:#fff;text-decoration:none;background-color:#171616}.badge-dark{color:#222;background-color:#adb5bd}.badge-dark[href]:hover,.badge-dark[href]:focus{color:#222;text-decoration:none;background-color:#919ca6}.jumbotron{padding:2rem 1rem;margin-bottom:2rem;background-color:#303030;border-radius:0.3rem}@media (min-width: 576px){.jumbotron{padding:4rem 2rem}}.jumbotron-fluid{padding-right:0;padding-left:0;border-radius:0}.alert{position:relative;padding:0.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:0.25rem}.alert-heading{color:inherit}.alert-link{font-weight:700}.alert-dismissible{padding-right:3.90625rem}.alert-dismissible .close{position:absolute;top:0;right:0;padding:0.75rem 1.25rem;color:inherit}.alert-primary{color:#1d2f42;background-color:#d7dee5;border-color:#c7d1db}.alert-primary hr{border-top-color:#b7c4d1}.alert-primary .alert-link{color:#0d161f}.alert-secondary{color:#232323;background-color:#dadada;border-color:#cbcbcb}.alert-secondary hr{border-top-color:#bebebe}.alert-secondary .alert-link{color:#0a0909}.alert-success{color:#006249;background-color:#ccf2e8;border-color:#b8ecdf}.alert-success hr{border-top-color:#a4e7d6}.alert-success .alert-link{color:#002f23}.alert-info{color:#1b4f72;background-color:#d6eaf8;border-color:#c6e2f5}.alert-info hr{border-top-color:#b0d7f1}.alert-info .alert-link{color:#113249}.alert-warning{color:#7e5109;background-color:#fdebd0;border-color:#fce3bd}.alert-warning hr{border-top-color:#fbd9a5}.alert-warning .alert-link{color:#4e3206}.alert-danger{color:#78281f;background-color:#fadbd8;border-color:#f8cdc8}.alert-danger hr{border-top-color:#f5b8b1}.alert-danger .alert-link{color:#4f1a15}.alert-light{color:#191919;background-color:#d6d6d6;border-color:#c5c5c5}.alert-light hr{border-top-color:#b8b8b8}.alert-light .alert-link{color:black}.alert-dark{color:#5a5e62;background-color:#eff0f2;border-color:#e8eaed}.alert-dark hr{border-top-color:#dadde2}.alert-dark .alert-link{color:#424547}@-webkit-keyframes progress-bar-stripes{from{background-position:0.625rem 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:0.625rem 0}to{background-position:0 0}}.progress{display:-webkit-box;display:-ms-flexbox;display:flex;height:0.625rem;overflow:hidden;font-size:0.625rem;background-color:#444;border-radius:0.25rem}.progress-bar{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;color:#fff;text-align:center;white-space:nowrap;background-color:#375a7f;-webkit-transition:width 0.6s ease;transition:width 0.6s ease}@media screen and (prefers-reduced-motion: reduce){.progress-bar{-webkit-transition:none;transition:none}}.progress-bar-striped{background-image:linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent);background-size:0.625rem 0.625rem}.progress-bar-animated{-webkit-animation:progress-bar-stripes 1s linear infinite;animation:progress-bar-stripes 1s linear infinite}.media{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.media-body{-webkit-box-flex:1;-ms-flex:1;flex:1}.list-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0}.list-group-item-action{width:100%;color:#444;text-align:inherit}.list-group-item-action:hover,.list-group-item-action:focus{color:#444;text-decoration:none;background-color:#444}.list-group-item-action:active{color:#fff;background-color:#ebebeb}.list-group-item{position:relative;display:block;padding:0.75rem 1.25rem;margin-bottom:-1px;background-color:#303030;border:1px solid #444}.list-group-item:first-child{border-top-left-radius:0.25rem;border-top-right-radius:0.25rem}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:0.25rem;border-bottom-left-radius:0.25rem}.list-group-item:hover,.list-group-item:focus{z-index:1;text-decoration:none}.list-group-item.disabled,.list-group-item:disabled{color:#999;background-color:#303030}.list-group-item.active{z-index:2;color:#fff;background-color:#375a7f;border-color:#375a7f}.list-group-flush .list-group-item{border-right:0;border-left:0;border-radius:0}.list-group-flush:first-child .list-group-item:first-child{border-top:0}.list-group-flush:last-child .list-group-item:last-child{border-bottom:0}.list-group-item-primary{color:#1d2f42;background-color:#c7d1db}.list-group-item-primary.list-group-item-action:hover,.list-group-item-primary.list-group-item-action:focus{color:#1d2f42;background-color:#b7c4d1}.list-group-item-primary.list-group-item-action.active{color:#fff;background-color:#1d2f42;border-color:#1d2f42}.list-group-item-secondary{color:#232323;background-color:#cbcbcb}.list-group-item-secondary.list-group-item-action:hover,.list-group-item-secondary.list-group-item-action:focus{color:#232323;background-color:#bebebe}.list-group-item-secondary.list-group-item-action.active{color:#fff;background-color:#232323;border-color:#232323}.list-group-item-success{color:#006249;background-color:#b8ecdf}.list-group-item-success.list-group-item-action:hover,.list-group-item-success.list-group-item-action:focus{color:#006249;background-color:#a4e7d6}.list-group-item-success.list-group-item-action.active{color:#fff;background-color:#006249;border-color:#006249}.list-group-item-info{color:#1b4f72;background-color:#c6e2f5}.list-group-item-info.list-group-item-action:hover,.list-group-item-info.list-group-item-action:focus{color:#1b4f72;background-color:#b0d7f1}.list-group-item-info.list-group-item-action.active{color:#fff;background-color:#1b4f72;border-color:#1b4f72}.list-group-item-warning{color:#7e5109;background-color:#fce3bd}.list-group-item-warning.list-group-item-action:hover,.list-group-item-warning.list-group-item-action:focus{color:#7e5109;background-color:#fbd9a5}.list-group-item-warning.list-group-item-action.active{color:#fff;background-color:#7e5109;border-color:#7e5109}.list-group-item-danger{color:#78281f;background-color:#f8cdc8}.list-group-item-danger.list-group-item-action:hover,.list-group-item-danger.list-group-item-action:focus{color:#78281f;background-color:#f5b8b1}.list-group-item-danger.list-group-item-action.active{color:#fff;background-color:#78281f;border-color:#78281f}.list-group-item-light{color:#191919;background-color:#c5c5c5}.list-group-item-light.list-group-item-action:hover,.list-group-item-light.list-group-item-action:focus{color:#191919;background-color:#b8b8b8}.list-group-item-light.list-group-item-action.active{color:#fff;background-color:#191919;border-color:#191919}.list-group-item-dark{color:#5a5e62;background-color:#e8eaed}.list-group-item-dark.list-group-item-action:hover,.list-group-item-dark.list-group-item-action:focus{color:#5a5e62;background-color:#dadde2}.list-group-item-dark.list-group-item-action.active{color:#fff;background-color:#5a5e62;border-color:#5a5e62}.close{float:right;font-size:1.40625rem;font-weight:700;line-height:1;color:#fff;text-shadow:none;opacity:.5}.close:not(:disabled):not(.disabled){cursor:pointer}.close:not(:disabled):not(.disabled):hover,.close:not(:disabled):not(.disabled):focus{color:#fff;text-decoration:none;opacity:.75}button.close{padding:0;background-color:transparent;border:0;-webkit-appearance:none}.modal-open{overflow:hidden}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;display:none;overflow:hidden;outline:0}.modal-dialog{position:relative;width:auto;margin:0.5rem;pointer-events:none}.modal.fade .modal-dialog{-webkit-transition:-webkit-transform 0.3s ease-out;transition:-webkit-transform 0.3s ease-out;transition:transform 0.3s ease-out;transition:transform 0.3s ease-out, -webkit-transform 0.3s ease-out;-webkit-transform:translate(0, -25%);transform:translate(0, -25%)}@media screen and (prefers-reduced-motion: reduce){.modal.fade .modal-dialog{-webkit-transition:none;transition:none}}.modal.show .modal-dialog{-webkit-transform:translate(0, 0);transform:translate(0, 0)}.modal-dialog-centered{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;min-height:calc(100% - (0.5rem * 2))}.modal-dialog-centered::before{display:block;height:calc(100vh - (0.5rem * 2));content:\"\"}.modal-content{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;width:100%;pointer-events:auto;background-color:#303030;background-clip:padding-box;border:1px solid #444;border-radius:0.3rem;outline:0}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:0.5}.modal-header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:1rem;border-bottom:1px solid #444;border-top-left-radius:0.3rem;border-top-right-radius:0.3rem}.modal-header .close{padding:1rem;margin:-1rem -1rem -1rem auto}.modal-title{margin-bottom:0;line-height:1.5}.modal-body{position:relative;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;padding:1rem}.modal-footer{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;padding:1rem;border-top:1px solid #444}.modal-footer\u003e:not(:first-child){margin-left:.25rem}.modal-footer\u003e:not(:last-child){margin-right:.25rem}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width: 576px){.modal-dialog{max-width:500px;margin:1.75rem auto}.modal-dialog-centered{min-height:calc(100% - (1.75rem * 2))}.modal-dialog-centered::before{height:calc(100vh - (1.75rem * 2))}.modal-sm{max-width:300px}}@media (min-width: 992px){.modal-lg{max-width:800px}}.tooltip{position:absolute;z-index:1070;display:block;margin:0;font-family:\"Lato\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:0.8203125rem;word-wrap:break-word;opacity:0}.tooltip.show{opacity:0.9}.tooltip .arrow{position:absolute;display:block;width:0.8rem;height:0.4rem}.tooltip .arrow::before{position:absolute;content:\"\";border-color:transparent;border-style:solid}.bs-tooltip-top,.bs-tooltip-auto[x-placement^\u003d\"top\"]{padding:0.4rem 0}.bs-tooltip-top .arrow,.bs-tooltip-auto[x-placement^\u003d\"top\"] .arrow{bottom:0}.bs-tooltip-top .arrow::before,.bs-tooltip-auto[x-placement^\u003d\"top\"] .arrow::before{top:0;border-width:0.4rem 0.4rem 0;border-top-color:#000}.bs-tooltip-right,.bs-tooltip-auto[x-placement^\u003d\"right\"]{padding:0 0.4rem}.bs-tooltip-right .arrow,.bs-tooltip-auto[x-placement^\u003d\"right\"] .arrow{left:0;width:0.4rem;height:0.8rem}.bs-tooltip-right .arrow::before,.bs-tooltip-auto[x-placement^\u003d\"right\"] .arrow::before{right:0;border-width:0.4rem 0.4rem 0.4rem 0;border-right-color:#000}.bs-tooltip-bottom,.bs-tooltip-auto[x-placement^\u003d\"bottom\"]{padding:0.4rem 0}.bs-tooltip-bottom .arrow,.bs-tooltip-auto[x-placement^\u003d\"bottom\"] .arrow{top:0}.bs-tooltip-bottom .arrow::before,.bs-tooltip-auto[x-placement^\u003d\"bottom\"] .arrow::before{bottom:0;border-width:0 0.4rem 0.4rem;border-bottom-color:#000}.bs-tooltip-left,.bs-tooltip-auto[x-placement^\u003d\"left\"]{padding:0 0.4rem}.bs-tooltip-left .arrow,.bs-tooltip-auto[x-placement^\u003d\"left\"] .arrow{right:0;width:0.4rem;height:0.8rem}.bs-tooltip-left .arrow::before,.bs-tooltip-auto[x-placement^\u003d\"left\"] .arrow::before{left:0;border-width:0.4rem 0 0.4rem 0.4rem;border-left-color:#000}.tooltip-inner{max-width:200px;padding:0.25rem 0.5rem;color:#fff;text-align:center;background-color:#000;border-radius:0.25rem}.popover{position:absolute;top:0;left:0;z-index:1060;display:block;max-width:276px;font-family:\"Lato\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:0.8203125rem;word-wrap:break-word;background-color:#303030;background-clip:padding-box;border:1px solid rgba(0,0,0,0.2);border-radius:0.3rem}.popover .arrow{position:absolute;display:block;width:1rem;height:0.5rem;margin:0 0.3rem}.popover .arrow::before,.popover .arrow::after{position:absolute;display:block;content:\"\";border-color:transparent;border-style:solid}.bs-popover-top,.bs-popover-auto[x-placement^\u003d\"top\"]{margin-bottom:0.5rem}.bs-popover-top .arrow,.bs-popover-auto[x-placement^\u003d\"top\"] .arrow{bottom:calc((0.5rem + 1px) * -1)}.bs-popover-top .arrow::before,.bs-popover-auto[x-placement^\u003d\"top\"] .arrow::before,.bs-popover-top .arrow::after,.bs-popover-auto[x-placement^\u003d\"top\"] .arrow::after{border-width:0.5rem 0.5rem 0}.bs-popover-top .arrow::before,.bs-popover-auto[x-placement^\u003d\"top\"] .arrow::before{bottom:0;border-top-color:rgba(0,0,0,0.25)}.bs-popover-top .arrow::after,.bs-popover-auto[x-placement^\u003d\"top\"] .arrow::after{bottom:1px;border-top-color:#303030}.bs-popover-right,.bs-popover-auto[x-placement^\u003d\"right\"]{margin-left:0.5rem}.bs-popover-right .arrow,.bs-popover-auto[x-placement^\u003d\"right\"] .arrow{left:calc((0.5rem + 1px) * -1);width:0.5rem;height:1rem;margin:0.3rem 0}.bs-popover-right .arrow::before,.bs-popover-auto[x-placement^\u003d\"right\"] .arrow::before,.bs-popover-right .arrow::after,.bs-popover-auto[x-placement^\u003d\"right\"] .arrow::after{border-width:0.5rem 0.5rem 0.5rem 0}.bs-popover-right .arrow::before,.bs-popover-auto[x-placement^\u003d\"right\"] .arrow::before{left:0;border-right-color:rgba(0,0,0,0.25)}.bs-popover-right .arrow::after,.bs-popover-auto[x-placement^\u003d\"right\"] .arrow::after{left:1px;border-right-color:#303030}.bs-popover-bottom,.bs-popover-auto[x-placement^\u003d\"bottom\"]{margin-top:0.5rem}.bs-popover-bottom .arrow,.bs-popover-auto[x-placement^\u003d\"bottom\"] .arrow{top:calc((0.5rem + 1px) * -1)}.bs-popover-bottom .arrow::before,.bs-popover-auto[x-placement^\u003d\"bottom\"] .arrow::before,.bs-popover-bottom .arrow::after,.bs-popover-auto[x-placement^\u003d\"bottom\"] .arrow::after{border-width:0 0.5rem 0.5rem 0.5rem}.bs-popover-bottom .arrow::before,.bs-popover-auto[x-placement^\u003d\"bottom\"] .arrow::before{top:0;border-bottom-color:rgba(0,0,0,0.25)}.bs-popover-bottom .arrow::after,.bs-popover-auto[x-placement^\u003d\"bottom\"] .arrow::after{top:1px;border-bottom-color:#303030}.bs-popover-bottom .popover-header::before,.bs-popover-auto[x-placement^\u003d\"bottom\"] .popover-header::before{position:absolute;top:0;left:50%;display:block;width:1rem;margin-left:-0.5rem;content:\"\";border-bottom:1px solid #444}.bs-popover-left,.bs-popover-auto[x-placement^\u003d\"left\"]{margin-right:0.5rem}.bs-popover-left .arrow,.bs-popover-auto[x-placement^\u003d\"left\"] .arrow{right:calc((0.5rem + 1px) * -1);width:0.5rem;height:1rem;margin:0.3rem 0}.bs-popover-left .arrow::before,.bs-popover-auto[x-placement^\u003d\"left\"] .arrow::before,.bs-popover-left .arrow::after,.bs-popover-auto[x-placement^\u003d\"left\"] .arrow::after{border-width:0.5rem 0 0.5rem 0.5rem}.bs-popover-left .arrow::before,.bs-popover-auto[x-placement^\u003d\"left\"] .arrow::before{right:0;border-left-color:rgba(0,0,0,0.25)}.bs-popover-left .arrow::after,.bs-popover-auto[x-placement^\u003d\"left\"] .arrow::after{right:1px;border-left-color:#303030}.popover-header{padding:0.5rem 0.75rem;margin-bottom:0;font-size:0.9375rem;color:inherit;background-color:#444;border-bottom:1px solid #373737;border-top-left-radius:calc(0.3rem - 1px);border-top-right-radius:calc(0.3rem - 1px)}.popover-header:empty{display:none}.popover-body{padding:0.5rem 0.75rem;color:#fff}.carousel{position:relative}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-item{position:relative;display:none;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px}.carousel-item.active,.carousel-item-next,.carousel-item-prev{display:block;-webkit-transition:-webkit-transform 0.6s ease;transition:-webkit-transform 0.6s ease;transition:transform 0.6s ease;transition:transform 0.6s ease, -webkit-transform 0.6s ease}@media screen and (prefers-reduced-motion: reduce){.carousel-item.active,.carousel-item-next,.carousel-item-prev{-webkit-transition:none;transition:none}}.carousel-item-next,.carousel-item-prev{position:absolute;top:0}.carousel-item-next.carousel-item-left,.carousel-item-prev.carousel-item-right{-webkit-transform:translateX(0);transform:translateX(0)}@supports (-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d){.carousel-item-next.carousel-item-left,.carousel-item-prev.carousel-item-right{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}.carousel-item-next,.active.carousel-item-right{-webkit-transform:translateX(100%);transform:translateX(100%)}@supports (-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d){.carousel-item-next,.active.carousel-item-right{-webkit-transform:translate3d(100%, 0, 0);transform:translate3d(100%, 0, 0)}}.carousel-item-prev,.active.carousel-item-left{-webkit-transform:translateX(-100%);transform:translateX(-100%)}@supports (-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d){.carousel-item-prev,.active.carousel-item-left{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}.carousel-fade .carousel-item{opacity:0;-webkit-transition-duration:.6s;transition-duration:.6s;-webkit-transition-property:opacity;transition-property:opacity}.carousel-fade .carousel-item.active,.carousel-fade .carousel-item-next.carousel-item-left,.carousel-fade .carousel-item-prev.carousel-item-right{opacity:1}.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-right{opacity:0}.carousel-fade .carousel-item-next,.carousel-fade .carousel-item-prev,.carousel-fade .carousel-item.active,.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-prev{-webkit-transform:translateX(0);transform:translateX(0)}@supports (-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d){.carousel-fade .carousel-item-next,.carousel-fade .carousel-item-prev,.carousel-fade .carousel-item.active,.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-prev{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}.carousel-control-prev,.carousel-control-next{position:absolute;top:0;bottom:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:15%;color:#fff;text-align:center;opacity:0.5}.carousel-control-prev:hover,.carousel-control-prev:focus,.carousel-control-next:hover,.carousel-control-next:focus{color:#fff;text-decoration:none;outline:0;opacity:.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-prev-icon,.carousel-control-next-icon{display:inline-block;width:20px;height:20px;background:transparent no-repeat center center;background-size:100% 100%}.carousel-control-prev-icon{background-image:url(\"data:image/svg+xml;charset\u003dutf8,%3Csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 fill\u003d\u0027%23fff\u0027 viewBox\u003d\u00270 0 8 8\u0027%3E%3Cpath d\u003d\u0027M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z\u0027/%3E%3C/svg%3E\")}.carousel-control-next-icon{background-image:url(\"data:image/svg+xml;charset\u003dutf8,%3Csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 fill\u003d\u0027%23fff\u0027 viewBox\u003d\u00270 0 8 8\u0027%3E%3Cpath d\u003d\u0027M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z\u0027/%3E%3C/svg%3E\")}.carousel-indicators{position:absolute;right:0;bottom:10px;left:0;z-index:15;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding-left:0;margin-right:15%;margin-left:15%;list-style:none}.carousel-indicators li{position:relative;-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;width:30px;height:3px;margin-right:3px;margin-left:3px;text-indent:-999px;cursor:pointer;background-color:rgba(255,255,255,0.5)}.carousel-indicators li::before{position:absolute;top:-10px;left:0;display:inline-block;width:100%;height:10px;content:\"\"}.carousel-indicators li::after{position:absolute;bottom:-10px;left:0;display:inline-block;width:100%;height:10px;content:\"\"}.carousel-indicators .active{background-color:#fff}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center}.align-baseline{vertical-align:baseline !important}.align-top{vertical-align:top !important}.align-middle{vertical-align:middle !important}.align-bottom{vertical-align:bottom !important}.align-text-bottom{vertical-align:text-bottom !important}.align-text-top{vertical-align:text-top !important}.bg-primary{background-color:#375a7f !important}a.bg-primary:hover,a.bg-primary:focus,button.bg-primary:hover,button.bg-primary:focus{background-color:#28415b !important}.bg-secondary{background-color:#444 !important}a.bg-secondary:hover,a.bg-secondary:focus,button.bg-secondary:hover,button.bg-secondary:focus{background-color:#2b2a2a !important}.bg-success{background-color:#00bc8c !important}a.bg-success:hover,a.bg-success:focus,button.bg-success:hover,button.bg-success:focus{background-color:#008966 !important}.bg-info{background-color:#3498DB !important}a.bg-info:hover,a.bg-info:focus,button.bg-info:hover,button.bg-info:focus{background-color:#217dbb !important}.bg-warning{background-color:#F39C12 !important}a.bg-warning:hover,a.bg-warning:focus,button.bg-warning:hover,button.bg-warning:focus{background-color:#c87f0a !important}.bg-danger{background-color:#E74C3C !important}a.bg-danger:hover,a.bg-danger:focus,button.bg-danger:hover,button.bg-danger:focus{background-color:#d62c1a !important}.bg-light{background-color:#303030 !important}a.bg-light:hover,a.bg-light:focus,button.bg-light:hover,button.bg-light:focus{background-color:#171616 !important}.bg-dark{background-color:#adb5bd !important}a.bg-dark:hover,a.bg-dark:focus,button.bg-dark:hover,button.bg-dark:focus{background-color:#919ca6 !important}.bg-white{background-color:#fff !important}.bg-transparent{background-color:transparent !important}.border{border:1px solid #dee2e6 !important}.border-top{border-top:1px solid #dee2e6 !important}.border-right{border-right:1px solid #dee2e6 !important}.border-bottom{border-bottom:1px solid #dee2e6 !important}.border-left{border-left:1px solid #dee2e6 !important}.border-0{border:0 !important}.border-top-0{border-top:0 !important}.border-right-0{border-right:0 !important}.border-bottom-0{border-bottom:0 !important}.border-left-0{border-left:0 !important}.border-primary{border-color:#375a7f !important}.border-secondary{border-color:#444 !important}.border-success{border-color:#00bc8c !important}.border-info{border-color:#3498DB !important}.border-warning{border-color:#F39C12 !important}.border-danger{border-color:#E74C3C !important}.border-light{border-color:#303030 !important}.border-dark{border-color:#adb5bd !important}.border-white{border-color:#fff !important}.rounded{border-radius:0.25rem !important}.rounded-top{border-top-left-radius:0.25rem !important;border-top-right-radius:0.25rem !important}.rounded-right{border-top-right-radius:0.25rem !important;border-bottom-right-radius:0.25rem !important}.rounded-bottom{border-bottom-right-radius:0.25rem !important;border-bottom-left-radius:0.25rem !important}.rounded-left{border-top-left-radius:0.25rem !important;border-bottom-left-radius:0.25rem !important}.rounded-circle{border-radius:50% !important}.rounded-0{border-radius:0 !important}.clearfix::after{display:block;clear:both;content:\"\"}.d-none{display:none !important}.d-inline{display:inline !important}.d-inline-block{display:inline-block !important}.d-block{display:block !important}.d-table{display:table !important}.d-table-row{display:table-row !important}.d-table-cell{display:table-cell !important}.d-flex{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important}.d-inline-flex{display:-webkit-inline-box !important;display:-ms-inline-flexbox !important;display:inline-flex !important}@media (min-width: 576px){.d-sm-none{display:none !important}.d-sm-inline{display:inline !important}.d-sm-inline-block{display:inline-block !important}.d-sm-block{display:block !important}.d-sm-table{display:table !important}.d-sm-table-row{display:table-row !important}.d-sm-table-cell{display:table-cell !important}.d-sm-flex{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important}.d-sm-inline-flex{display:-webkit-inline-box !important;display:-ms-inline-flexbox !important;display:inline-flex !important}}@media (min-width: 768px){.d-md-none{display:none !important}.d-md-inline{display:inline !important}.d-md-inline-block{display:inline-block !important}.d-md-block{display:block !important}.d-md-table{display:table !important}.d-md-table-row{display:table-row !important}.d-md-table-cell{display:table-cell !important}.d-md-flex{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important}.d-md-inline-flex{display:-webkit-inline-box !important;display:-ms-inline-flexbox !important;display:inline-flex !important}}@media (min-width: 992px){.d-lg-none{display:none !important}.d-lg-inline{display:inline !important}.d-lg-inline-block{display:inline-block !important}.d-lg-block{display:block !important}.d-lg-table{display:table !important}.d-lg-table-row{display:table-row !important}.d-lg-table-cell{display:table-cell !important}.d-lg-flex{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important}.d-lg-inline-flex{display:-webkit-inline-box !important;display:-ms-inline-flexbox !important;display:inline-flex !important}}@media (min-width: 1200px){.d-xl-none{display:none !important}.d-xl-inline{display:inline !important}.d-xl-inline-block{display:inline-block !important}.d-xl-block{display:block !important}.d-xl-table{display:table !important}.d-xl-table-row{display:table-row !important}.d-xl-table-cell{display:table-cell !important}.d-xl-flex{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important}.d-xl-inline-flex{display:-webkit-inline-box !important;display:-ms-inline-flexbox !important;display:inline-flex !important}}@media print{.d-print-none{display:none !important}.d-print-inline{display:inline !important}.d-print-inline-block{display:inline-block !important}.d-print-block{display:block !important}.d-print-table{display:table !important}.d-print-table-row{display:table-row !important}.d-print-table-cell{display:table-cell !important}.d-print-flex{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important}.d-print-inline-flex{display:-webkit-inline-box !important;display:-ms-inline-flexbox !important;display:inline-flex !important}}.embed-responsive{position:relative;display:block;width:100%;padding:0;overflow:hidden}.embed-responsive::before{display:block;content:\"\"}.embed-responsive .embed-responsive-item,.embed-responsive iframe,.embed-responsive embed,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-21by9::before{padding-top:42.8571428571%}.embed-responsive-16by9::before{padding-top:56.25%}.embed-responsive-4by3::before{padding-top:75%}.embed-responsive-1by1::before{padding-top:100%}.flex-row{-webkit-box-orient:horizontal !important;-webkit-box-direction:normal !important;-ms-flex-direction:row !important;flex-direction:row !important}.flex-column{-webkit-box-orient:vertical !important;-webkit-box-direction:normal !important;-ms-flex-direction:column !important;flex-direction:column !important}.flex-row-reverse{-webkit-box-orient:horizontal !important;-webkit-box-direction:reverse !important;-ms-flex-direction:row-reverse !important;flex-direction:row-reverse !important}.flex-column-reverse{-webkit-box-orient:vertical !important;-webkit-box-direction:reverse !important;-ms-flex-direction:column-reverse !important;flex-direction:column-reverse !important}.flex-wrap{-ms-flex-wrap:wrap !important;flex-wrap:wrap !important}.flex-nowrap{-ms-flex-wrap:nowrap !important;flex-wrap:nowrap !important}.flex-wrap-reverse{-ms-flex-wrap:wrap-reverse !important;flex-wrap:wrap-reverse !important}.flex-fill{-webkit-box-flex:1 !important;-ms-flex:1 1 auto !important;flex:1 1 auto !important}.flex-grow-0{-webkit-box-flex:0 !important;-ms-flex-positive:0 !important;flex-grow:0 !important}.flex-grow-1{-webkit-box-flex:1 !important;-ms-flex-positive:1 !important;flex-grow:1 !important}.flex-shrink-0{-ms-flex-negative:0 !important;flex-shrink:0 !important}.flex-shrink-1{-ms-flex-negative:1 !important;flex-shrink:1 !important}.justify-content-start{-webkit-box-pack:start !important;-ms-flex-pack:start !important;justify-content:flex-start !important}.justify-content-end{-webkit-box-pack:end !important;-ms-flex-pack:end !important;justify-content:flex-end !important}.justify-content-center{-webkit-box-pack:center !important;-ms-flex-pack:center !important;justify-content:center !important}.justify-content-between{-webkit-box-pack:justify !important;-ms-flex-pack:justify !important;justify-content:space-between !important}.justify-content-around{-ms-flex-pack:distribute !important;justify-content:space-around !important}.align-items-start{-webkit-box-align:start !important;-ms-flex-align:start !important;align-items:flex-start !important}.align-items-end{-webkit-box-align:end !important;-ms-flex-align:end !important;align-items:flex-end !important}.align-items-center{-webkit-box-align:center !important;-ms-flex-align:center !important;align-items:center !important}.align-items-baseline{-webkit-box-align:baseline !important;-ms-flex-align:baseline !important;align-items:baseline !important}.align-items-stretch{-webkit-box-align:stretch !important;-ms-flex-align:stretch !important;align-items:stretch !important}.align-content-start{-ms-flex-line-pack:start !important;align-content:flex-start !important}.align-content-end{-ms-flex-line-pack:end !important;align-content:flex-end !important}.align-content-center{-ms-flex-line-pack:center !important;align-content:center !important}.align-content-between{-ms-flex-line-pack:justify !important;align-content:space-between !important}.align-content-around{-ms-flex-line-pack:distribute !important;align-content:space-around !important}.align-content-stretch{-ms-flex-line-pack:stretch !important;align-content:stretch !important}.align-self-auto{-ms-flex-item-align:auto !important;align-self:auto !important}.align-self-start{-ms-flex-item-align:start !important;align-self:flex-start !important}.align-self-end{-ms-flex-item-align:end !important;align-self:flex-end !important}.align-self-center{-ms-flex-item-align:center !important;align-self:center !important}.align-self-baseline{-ms-flex-item-align:baseline !important;align-self:baseline !important}.align-self-stretch{-ms-flex-item-align:stretch !important;align-self:stretch !important}@media (min-width: 576px){.flex-sm-row{-webkit-box-orient:horizontal !important;-webkit-box-direction:normal !important;-ms-flex-direction:row !important;flex-direction:row !important}.flex-sm-column{-webkit-box-orient:vertical !important;-webkit-box-direction:normal !important;-ms-flex-direction:column !important;flex-direction:column !important}.flex-sm-row-reverse{-webkit-box-orient:horizontal !important;-webkit-box-direction:reverse !important;-ms-flex-direction:row-reverse !important;flex-direction:row-reverse !important}.flex-sm-column-reverse{-webkit-box-orient:vertical !important;-webkit-box-direction:reverse !important;-ms-flex-direction:column-reverse !important;flex-direction:column-reverse !important}.flex-sm-wrap{-ms-flex-wrap:wrap !important;flex-wrap:wrap !important}.flex-sm-nowrap{-ms-flex-wrap:nowrap !important;flex-wrap:nowrap !important}.flex-sm-wrap-reverse{-ms-flex-wrap:wrap-reverse !important;flex-wrap:wrap-reverse !important}.flex-sm-fill{-webkit-box-flex:1 !important;-ms-flex:1 1 auto !important;flex:1 1 auto !important}.flex-sm-grow-0{-webkit-box-flex:0 !important;-ms-flex-positive:0 !important;flex-grow:0 !important}.flex-sm-grow-1{-webkit-box-flex:1 !important;-ms-flex-positive:1 !important;flex-grow:1 !important}.flex-sm-shrink-0{-ms-flex-negative:0 !important;flex-shrink:0 !important}.flex-sm-shrink-1{-ms-flex-negative:1 !important;flex-shrink:1 !important}.justify-content-sm-start{-webkit-box-pack:start !important;-ms-flex-pack:start !important;justify-content:flex-start !important}.justify-content-sm-end{-webkit-box-pack:end !important;-ms-flex-pack:end !important;justify-content:flex-end !important}.justify-content-sm-center{-webkit-box-pack:center !important;-ms-flex-pack:center !important;justify-content:center !important}.justify-content-sm-between{-webkit-box-pack:justify !important;-ms-flex-pack:justify !important;justify-content:space-between !important}.justify-content-sm-around{-ms-flex-pack:distribute !important;justify-content:space-around !important}.align-items-sm-start{-webkit-box-align:start !important;-ms-flex-align:start !important;align-items:flex-start !important}.align-items-sm-end{-webkit-box-align:end !important;-ms-flex-align:end !important;align-items:flex-end !important}.align-items-sm-center{-webkit-box-align:center !important;-ms-flex-align:center !important;align-items:center !important}.align-items-sm-baseline{-webkit-box-align:baseline !important;-ms-flex-align:baseline !important;align-items:baseline !important}.align-items-sm-stretch{-webkit-box-align:stretch !important;-ms-flex-align:stretch !important;align-items:stretch !important}.align-content-sm-start{-ms-flex-line-pack:start !important;align-content:flex-start !important}.align-content-sm-end{-ms-flex-line-pack:end !important;align-content:flex-end !important}.align-content-sm-center{-ms-flex-line-pack:center !important;align-content:center !important}.align-content-sm-between{-ms-flex-line-pack:justify !important;align-content:space-between !important}.align-content-sm-around{-ms-flex-line-pack:distribute !important;align-content:space-around !important}.align-content-sm-stretch{-ms-flex-line-pack:stretch !important;align-content:stretch !important}.align-self-sm-auto{-ms-flex-item-align:auto !important;align-self:auto !important}.align-self-sm-start{-ms-flex-item-align:start !important;align-self:flex-start !important}.align-self-sm-end{-ms-flex-item-align:end !important;align-self:flex-end !important}.align-self-sm-center{-ms-flex-item-align:center !important;align-self:center !important}.align-self-sm-baseline{-ms-flex-item-align:baseline !important;align-self:baseline !important}.align-self-sm-stretch{-ms-flex-item-align:stretch !important;align-self:stretch !important}}@media (min-width: 768px){.flex-md-row{-webkit-box-orient:horizontal !important;-webkit-box-direction:normal !important;-ms-flex-direction:row !important;flex-direction:row !important}.flex-md-column{-webkit-box-orient:vertical !important;-webkit-box-direction:normal !important;-ms-flex-direction:column !important;flex-direction:column !important}.flex-md-row-reverse{-webkit-box-orient:horizontal !important;-webkit-box-direction:reverse !important;-ms-flex-direction:row-reverse !important;flex-direction:row-reverse !important}.flex-md-column-reverse{-webkit-box-orient:vertical !important;-webkit-box-direction:reverse !important;-ms-flex-direction:column-reverse !important;flex-direction:column-reverse !important}.flex-md-wrap{-ms-flex-wrap:wrap !important;flex-wrap:wrap !important}.flex-md-nowrap{-ms-flex-wrap:nowrap !important;flex-wrap:nowrap !important}.flex-md-wrap-reverse{-ms-flex-wrap:wrap-reverse !important;flex-wrap:wrap-reverse !important}.flex-md-fill{-webkit-box-flex:1 !important;-ms-flex:1 1 auto !important;flex:1 1 auto !important}.flex-md-grow-0{-webkit-box-flex:0 !important;-ms-flex-positive:0 !important;flex-grow:0 !important}.flex-md-grow-1{-webkit-box-flex:1 !important;-ms-flex-positive:1 !important;flex-grow:1 !important}.flex-md-shrink-0{-ms-flex-negative:0 !important;flex-shrink:0 !important}.flex-md-shrink-1{-ms-flex-negative:1 !important;flex-shrink:1 !important}.justify-content-md-start{-webkit-box-pack:start !important;-ms-flex-pack:start !important;justify-content:flex-start !important}.justify-content-md-end{-webkit-box-pack:end !important;-ms-flex-pack:end !important;justify-content:flex-end !important}.justify-content-md-center{-webkit-box-pack:center !important;-ms-flex-pack:center !important;justify-content:center !important}.justify-content-md-between{-webkit-box-pack:justify !important;-ms-flex-pack:justify !important;justify-content:space-between !important}.justify-content-md-around{-ms-flex-pack:distribute !important;justify-content:space-around !important}.align-items-md-start{-webkit-box-align:start !important;-ms-flex-align:start !important;align-items:flex-start !important}.align-items-md-end{-webkit-box-align:end !important;-ms-flex-align:end !important;align-items:flex-end !important}.align-items-md-center{-webkit-box-align:center !important;-ms-flex-align:center !important;align-items:center !important}.align-items-md-baseline{-webkit-box-align:baseline !important;-ms-flex-align:baseline !important;align-items:baseline !important}.align-items-md-stretch{-webkit-box-align:stretch !important;-ms-flex-align:stretch !important;align-items:stretch !important}.align-content-md-start{-ms-flex-line-pack:start !important;align-content:flex-start !important}.align-content-md-end{-ms-flex-line-pack:end !important;align-content:flex-end !important}.align-content-md-center{-ms-flex-line-pack:center !important;align-content:center !important}.align-content-md-between{-ms-flex-line-pack:justify !important;align-content:space-between !important}.align-content-md-around{-ms-flex-line-pack:distribute !important;align-content:space-around !important}.align-content-md-stretch{-ms-flex-line-pack:stretch !important;align-content:stretch !important}.align-self-md-auto{-ms-flex-item-align:auto !important;align-self:auto !important}.align-self-md-start{-ms-flex-item-align:start !important;align-self:flex-start !important}.align-self-md-end{-ms-flex-item-align:end !important;align-self:flex-end !important}.align-self-md-center{-ms-flex-item-align:center !important;align-self:center !important}.align-self-md-baseline{-ms-flex-item-align:baseline !important;align-self:baseline !important}.align-self-md-stretch{-ms-flex-item-align:stretch !important;align-self:stretch !important}}@media (min-width: 992px){.flex-lg-row{-webkit-box-orient:horizontal !important;-webkit-box-direction:normal !important;-ms-flex-direction:row !important;flex-direction:row !important}.flex-lg-column{-webkit-box-orient:vertical !important;-webkit-box-direction:normal !important;-ms-flex-direction:column !important;flex-direction:column !important}.flex-lg-row-reverse{-webkit-box-orient:horizontal !important;-webkit-box-direction:reverse !important;-ms-flex-direction:row-reverse !important;flex-direction:row-reverse !important}.flex-lg-column-reverse{-webkit-box-orient:vertical !important;-webkit-box-direction:reverse !important;-ms-flex-direction:column-reverse !important;flex-direction:column-reverse !important}.flex-lg-wrap{-ms-flex-wrap:wrap !important;flex-wrap:wrap !important}.flex-lg-nowrap{-ms-flex-wrap:nowrap !important;flex-wrap:nowrap !important}.flex-lg-wrap-reverse{-ms-flex-wrap:wrap-reverse !important;flex-wrap:wrap-reverse !important}.flex-lg-fill{-webkit-box-flex:1 !important;-ms-flex:1 1 auto !important;flex:1 1 auto !important}.flex-lg-grow-0{-webkit-box-flex:0 !important;-ms-flex-positive:0 !important;flex-grow:0 !important}.flex-lg-grow-1{-webkit-box-flex:1 !important;-ms-flex-positive:1 !important;flex-grow:1 !important}.flex-lg-shrink-0{-ms-flex-negative:0 !important;flex-shrink:0 !important}.flex-lg-shrink-1{-ms-flex-negative:1 !important;flex-shrink:1 !important}.justify-content-lg-start{-webkit-box-pack:start !important;-ms-flex-pack:start !important;justify-content:flex-start !important}.justify-content-lg-end{-webkit-box-pack:end !important;-ms-flex-pack:end !important;justify-content:flex-end !important}.justify-content-lg-center{-webkit-box-pack:center !important;-ms-flex-pack:center !important;justify-content:center !important}.justify-content-lg-between{-webkit-box-pack:justify !important;-ms-flex-pack:justify !important;justify-content:space-between !important}.justify-content-lg-around{-ms-flex-pack:distribute !important;justify-content:space-around !important}.align-items-lg-start{-webkit-box-align:start !important;-ms-flex-align:start !important;align-items:flex-start !important}.align-items-lg-end{-webkit-box-align:end !important;-ms-flex-align:end !important;align-items:flex-end !important}.align-items-lg-center{-webkit-box-align:center !important;-ms-flex-align:center !important;align-items:center !important}.align-items-lg-baseline{-webkit-box-align:baseline !important;-ms-flex-align:baseline !important;align-items:baseline !important}.align-items-lg-stretch{-webkit-box-align:stretch !important;-ms-flex-align:stretch !important;align-items:stretch !important}.align-content-lg-start{-ms-flex-line-pack:start !important;align-content:flex-start !important}.align-content-lg-end{-ms-flex-line-pack:end !important;align-content:flex-end !important}.align-content-lg-center{-ms-flex-line-pack:center !important;align-content:center !important}.align-content-lg-between{-ms-flex-line-pack:justify !important;align-content:space-between !important}.align-content-lg-around{-ms-flex-line-pack:distribute !important;align-content:space-around !important}.align-content-lg-stretch{-ms-flex-line-pack:stretch !important;align-content:stretch !important}.align-self-lg-auto{-ms-flex-item-align:auto !important;align-self:auto !important}.align-self-lg-start{-ms-flex-item-align:start !important;align-self:flex-start !important}.align-self-lg-end{-ms-flex-item-align:end !important;align-self:flex-end !important}.align-self-lg-center{-ms-flex-item-align:center !important;align-self:center !important}.align-self-lg-baseline{-ms-flex-item-align:baseline !important;align-self:baseline !important}.align-self-lg-stretch{-ms-flex-item-align:stretch !important;align-self:stretch !important}}@media (min-width: 1200px){.flex-xl-row{-webkit-box-orient:horizontal !important;-webkit-box-direction:normal !important;-ms-flex-direction:row !important;flex-direction:row !important}.flex-xl-column{-webkit-box-orient:vertical !important;-webkit-box-direction:normal !important;-ms-flex-direction:column !important;flex-direction:column !important}.flex-xl-row-reverse{-webkit-box-orient:horizontal !important;-webkit-box-direction:reverse !important;-ms-flex-direction:row-reverse !important;flex-direction:row-reverse !important}.flex-xl-column-reverse{-webkit-box-orient:vertical !important;-webkit-box-direction:reverse !important;-ms-flex-direction:column-reverse !important;flex-direction:column-reverse !important}.flex-xl-wrap{-ms-flex-wrap:wrap !important;flex-wrap:wrap !important}.flex-xl-nowrap{-ms-flex-wrap:nowrap !important;flex-wrap:nowrap !important}.flex-xl-wrap-reverse{-ms-flex-wrap:wrap-reverse !important;flex-wrap:wrap-reverse !important}.flex-xl-fill{-webkit-box-flex:1 !important;-ms-flex:1 1 auto !important;flex:1 1 auto !important}.flex-xl-grow-0{-webkit-box-flex:0 !important;-ms-flex-positive:0 !important;flex-grow:0 !important}.flex-xl-grow-1{-webkit-box-flex:1 !important;-ms-flex-positive:1 !important;flex-grow:1 !important}.flex-xl-shrink-0{-ms-flex-negative:0 !important;flex-shrink:0 !important}.flex-xl-shrink-1{-ms-flex-negative:1 !important;flex-shrink:1 !important}.justify-content-xl-start{-webkit-box-pack:start !important;-ms-flex-pack:start !important;justify-content:flex-start !important}.justify-content-xl-end{-webkit-box-pack:end !important;-ms-flex-pack:end !important;justify-content:flex-end !important}.justify-content-xl-center{-webkit-box-pack:center !important;-ms-flex-pack:center !important;justify-content:center !important}.justify-content-xl-between{-webkit-box-pack:justify !important;-ms-flex-pack:justify !important;justify-content:space-between !important}.justify-content-xl-around{-ms-flex-pack:distribute !important;justify-content:space-around !important}.align-items-xl-start{-webkit-box-align:start !important;-ms-flex-align:start !important;align-items:flex-start !important}.align-items-xl-end{-webkit-box-align:end !important;-ms-flex-align:end !important;align-items:flex-end !important}.align-items-xl-center{-webkit-box-align:center !important;-ms-flex-align:center !important;align-items:center !important}.align-items-xl-baseline{-webkit-box-align:baseline !important;-ms-flex-align:baseline !important;align-items:baseline !important}.align-items-xl-stretch{-webkit-box-align:stretch !important;-ms-flex-align:stretch !important;align-items:stretch !important}.align-content-xl-start{-ms-flex-line-pack:start !important;align-content:flex-start !important}.align-content-xl-end{-ms-flex-line-pack:end !important;align-content:flex-end !important}.align-content-xl-center{-ms-flex-line-pack:center !important;align-content:center !important}.align-content-xl-between{-ms-flex-line-pack:justify !important;align-content:space-between !important}.align-content-xl-around{-ms-flex-line-pack:distribute !important;align-content:space-around !important}.align-content-xl-stretch{-ms-flex-line-pack:stretch !important;align-content:stretch !important}.align-self-xl-auto{-ms-flex-item-align:auto !important;align-self:auto !important}.align-self-xl-start{-ms-flex-item-align:start !important;align-self:flex-start !important}.align-self-xl-end{-ms-flex-item-align:end !important;align-self:flex-end !important}.align-self-xl-center{-ms-flex-item-align:center !important;align-self:center !important}.align-self-xl-baseline{-ms-flex-item-align:baseline !important;align-self:baseline !important}.align-self-xl-stretch{-ms-flex-item-align:stretch !important;align-self:stretch !important}}.float-left{float:left !important}.float-right{float:right !important}.float-none{float:none !important}@media (min-width: 576px){.float-sm-left{float:left !important}.float-sm-right{float:right !important}.float-sm-none{float:none !important}}@media (min-width: 768px){.float-md-left{float:left !important}.float-md-right{float:right !important}.float-md-none{float:none !important}}@media (min-width: 992px){.float-lg-left{float:left !important}.float-lg-right{float:right !important}.float-lg-none{float:none !important}}@media (min-width: 1200px){.float-xl-left{float:left !important}.float-xl-right{float:right !important}.float-xl-none{float:none !important}}.position-static{position:static !important}.position-relative{position:relative !important}.position-absolute{position:absolute !important}.position-fixed{position:fixed !important}.position-sticky{position:-webkit-sticky !important;position:sticky !important}.fixed-top{position:fixed;top:0;right:0;left:0;z-index:1030}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}@supports (position: -webkit-sticky) or (position: sticky){.sticky-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}}.sr-only{position:absolute;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;overflow:visible;clip:auto;white-space:normal}.shadow-sm{-webkit-box-shadow:0 0.125rem 0.25rem rgba(0,0,0,0.075) !important;box-shadow:0 0.125rem 0.25rem rgba(0,0,0,0.075) !important}.shadow{-webkit-box-shadow:0 0.5rem 1rem rgba(0,0,0,0.15) !important;box-shadow:0 0.5rem 1rem rgba(0,0,0,0.15) !important}.shadow-lg{-webkit-box-shadow:0 1rem 3rem rgba(0,0,0,0.175) !important;box-shadow:0 1rem 3rem rgba(0,0,0,0.175) !important}.shadow-none{-webkit-box-shadow:none !important;box-shadow:none !important}.w-25{width:25% !important}.w-50{width:50% !important}.w-75{width:75% !important}.w-100{width:100% !important}.w-auto{width:auto !important}.h-25{height:25% !important}.h-50{height:50% !important}.h-75{height:75% !important}.h-100{height:100% !important}.h-auto{height:auto !important}.mw-100{max-width:100% !important}.mh-100{max-height:100% !important}.m-0{margin:0 !important}.mt-0,.my-0{margin-top:0 !important}.mr-0,.mx-0{margin-right:0 !important}.mb-0,.my-0{margin-bottom:0 !important}.ml-0,.mx-0{margin-left:0 !important}.m-1{margin:0.25rem !important}.mt-1,.my-1{margin-top:0.25rem !important}.mr-1,.mx-1{margin-right:0.25rem !important}.mb-1,.my-1{margin-bottom:0.25rem !important}.ml-1,.mx-1{margin-left:0.25rem !important}.m-2{margin:0.5rem !important}.mt-2,.my-2{margin-top:0.5rem !important}.mr-2,.mx-2{margin-right:0.5rem !important}.mb-2,.my-2{margin-bottom:0.5rem !important}.ml-2,.mx-2{margin-left:0.5rem !important}.m-3{margin:1rem !important}.mt-3,.my-3{margin-top:1rem !important}.mr-3,.mx-3{margin-right:1rem !important}.mb-3,.my-3{margin-bottom:1rem !important}.ml-3,.mx-3{margin-left:1rem !important}.m-4{margin:1.5rem !important}.mt-4,.my-4{margin-top:1.5rem !important}.mr-4,.mx-4{margin-right:1.5rem !important}.mb-4,.my-4{margin-bottom:1.5rem !important}.ml-4,.mx-4{margin-left:1.5rem !important}.m-5{margin:3rem !important}.mt-5,.my-5{margin-top:3rem !important}.mr-5,.mx-5{margin-right:3rem !important}.mb-5,.my-5{margin-bottom:3rem !important}.ml-5,.mx-5{margin-left:3rem !important}.p-0{padding:0 !important}.pt-0,.py-0{padding-top:0 !important}.pr-0,.px-0{padding-right:0 !important}.pb-0,.py-0{padding-bottom:0 !important}.pl-0,.px-0{padding-left:0 !important}.p-1{padding:0.25rem !important}.pt-1,.py-1{padding-top:0.25rem !important}.pr-1,.px-1{padding-right:0.25rem !important}.pb-1,.py-1{padding-bottom:0.25rem !important}.pl-1,.px-1{padding-left:0.25rem !important}.p-2{padding:0.5rem !important}.pt-2,.py-2{padding-top:0.5rem !important}.pr-2,.px-2{padding-right:0.5rem !important}.pb-2,.py-2{padding-bottom:0.5rem !important}.pl-2,.px-2{padding-left:0.5rem !important}.p-3{padding:1rem !important}.pt-3,.py-3{padding-top:1rem !important}.pr-3,.px-3{padding-right:1rem !important}.pb-3,.py-3{padding-bottom:1rem !important}.pl-3,.px-3{padding-left:1rem !important}.p-4{padding:1.5rem !important}.pt-4,.py-4{padding-top:1.5rem !important}.pr-4,.px-4{padding-right:1.5rem !important}.pb-4,.py-4{padding-bottom:1.5rem !important}.pl-4,.px-4{padding-left:1.5rem !important}.p-5{padding:3rem !important}.pt-5,.py-5{padding-top:3rem !important}.pr-5,.px-5{padding-right:3rem !important}.pb-5,.py-5{padding-bottom:3rem !important}.pl-5,.px-5{padding-left:3rem !important}.m-auto{margin:auto !important}.mt-auto,.my-auto{margin-top:auto !important}.mr-auto,.mx-auto{margin-right:auto !important}.mb-auto,.my-auto{margin-bottom:auto !important}.ml-auto,.mx-auto{margin-left:auto !important}@media (min-width: 576px){.m-sm-0{margin:0 !important}.mt-sm-0,.my-sm-0{margin-top:0 !important}.mr-sm-0,.mx-sm-0{margin-right:0 !important}.mb-sm-0,.my-sm-0{margin-bottom:0 !important}.ml-sm-0,.mx-sm-0{margin-left:0 !important}.m-sm-1{margin:0.25rem !important}.mt-sm-1,.my-sm-1{margin-top:0.25rem !important}.mr-sm-1,.mx-sm-1{margin-right:0.25rem !important}.mb-sm-1,.my-sm-1{margin-bottom:0.25rem !important}.ml-sm-1,.mx-sm-1{margin-left:0.25rem !important}.m-sm-2{margin:0.5rem !important}.mt-sm-2,.my-sm-2{margin-top:0.5rem !important}.mr-sm-2,.mx-sm-2{margin-right:0.5rem !important}.mb-sm-2,.my-sm-2{margin-bottom:0.5rem !important}.ml-sm-2,.mx-sm-2{margin-left:0.5rem !important}.m-sm-3{margin:1rem !important}.mt-sm-3,.my-sm-3{margin-top:1rem !important}.mr-sm-3,.mx-sm-3{margin-right:1rem !important}.mb-sm-3,.my-sm-3{margin-bottom:1rem !important}.ml-sm-3,.mx-sm-3{margin-left:1rem !important}.m-sm-4{margin:1.5rem !important}.mt-sm-4,.my-sm-4{margin-top:1.5rem !important}.mr-sm-4,.mx-sm-4{margin-right:1.5rem !important}.mb-sm-4,.my-sm-4{margin-bottom:1.5rem !important}.ml-sm-4,.mx-sm-4{margin-left:1.5rem !important}.m-sm-5{margin:3rem !important}.mt-sm-5,.my-sm-5{margin-top:3rem !important}.mr-sm-5,.mx-sm-5{margin-right:3rem !important}.mb-sm-5,.my-sm-5{margin-bottom:3rem !important}.ml-sm-5,.mx-sm-5{margin-left:3rem !important}.p-sm-0{padding:0 !important}.pt-sm-0,.py-sm-0{padding-top:0 !important}.pr-sm-0,.px-sm-0{padding-right:0 !important}.pb-sm-0,.py-sm-0{padding-bottom:0 !important}.pl-sm-0,.px-sm-0{padding-left:0 !important}.p-sm-1{padding:0.25rem !important}.pt-sm-1,.py-sm-1{padding-top:0.25rem !important}.pr-sm-1,.px-sm-1{padding-right:0.25rem !important}.pb-sm-1,.py-sm-1{padding-bottom:0.25rem !important}.pl-sm-1,.px-sm-1{padding-left:0.25rem !important}.p-sm-2{padding:0.5rem !important}.pt-sm-2,.py-sm-2{padding-top:0.5rem !important}.pr-sm-2,.px-sm-2{padding-right:0.5rem !important}.pb-sm-2,.py-sm-2{padding-bottom:0.5rem !important}.pl-sm-2,.px-sm-2{padding-left:0.5rem !important}.p-sm-3{padding:1rem !important}.pt-sm-3,.py-sm-3{padding-top:1rem !important}.pr-sm-3,.px-sm-3{padding-right:1rem !important}.pb-sm-3,.py-sm-3{padding-bottom:1rem !important}.pl-sm-3,.px-sm-3{padding-left:1rem !important}.p-sm-4{padding:1.5rem !important}.pt-sm-4,.py-sm-4{padding-top:1.5rem !important}.pr-sm-4,.px-sm-4{padding-right:1.5rem !important}.pb-sm-4,.py-sm-4{padding-bottom:1.5rem !important}.pl-sm-4,.px-sm-4{padding-left:1.5rem !important}.p-sm-5{padding:3rem !important}.pt-sm-5,.py-sm-5{padding-top:3rem !important}.pr-sm-5,.px-sm-5{padding-right:3rem !important}.pb-sm-5,.py-sm-5{padding-bottom:3rem !important}.pl-sm-5,.px-sm-5{padding-left:3rem !important}.m-sm-auto{margin:auto !important}.mt-sm-auto,.my-sm-auto{margin-top:auto !important}.mr-sm-auto,.mx-sm-auto{margin-right:auto !important}.mb-sm-auto,.my-sm-auto{margin-bottom:auto !important}.ml-sm-auto,.mx-sm-auto{margin-left:auto !important}}@media (min-width: 768px){.m-md-0{margin:0 !important}.mt-md-0,.my-md-0{margin-top:0 !important}.mr-md-0,.mx-md-0{margin-right:0 !important}.mb-md-0,.my-md-0{margin-bottom:0 !important}.ml-md-0,.mx-md-0{margin-left:0 !important}.m-md-1{margin:0.25rem !important}.mt-md-1,.my-md-1{margin-top:0.25rem !important}.mr-md-1,.mx-md-1{margin-right:0.25rem !important}.mb-md-1,.my-md-1{margin-bottom:0.25rem !important}.ml-md-1,.mx-md-1{margin-left:0.25rem !important}.m-md-2{margin:0.5rem !important}.mt-md-2,.my-md-2{margin-top:0.5rem !important}.mr-md-2,.mx-md-2{margin-right:0.5rem !important}.mb-md-2,.my-md-2{margin-bottom:0.5rem !important}.ml-md-2,.mx-md-2{margin-left:0.5rem !important}.m-md-3{margin:1rem !important}.mt-md-3,.my-md-3{margin-top:1rem !important}.mr-md-3,.mx-md-3{margin-right:1rem !important}.mb-md-3,.my-md-3{margin-bottom:1rem !important}.ml-md-3,.mx-md-3{margin-left:1rem !important}.m-md-4{margin:1.5rem !important}.mt-md-4,.my-md-4{margin-top:1.5rem !important}.mr-md-4,.mx-md-4{margin-right:1.5rem !important}.mb-md-4,.my-md-4{margin-bottom:1.5rem !important}.ml-md-4,.mx-md-4{margin-left:1.5rem !important}.m-md-5{margin:3rem !important}.mt-md-5,.my-md-5{margin-top:3rem !important}.mr-md-5,.mx-md-5{margin-right:3rem !important}.mb-md-5,.my-md-5{margin-bottom:3rem !important}.ml-md-5,.mx-md-5{margin-left:3rem !important}.p-md-0{padding:0 !important}.pt-md-0,.py-md-0{padding-top:0 !important}.pr-md-0,.px-md-0{padding-right:0 !important}.pb-md-0,.py-md-0{padding-bottom:0 !important}.pl-md-0,.px-md-0{padding-left:0 !important}.p-md-1{padding:0.25rem !important}.pt-md-1,.py-md-1{padding-top:0.25rem !important}.pr-md-1,.px-md-1{padding-right:0.25rem !important}.pb-md-1,.py-md-1{padding-bottom:0.25rem !important}.pl-md-1,.px-md-1{padding-left:0.25rem !important}.p-md-2{padding:0.5rem !important}.pt-md-2,.py-md-2{padding-top:0.5rem !important}.pr-md-2,.px-md-2{padding-right:0.5rem !important}.pb-md-2,.py-md-2{padding-bottom:0.5rem !important}.pl-md-2,.px-md-2{padding-left:0.5rem !important}.p-md-3{padding:1rem !important}.pt-md-3,.py-md-3{padding-top:1rem !important}.pr-md-3,.px-md-3{padding-right:1rem !important}.pb-md-3,.py-md-3{padding-bottom:1rem !important}.pl-md-3,.px-md-3{padding-left:1rem !important}.p-md-4{padding:1.5rem !important}.pt-md-4,.py-md-4{padding-top:1.5rem !important}.pr-md-4,.px-md-4{padding-right:1.5rem !important}.pb-md-4,.py-md-4{padding-bottom:1.5rem !important}.pl-md-4,.px-md-4{padding-left:1.5rem !important}.p-md-5{padding:3rem !important}.pt-md-5,.py-md-5{padding-top:3rem !important}.pr-md-5,.px-md-5{padding-right:3rem !important}.pb-md-5,.py-md-5{padding-bottom:3rem !important}.pl-md-5,.px-md-5{padding-left:3rem !important}.m-md-auto{margin:auto !important}.mt-md-auto,.my-md-auto{margin-top:auto !important}.mr-md-auto,.mx-md-auto{margin-right:auto !important}.mb-md-auto,.my-md-auto{margin-bottom:auto !important}.ml-md-auto,.mx-md-auto{margin-left:auto !important}}@media (min-width: 992px){.m-lg-0{margin:0 !important}.mt-lg-0,.my-lg-0{margin-top:0 !important}.mr-lg-0,.mx-lg-0{margin-right:0 !important}.mb-lg-0,.my-lg-0{margin-bottom:0 !important}.ml-lg-0,.mx-lg-0{margin-left:0 !important}.m-lg-1{margin:0.25rem !important}.mt-lg-1,.my-lg-1{margin-top:0.25rem !important}.mr-lg-1,.mx-lg-1{margin-right:0.25rem !important}.mb-lg-1,.my-lg-1{margin-bottom:0.25rem !important}.ml-lg-1,.mx-lg-1{margin-left:0.25rem !important}.m-lg-2{margin:0.5rem !important}.mt-lg-2,.my-lg-2{margin-top:0.5rem !important}.mr-lg-2,.mx-lg-2{margin-right:0.5rem !important}.mb-lg-2,.my-lg-2{margin-bottom:0.5rem !important}.ml-lg-2,.mx-lg-2{margin-left:0.5rem !important}.m-lg-3{margin:1rem !important}.mt-lg-3,.my-lg-3{margin-top:1rem !important}.mr-lg-3,.mx-lg-3{margin-right:1rem !important}.mb-lg-3,.my-lg-3{margin-bottom:1rem !important}.ml-lg-3,.mx-lg-3{margin-left:1rem !important}.m-lg-4{margin:1.5rem !important}.mt-lg-4,.my-lg-4{margin-top:1.5rem !important}.mr-lg-4,.mx-lg-4{margin-right:1.5rem !important}.mb-lg-4,.my-lg-4{margin-bottom:1.5rem !important}.ml-lg-4,.mx-lg-4{margin-left:1.5rem !important}.m-lg-5{margin:3rem !important}.mt-lg-5,.my-lg-5{margin-top:3rem !important}.mr-lg-5,.mx-lg-5{margin-right:3rem !important}.mb-lg-5,.my-lg-5{margin-bottom:3rem !important}.ml-lg-5,.mx-lg-5{margin-left:3rem !important}.p-lg-0{padding:0 !important}.pt-lg-0,.py-lg-0{padding-top:0 !important}.pr-lg-0,.px-lg-0{padding-right:0 !important}.pb-lg-0,.py-lg-0{padding-bottom:0 !important}.pl-lg-0,.px-lg-0{padding-left:0 !important}.p-lg-1{padding:0.25rem !important}.pt-lg-1,.py-lg-1{padding-top:0.25rem !important}.pr-lg-1,.px-lg-1{padding-right:0.25rem !important}.pb-lg-1,.py-lg-1{padding-bottom:0.25rem !important}.pl-lg-1,.px-lg-1{padding-left:0.25rem !important}.p-lg-2{padding:0.5rem !important}.pt-lg-2,.py-lg-2{padding-top:0.5rem !important}.pr-lg-2,.px-lg-2{padding-right:0.5rem !important}.pb-lg-2,.py-lg-2{padding-bottom:0.5rem !important}.pl-lg-2,.px-lg-2{padding-left:0.5rem !important}.p-lg-3{padding:1rem !important}.pt-lg-3,.py-lg-3{padding-top:1rem !important}.pr-lg-3,.px-lg-3{padding-right:1rem !important}.pb-lg-3,.py-lg-3{padding-bottom:1rem !important}.pl-lg-3,.px-lg-3{padding-left:1rem !important}.p-lg-4{padding:1.5rem !important}.pt-lg-4,.py-lg-4{padding-top:1.5rem !important}.pr-lg-4,.px-lg-4{padding-right:1.5rem !important}.pb-lg-4,.py-lg-4{padding-bottom:1.5rem !important}.pl-lg-4,.px-lg-4{padding-left:1.5rem !important}.p-lg-5{padding:3rem !important}.pt-lg-5,.py-lg-5{padding-top:3rem !important}.pr-lg-5,.px-lg-5{padding-right:3rem !important}.pb-lg-5,.py-lg-5{padding-bottom:3rem !important}.pl-lg-5,.px-lg-5{padding-left:3rem !important}.m-lg-auto{margin:auto !important}.mt-lg-auto,.my-lg-auto{margin-top:auto !important}.mr-lg-auto,.mx-lg-auto{margin-right:auto !important}.mb-lg-auto,.my-lg-auto{margin-bottom:auto !important}.ml-lg-auto,.mx-lg-auto{margin-left:auto !important}}@media (min-width: 1200px){.m-xl-0{margin:0 !important}.mt-xl-0,.my-xl-0{margin-top:0 !important}.mr-xl-0,.mx-xl-0{margin-right:0 !important}.mb-xl-0,.my-xl-0{margin-bottom:0 !important}.ml-xl-0,.mx-xl-0{margin-left:0 !important}.m-xl-1{margin:0.25rem !important}.mt-xl-1,.my-xl-1{margin-top:0.25rem !important}.mr-xl-1,.mx-xl-1{margin-right:0.25rem !important}.mb-xl-1,.my-xl-1{margin-bottom:0.25rem !important}.ml-xl-1,.mx-xl-1{margin-left:0.25rem !important}.m-xl-2{margin:0.5rem !important}.mt-xl-2,.my-xl-2{margin-top:0.5rem !important}.mr-xl-2,.mx-xl-2{margin-right:0.5rem !important}.mb-xl-2,.my-xl-2{margin-bottom:0.5rem !important}.ml-xl-2,.mx-xl-2{margin-left:0.5rem !important}.m-xl-3{margin:1rem !important}.mt-xl-3,.my-xl-3{margin-top:1rem !important}.mr-xl-3,.mx-xl-3{margin-right:1rem !important}.mb-xl-3,.my-xl-3{margin-bottom:1rem !important}.ml-xl-3,.mx-xl-3{margin-left:1rem !important}.m-xl-4{margin:1.5rem !important}.mt-xl-4,.my-xl-4{margin-top:1.5rem !important}.mr-xl-4,.mx-xl-4{margin-right:1.5rem !important}.mb-xl-4,.my-xl-4{margin-bottom:1.5rem !important}.ml-xl-4,.mx-xl-4{margin-left:1.5rem !important}.m-xl-5{margin:3rem !important}.mt-xl-5,.my-xl-5{margin-top:3rem !important}.mr-xl-5,.mx-xl-5{margin-right:3rem !important}.mb-xl-5,.my-xl-5{margin-bottom:3rem !important}.ml-xl-5,.mx-xl-5{margin-left:3rem !important}.p-xl-0{padding:0 !important}.pt-xl-0,.py-xl-0{padding-top:0 !important}.pr-xl-0,.px-xl-0{padding-right:0 !important}.pb-xl-0,.py-xl-0{padding-bottom:0 !important}.pl-xl-0,.px-xl-0{padding-left:0 !important}.p-xl-1{padding:0.25rem !important}.pt-xl-1,.py-xl-1{padding-top:0.25rem !important}.pr-xl-1,.px-xl-1{padding-right:0.25rem !important}.pb-xl-1,.py-xl-1{padding-bottom:0.25rem !important}.pl-xl-1,.px-xl-1{padding-left:0.25rem !important}.p-xl-2{padding:0.5rem !important}.pt-xl-2,.py-xl-2{padding-top:0.5rem !important}.pr-xl-2,.px-xl-2{padding-right:0.5rem !important}.pb-xl-2,.py-xl-2{padding-bottom:0.5rem !important}.pl-xl-2,.px-xl-2{padding-left:0.5rem !important}.p-xl-3{padding:1rem !important}.pt-xl-3,.py-xl-3{padding-top:1rem !important}.pr-xl-3,.px-xl-3{padding-right:1rem !important}.pb-xl-3,.py-xl-3{padding-bottom:1rem !important}.pl-xl-3,.px-xl-3{padding-left:1rem !important}.p-xl-4{padding:1.5rem !important}.pt-xl-4,.py-xl-4{padding-top:1.5rem !important}.pr-xl-4,.px-xl-4{padding-right:1.5rem !important}.pb-xl-4,.py-xl-4{padding-bottom:1.5rem !important}.pl-xl-4,.px-xl-4{padding-left:1.5rem !important}.p-xl-5{padding:3rem !important}.pt-xl-5,.py-xl-5{padding-top:3rem !important}.pr-xl-5,.px-xl-5{padding-right:3rem !important}.pb-xl-5,.py-xl-5{padding-bottom:3rem !important}.pl-xl-5,.px-xl-5{padding-left:3rem !important}.m-xl-auto{margin:auto !important}.mt-xl-auto,.my-xl-auto{margin-top:auto !important}.mr-xl-auto,.mx-xl-auto{margin-right:auto !important}.mb-xl-auto,.my-xl-auto{margin-bottom:auto !important}.ml-xl-auto,.mx-xl-auto{margin-left:auto !important}}.text-monospace{font-family:SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace}.text-justify{text-align:justify !important}.text-nowrap{white-space:nowrap !important}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.text-left{text-align:left !important}.text-right{text-align:right !important}.text-center{text-align:center !important}@media (min-width: 576px){.text-sm-left{text-align:left !important}.text-sm-right{text-align:right !important}.text-sm-center{text-align:center !important}}@media (min-width: 768px){.text-md-left{text-align:left !important}.text-md-right{text-align:right !important}.text-md-center{text-align:center !important}}@media (min-width: 992px){.text-lg-left{text-align:left !important}.text-lg-right{text-align:right !important}.text-lg-center{text-align:center !important}}@media (min-width: 1200px){.text-xl-left{text-align:left !important}.text-xl-right{text-align:right !important}.text-xl-center{text-align:center !important}}.text-lowercase{text-transform:lowercase !important}.text-uppercase{text-transform:uppercase !important}.text-capitalize{text-transform:capitalize !important}.font-weight-light{font-weight:300 !important}.font-weight-normal{font-weight:400 !important}.font-weight-bold{font-weight:700 !important}.font-italic{font-style:italic !important}.text-white{color:#fff !important}.text-primary{color:#375a7f !important}a.text-primary:hover,a.text-primary:focus{color:#28415b !important}.text-secondary{color:#444 !important}a.text-secondary:hover,a.text-secondary:focus{color:#2b2a2a !important}.text-success{color:#00bc8c !important}a.text-success:hover,a.text-success:focus{color:#008966 !important}.text-info{color:#3498DB !important}a.text-info:hover,a.text-info:focus{color:#217dbb !important}.text-warning{color:#F39C12 !important}a.text-warning:hover,a.text-warning:focus{color:#c87f0a !important}.text-danger{color:#E74C3C !important}a.text-danger:hover,a.text-danger:focus{color:#d62c1a !important}.text-light{color:#303030 !important}a.text-light:hover,a.text-light:focus{color:#171616 !important}.text-dark{color:#adb5bd !important}a.text-dark:hover,a.text-dark:focus{color:#919ca6 !important}.text-body{color:#fff !important}.text-muted{color:#999 !important}.text-black-50{color:rgba(0,0,0,0.5) !important}.text-white-50{color:rgba(255,255,255,0.5) !important}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.visible{visibility:visible !important}.invisible{visibility:hidden !important}@media print{*,*::before,*::after{text-shadow:none !important;-webkit-box-shadow:none !important;box-shadow:none !important}a:not(.btn){text-decoration:underline}abbr[title]::after{content:\" (\" attr(title) \")\"}pre{white-space:pre-wrap !important}pre,blockquote{border:1px solid #adb5bd;page-break-inside:avoid}thead{display:table-header-group}tr,img{page-break-inside:avoid}p,h2,h3{orphans:3;widows:3}h2,h3{page-break-after:avoid}@page{size:a3}body{min-width:992px !important}.container{min-width:992px !important}.navbar{display:none}.badge{border:1px solid #000}.table{border-collapse:collapse !important}.table td,.table th{background-color:#fff !important}.table-bordered th,.table-bordered td{border:1px solid #dee2e6 !important}.table-dark{color:inherit}.table-dark th,.table-dark td,.table-dark thead th,.table-dark tbody+tbody{border-color:#444}.table .thead-dark th{color:inherit;border-color:#444}}.bg-primary .navbar-nav .active\u003e.nav-link{color:#00bc8c !important}.bg-dark{background-color:#00bc8c !important}.bg-dark.navbar-dark .navbar-nav .nav-link:focus,.bg-dark.navbar-dark .navbar-nav .nav-link:hover,.bg-dark.navbar-dark .navbar-nav .active\u003e.nav-link{color:#375a7f !important}.blockquote-footer{color:#999}.table-primary,.table-primary\u003eth,.table-primary\u003etd{background-color:#375a7f}.table-secondary,.table-secondary\u003eth,.table-secondary\u003etd{background-color:#444}.table-light,.table-light\u003eth,.table-light\u003etd{background-color:#303030}.table-dark,.table-dark\u003eth,.table-dark\u003etd{background-color:#adb5bd}.table-success,.table-success\u003eth,.table-success\u003etd{background-color:#00bc8c}.table-info,.table-info\u003eth,.table-info\u003etd{background-color:#3498DB}.table-danger,.table-danger\u003eth,.table-danger\u003etd{background-color:#E74C3C}.table-warning,.table-warning\u003eth,.table-warning\u003etd{background-color:#F39C12}.table-active,.table-active\u003eth,.table-active\u003etd{background-color:rgba(0,0,0,0.075)}.table-hover .table-primary:hover,.table-hover .table-primary:hover\u003eth,.table-hover .table-primary:hover\u003etd{background-color:#2f4d6d}.table-hover .table-secondary:hover,.table-hover .table-secondary:hover\u003eth,.table-hover .table-secondary:hover\u003etd{background-color:#373737}.table-hover .table-light:hover,.table-hover .table-light:hover\u003eth,.table-hover .table-light:hover\u003etd{background-color:#232323}.table-hover .table-dark:hover,.table-hover .table-dark:hover\u003eth,.table-hover .table-dark:hover\u003etd{background-color:#9fa8b2}.table-hover .table-success:hover,.table-hover .table-success:hover\u003eth,.table-hover .table-success:hover\u003etd{background-color:#00a379}.table-hover .table-info:hover,.table-hover .table-info:hover\u003eth,.table-hover .table-info:hover\u003etd{background-color:#258cd1}.table-hover .table-danger:hover,.table-hover .table-danger:hover\u003eth,.table-hover .table-danger:hover\u003etd{background-color:#e43725}.table-hover .table-warning:hover,.table-hover .table-warning:hover\u003eth,.table-hover .table-warning:hover\u003etd{background-color:#e08e0b}.table-hover .table-active:hover,.table-hover .table-active:hover\u003eth,.table-hover .table-active:hover\u003etd{background-color:rgba(0,0,0,0.075)}.input-group-addon{color:#fff}.nav-tabs .nav-link,.nav-tabs .nav-link.active,.nav-tabs .nav-link.active:focus,.nav-tabs .nav-link.active:hover,.nav-tabs .nav-item.open .nav-link,.nav-tabs .nav-item.open .nav-link:focus,.nav-tabs .nav-item.open .nav-link:hover,.nav-pills .nav-link,.nav-pills .nav-link.active,.nav-pills .nav-link.active:focus,.nav-pills .nav-link.active:hover,.nav-pills .nav-item.open .nav-link,.nav-pills .nav-item.open .nav-link:focus,.nav-pills .nav-item.open .nav-link:hover{color:#fff}.breadcrumb a{color:#fff}.pagination a:hover{text-decoration:none}.close{opacity:0.4}.close:hover,.close:focus{opacity:1}.alert{border:none;color:#fff}.alert a,.alert .alert-link{color:#fff;text-decoration:underline}.alert-primary{background-color:#375a7f}.alert-secondary{background-color:#444}.alert-success{background-color:#00bc8c}.alert-info{background-color:#3498DB}.alert-warning{background-color:#F39C12}.alert-danger{background-color:#E74C3C}.alert-light{background-color:#303030}.alert-dark{background-color:#adb5bd}.list-group-item-action{color:#fff}.list-group-item-action:hover,.list-group-item-action:focus{background-color:#444;color:#fff}.list-group-item-action .list-group-item-heading{color:#fff}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 12
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                   minHeight\u003d\"200\" prefHeight\u003d\"200\" maxHeight\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 15,
      "-": 57
    }
  },
  {
    "path": "src/main/resources/view/NoteEntryPromptWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003cBorderPane styleClass\u003d\"background\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \u003cLabel alignment\u003d\"BOTTOM_LEFT\" maxHeight\u003d\"158.0\" prefHeight\u003d\"13.0\" prefWidth\u003d\"102.0\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Enter note:\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                  \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \u003cLabel fx:id\u003d\"feedbackLabel\" alignment\u003d\"BOTTOM_RIGHT\" prefHeight\u003d\"28.0\" prefWidth\u003d\"250.0\" textFill\u003d\"RED\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "      \u003cAnchorPane BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \u003cTextArea fx:id\u003d\"noteContent\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"20.0\" onKeyPressed\u003d\"#handleKeyPress\" prefHeight\u003d\"304.0\" prefWidth\u003d\"326.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                  \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "      \u003cAnchorPane prefHeight\u003d\"0.0\" prefWidth\u003d\"350.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \u003cLabel styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Save: CTRL+S\" AnchorPane.leftAnchor\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER_RIGHT\" layoutX\u003d\"10.0\" prefHeight\u003d\"22.0\" prefWidth\u003d\"298.0\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Cancel: CTRL+Q\" AnchorPane.rightAnchor\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 50
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "      \u003cLabel fx:id\u003d\"matricNo\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matricNo\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "      \u003cLabel fx:id\u003d\"courseCode\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$courseCode\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 3,
      "-": 36
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 14,
      "-": 50
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 18,
      "-": 57
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "\t\u003ccourseCode\u003eCEG\u003c/courseCode\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    \u003cmatricNo\u003eA0168412C\u003c/matricNo\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 3,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Trajectory\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final String VALID_CC \u003d \"CEG\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final String VALID_MATRIC_NO \u003d \"A0168412C\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CC, VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CC, VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CC, VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 7,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        //TBC"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        /*String listCommand \u003d StudentListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandSuccess(listCommand, StudentListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertHistoryCorrect(listCommand);*/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "           //assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "           // assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 7,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClassAddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.commands.ClassAddCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Enrollment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassAddCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final String className \u003d \"T16\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final String moduleCode \u003d \"CG1111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final String maxEnrollment \u003d \"20\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertCommandSuccess(new ClassAddCommand(new Classroom(new ClassName(className),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                        new ModuleCode(moduleCode), new Enrollment(maxEnrollment))), model, new CommandHistory(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                String.format(MESSAGE_SUCCESS, className, moduleCode, maxEnrollment),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        new ClassAddCommand(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final ClassAddCommand standardCommand \u003d new ClassAddCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                (new Classroom(new ClassName(VALID_CLASS_T16),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                        new ModuleCode(VALID_MODULE_CODE),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                        new Enrollment(VALID_MAX_ENROLLMENT)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassAddCommand commandWithSameValues \u003d new ClassAddCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                new Classroom(new ClassName(VALID_CLASS_T16),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                        new ModuleCode(VALID_MODULE_CODE),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                        new Enrollment(VALID_MAX_ENROLLMENT)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClassDeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassDeleteCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final String className \u003d \"T16\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final String moduleCode \u003d \"CG1111\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final ClassDeleteCommand standardCommand \u003d new ClassDeleteCommand(className, moduleCode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String VALID_TAG_CC \u003d \"CEG\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String VALID_TAG_MATRIC_NO \u003d \"A0168412C\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String VALID_CLASS_T16 \u003d \"T16\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String VALID_MODULE_CODE \u003d \"CG1111\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String VALID_MAX_ENROLLMENT \u003d \"20\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final StudentEditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final StudentEditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static void assertCommandSuccess(Command command, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            CommandResult result \u003d command.execute(null, actualCommandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 22,
      "zhicaizack": 3,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CourseAddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.FacultyName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.testutil.CourseBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.commands.CourseAddCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class CourseAddCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void constructor_nullCourse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        new CourseAddCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void execute_addSuccessful() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       final CourseCode courseCode \u003d new CourseCode(\"CEG\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       final CourseName courseName \u003d new CourseName(\"Computer Engineering\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       final FacultyName faculty \u003d new FacultyName(\"School of Computing\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       assertCommandSuccess(new CourseAddCommand(new Course(courseCode,courseName,faculty)), new CommandHistory(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                String.format(MESSAGE_SUCCESS, courseName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void execute_duplicateCourse_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        Course validCourse \u003d new CourseBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        CourseAddCommand addCommand \u003d new CourseAddCommand(validCourse);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        CourseManagerStub cmStub \u003d new CourseManagerStubWithCourse(validCourse);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        thrown.expectMessage(CourseAddCommand.MESSAGE_DUPLICATE_COURSE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        addCommand.execute(null, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        addCommand.execute(null, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        Course ceg \u003d new CourseBuilder().withCourseName(\"CEG\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        Course cs \u003d new CourseBuilder().withCourseName(\"CS\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        CourseAddCommand addCEGCommand \u003d new CourseAddCommand(ceg);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        CourseAddCommand addCSCommand \u003d new CourseAddCommand(cs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertTrue(addCEGCommand.equals(addCEGCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        CourseAddCommand addCEGCommandCopy \u003d new CourseAddCommand(ceg);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertTrue(addCEGCommand.equals(addCEGCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertFalse(addCEGCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertFalse(addCEGCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertFalse(addCEGCommand.equals(addCSCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private class CourseManagerStub {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        private ArrayList\u003cCourse\u003e courseList \u003d new ArrayList\u003cCourse\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private class CourseManagerStubWithCourse extends CourseManagerStub {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        private final Course course;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        CourseManagerStubWithCourse(Course course) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            requireNonNull(course);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            this.course \u003d course;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        public boolean hasCourse(Course course){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            requireNonNull(course);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            return this.course.equals(course);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CourseDeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.commands.CourseAddCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class CourseDeleteCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void constructor_nullCourse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        new CourseDeleteCommand(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for StudentEditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand editCommand \u003d new StudentEditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String expectedMessage \u003d String.format(StudentEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand editCommand \u003d new StudentEditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String expectedMessage \u003d String.format(StudentEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand editCommand \u003d new StudentEditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String expectedMessage \u003d String.format(StudentEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand editCommand \u003d new StudentEditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String expectedMessage \u003d String.format(StudentEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand editCommand \u003d new StudentEditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, StudentEditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand editCommand \u003d new StudentEditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, StudentEditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand editCommand \u003d new StudentEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand editCommand \u003d new StudentEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand editCommand \u003d new StudentEditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand editCommand \u003d new StudentEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand editCommand \u003d new StudentEditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        final StudentEditCommand standardCommand \u003d new StudentEditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand commandWithSameValues \u003d new StudentEditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertFalse(standardCommand.equals(new StudentEditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertFalse(standardCommand.equals(new StudentEditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 25,
      "-": 225
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code StudentFindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentFindCommand findFirstCommand \u003d new StudentFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentFindCommand findSecondCommand \u003d new StudentFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentFindCommand findFirstCommandCopy \u003d new StudentFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentFindCommand command \u003d new StudentFindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentFindCommand command \u003d new StudentFindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 6,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GradebookAddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookAddCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void execute_addGradebookComponentSuccessful() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        final String moduleCode \u003d \"PC1222\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        final String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        final int gradebookMaxMarks \u003d 20;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        final int gradebookWeightage \u003d 10;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertCommandSuccess(new GradebookAddCommand(new Gradebook("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                moduleCode,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookComponentName,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookMaxMarks,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookWeightage)),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                new CommandHistory(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                String.format(GradebookAddCommand.MESSAGE_ADD_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                        moduleCode,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                        gradebookComponentName,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                        gradebookMaxMarks,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                        gradebookWeightage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GradebookDeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.GradebookManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.testutil.GradebookBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.commands.GradebookDeleteCommand.MESSAGE_DELETE_SUCCESS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookDeleteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static GradebookManager gradebookManager \u003d new GradebookManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static GradebookBuilder dummyGradebookComponent \u003d new GradebookBuilder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.clearGradebook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void execute_gradebookDelete_success() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int gradebookMaxMarks \u003d 20;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int gradebookWeightage \u003d 10;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                MESSAGE_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                moduleCode,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookComponentName,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookMaxMarks,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookWeightage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.addGradebookComponent(dummyGradebookComponent.build());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookDeleteCommand gradebookDeleteCommand \u003d new GradebookDeleteCommand(moduleCode, gradebookComponentName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        CommandResult result \u003d gradebookDeleteCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static void tearDown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.clearGradebook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GradebookEditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.parser.GradebookEditCommandParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.GradebookManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.testutil.GradebookBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.commands.GradebookEditCommand.MESSAGE_EDIT_GRADEBOOK_SUCCESS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.commands.GradebookEditCommand.MESSAGE_FIND_FAIL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_ITEM;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADEBOOK_ITEM_EDIT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookEditCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static GradebookBuilder dummyGradebookComponent \u003d new GradebookBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static GradebookManager gradebookManager \u003d new GradebookManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.clearGradebook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void execute_gradebookEditValid_success() throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String newGradebookComponentName \u003d \"Test\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d MESSAGE_EDIT_GRADEBOOK_SUCCESS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int gradebookMaxMarks \u003d 10;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int gradebookWeightage \u003d 20;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.addGradebookComponent(dummyGradebookComponent.build());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        Gradebook gradebook \u003d new Gradebook("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                moduleCode,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookComponentName,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                newGradebookComponentName,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookMaxMarks,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookWeightage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookEditCommand gradebookEditCommand \u003d new GradebookEditCommand(gradebook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        CommandResult result \u003d gradebookEditCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void execute_gradebookEditInvalid_success() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Mid-Term\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String newGradebookComponentName \u003d \"Test\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d MESSAGE_FIND_FAIL;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int gradebookMaxMarks \u003d 10;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int gradebookWeightage \u003d 20;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.addGradebookComponent(dummyGradebookComponent.build());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        Gradebook gradebook \u003d new Gradebook("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                moduleCode,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookComponentName,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                newGradebookComponentName,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookMaxMarks,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookWeightage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookEditCommand gradebookEditCommand \u003d new GradebookEditCommand(gradebook);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        CommandResult result \u003d gradebookEditCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GradebookFindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.GradebookManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.testutil.GradebookBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.commands.GradebookFindCommand.MESSAGE_FIND_FAIL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.commands.GradebookFindCommand.MESSAGE_FIND_SUCCESS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookFindCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static GradebookManager gradebookManager \u003d new GradebookManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private static GradebookBuilder dummyGradebookComponent \u003d new GradebookBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.clearGradebook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void execute_gradebookFind_success() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d MESSAGE_FIND_SUCCESS + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.addGradebookComponent(dummyGradebookComponent.build());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        Gradebook gradebook \u003d new Gradebook(moduleCode, gradebookComponentName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookFindCommand gradebookFindCommand \u003d new GradebookFindCommand(gradebook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        CommandResult result \u003d gradebookFindCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void execute_gradebookFind_fail() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Test\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int gradebookMaxMarks \u003d 50;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int gradebookWeightage \u003d 10;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                MESSAGE_FIND_FAIL,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                moduleCode,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookComponentName,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookMaxMarks,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookWeightage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.addGradebookComponent(dummyGradebookComponent.build());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        Gradebook gradebook \u003d new Gradebook(moduleCode, gradebookComponentName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookFindCommand gradebookFindCommand \u003d new GradebookFindCommand(gradebook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        CommandResult result \u003d gradebookFindCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static void tearDown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.clearGradebook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookManager.saveGradebookList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NoteAddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Contains tests for NoteAddCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteAddCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void constructor_nullNote_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        new NoteAddCommand(null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NoteDeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.NoteManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Contains tests for NoteDeleteCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteDeleteCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static NoteManager noteManager \u003d NoteManager.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static NoteBuilder dummyNote \u003d new NoteBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void execute_indexOutOfBounds_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(dummyNote.build());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(dummyNote.build());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        int index \u003d 5; // arraylist size: 2, accessed index \u003d 4 (zero-based) -\u003e out of bounds"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteDeleteCommand noteDeleteCommand \u003d new NoteDeleteCommand(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expectMessage(String.format(NoteDeleteCommand.MESSAGE_INVALID_INDEX, index));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteDeleteCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void execute_validIndex_success() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(dummyNote.build());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(dummyNote.build());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(dummyNote.build());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        int index \u003d 3; // arraylist size: 3, accessed index \u003d 2 (zero-based) -\u003e OK"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteDeleteCommand noteDeleteCommand \u003d new NoteDeleteCommand(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        CommandResult result \u003d noteDeleteCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String expectedMessage \u003d NoteDeleteCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        int expectedSize \u003d 2;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertEquals(expectedSize, noteManager.getNotes().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static void tearDown() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NoteEditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.NoteManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Contains tests for NoteEditCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteEditCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static NoteManager noteManager \u003d NoteManager.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteBuilder note1 \u003d new NoteBuilder("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"CS1010\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"First note\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"C\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteBuilder note2 \u003d new NoteBuilder("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"CS2040C\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Second note\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"C++\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteBuilder note3 \u003d new NoteBuilder("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"CS2113\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Third note\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Java\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void execute_indexOutOfBounds_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note1.build());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note2.build());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note3.build());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        int index \u003d 5; // arraylist size: 3, accessed index \u003d 4 (zero-based) -\u003e out of bounds"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String newModuleCode \u003d \"CS5000\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String newTitle \u003d \"My new title\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String newStartDate \u003d \"1/1/2019\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String newStartTime \u003d \"11:00 AM\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String newEndDate \u003d \"1/1/2019\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String newEndTime \u003d \"1:00 PM\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String newLocation \u003d \"National University of Singapore\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteEditCommand noteEditCommand \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                new NoteEditCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        index,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        newModuleCode,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        newTitle,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        newStartDate,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        newStartTime,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        newEndDate,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        newEndTime,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                        newLocation"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expectMessage(String.format(NoteEditCommand.MESSAGE_INVALID_INDEX, index));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteEditCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static void tearDown() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NoteListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.NoteManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Contains tests for NoteListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static NoteManager noteManager \u003d NoteManager.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteBuilder note1 \u003d new NoteBuilder("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"CS1010\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"First note\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"C\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteBuilder note2 \u003d new NoteBuilder("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"CS2040C\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Second note\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"C++\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteBuilder note3 \u003d new NoteBuilder("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"CS2113\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Third note\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Java\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void execute_emptyList_displaysMessageNotFound() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteListCommand noteListCommand \u003d new NoteListCommand(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        CommandResult result \u003d noteListCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertEquals(NoteListCommand.MESSAGE_NOT_FOUND, result.feedbackToUser);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void execute_nonEmptyList_displaysList() throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note1.build());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note2.build());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteListCommand noteListCommand \u003d new NoteListCommand(\"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        CommandResult result \u003d noteListCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertFalse(result.feedbackToUser.equals(NoteListCommand.MESSAGE_NOT_FOUND));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void execute_nonEmptyListWithFilter_displaysListOrMessageNotFound() throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note1.build());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note2.build());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note3.build());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteListCommand noteListCommand \u003d new NoteListCommand(\"CS2113\"); // exists"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        CommandResult result \u003d noteListCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertFalse(result.feedbackToUser.equals(NoteListCommand.MESSAGE_NOT_FOUND));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteListCommand \u003d new NoteListCommand(\"CS5000\"); // does not exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        result \u003d noteListCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertTrue(result.feedbackToUser.equals(NoteListCommand.MESSAGE_NOT_FOUND));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static void tearDown() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StudentAddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code StudentAddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class StudentAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandSuccess(new StudentAddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                String.format(StudentAddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(new StudentAddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                StudentAddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 6,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StudentAddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class StudentAddCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        new StudentAddCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        CommandResult commandResult \u003d new StudentAddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertEquals(String.format(StudentAddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentAddCommand addCommand \u003d new StudentAddCommand(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        thrown.expectMessage(StudentAddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentAddCommand addAliceCommand \u003d new StudentAddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentAddCommand addBobCommand \u003d new StudentAddCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentAddCommand addAliceCommandCopy \u003d new StudentAddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            // called by {@code StudentAddCommand#execute()}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 10,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassAddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentEditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentFindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Enrollment;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       /* Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentAddCommand command \u003d (StudentAddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));*/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        //assertEquals(new StudentAddCommand(person), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        // TBC"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand command \u003d (StudentEditCommand) parser.parseCommand(StudentEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertEquals(new StudentEditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentFindCommand command \u003d (StudentFindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                StudentFindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertEquals(new StudentFindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertTrue(parser.parseCommand(StudentListCommand.COMMAND_WORD) instanceof StudentListCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertTrue(parser.parseCommand(StudentListCommand.COMMAND_WORD + \" 3\") instanceof StudentListCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void parseCommand_classAdd() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final String className \u003d \"T16\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final String moduleCode \u003d \"CG1111\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        final String maxEnrollment \u003d \"20\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassAddCommand command \u003d (ClassAddCommand) parser.parseCommand(ClassAddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                + \" \" + PREFIX_CLASS_NAME + className"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                + \" \" + PREFIX_MODULE_CODE + moduleCode"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                + \" \" + PREFIX_MAXENROLLMENT + maxEnrollment);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertEquals(new ClassAddCommand(new Classroom(new ClassName(className),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                new ModuleCode(moduleCode),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "                new Enrollment(maxEnrollment))), command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 15,
      "zhicaizack": 21,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClassAddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassAddCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private ClassAddCommandParser parser \u003d new ClassAddCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClassAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertParseFailure(parser, ClassAddCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClassDeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.logic.commands.ClassDeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassDeleteCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private ClassDeleteCommandParser parser \u003d new ClassDeleteCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClassDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertParseFailure(parser, ClassDeleteCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentEditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertParseFailure(parser, \"1\", StudentEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand expectedCommand \u003d new StudentEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand expectedCommand \u003d new StudentEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand expectedCommand \u003d new StudentEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        expectedCommand \u003d new StudentEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        expectedCommand \u003d new StudentEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        expectedCommand \u003d new StudentEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        expectedCommand \u003d new StudentEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand expectedCommand \u003d new StudentEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand expectedCommand \u003d new StudentEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        expectedCommand \u003d new StudentEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentEditCommand expectedCommand \u003d new StudentEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 15,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentFindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        StudentFindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                new StudentFindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 4,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GradebookAddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.GradebookAddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.GradebookAddCommandParser.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookAddCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private GradebookAddCommandParser parser \u003d new GradebookAddCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_invalidFormat_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GradebookAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //invalid arguments found"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String arg \u003d \"this is an invalid format\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(arg);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_validArgsWithOptionalParams_success() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //valid arguments without optional arguments"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String args \u003d \" mc/CS2113 i/Finals\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookAddCommand gradebookAddCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertNotNull(gradebookAddCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //valid arguments including optional argument, Max Marks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        args \u003d \" mc/CS2113 i/Finals mm/20\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookAddCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertNotNull(gradebookAddCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //valid arguments including optional argument, Weightage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        args \u003d \" mc/CS2113 i/Finals w/20\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookAddCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertNotNull(gradebookAddCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //valid arguments including optional arguments, Max Marks and Weightage"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        args \u003d \" mc/CS2113 i/Finals mm/20 w/20\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookAddCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertNotNull(gradebookAddCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_invalidMaxMarksType_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MAX_MARKS_ERROR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //invalid maximum marks type"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String arg \u003d \" mc/CS2113 i/Finals mm/20ps\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(arg);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_invalidWeightageType_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WEIGHTAGE_ERROR);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //invalid maximum marks type"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String arg \u003d \" mc/CS2113 i/Finals w/50s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(arg);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_missingMandatoryParams_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EMPTY_INPUTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //missing module code arg"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String arg \u003d \" mc/ i/ \";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(arg);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_invalidMaxMarksRange_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MAX_MARKS_INVALID);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //invalid maximum marks range"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String arg \u003d \" mc/CS2113 i/Finals mm/150\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(arg);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GradebookDeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.GradebookDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.GradebookDeleteCommandParser.MESSAGE_EMPTY_INPUTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookDeleteCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private GradebookDeleteCommandParser parser \u003d new GradebookDeleteCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_invalidFormat_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GradebookDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //invalid arguments found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String arg \u003d \"this is an invalid format\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(arg);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_validArgs_success() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //valid arguments without optional arguments"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String args \u003d \" mc/CS2113 i/Finals\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookDeleteCommand gradebookDeleteCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertNotNull(gradebookDeleteCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_emptyModuleCodeArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EMPTY_INPUTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //module code empty"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String args \u003d \" mc/ i/Finals\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_emptyComponentNameArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EMPTY_INPUTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //component name empty"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String arg \u003d \" mc/CS2113 i/\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(arg);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GradebookEditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.GradebookEditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.commands.GradebookEditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.GradebookEditCommandParser.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookEditCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private GradebookEditCommandParser parser \u003d new GradebookEditCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_invalidFormat_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //invalid arguments found"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String arg \u003d \"this is an invalid format\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(arg);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_validArgsWithNewComponentName_success() throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //valid arguments with optional new gradebook component name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String newGradebookComponentName \u003d \"Test\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String args \u003d \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + moduleCode"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_ITEM"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + gradebookComponentName"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_ITEM_EDIT"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + newGradebookComponentName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookEditCommand gradebookEditCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertNotNull(gradebookEditCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_validArgsWithNewMaxMarks_success() throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //valid arguments with optional new max marks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int newMaxMarks \u003d 50;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String args \u003d \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + moduleCode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_ITEM"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + gradebookComponentName"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_MAXMARKS"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + newMaxMarks;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookEditCommand gradebookEditCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertNotNull(gradebookEditCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_validArgsWithNewWeightage_success() throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //valid arguments with optional new weightage"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int newWeightage \u003d 20;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String args \u003d \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + moduleCode"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_ITEM"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + gradebookComponentName"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_WEIGHTAGE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + newWeightage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookEditCommand gradebookEditCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertNotNull(gradebookEditCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_validArgsDifferentPositions_success() throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //valid arguments"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int newMaxMarks \u003d 90;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String args \u003d \" \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + moduleCode"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_MAXMARKS"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + newMaxMarks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_ITEM"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + gradebookComponentName;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookEditCommand gradebookEditCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertNotNull(gradebookEditCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_emptyModuleArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ERROR_EMPTY);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //component name empty"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String argWithoutModule \u003d \" \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + moduleCode"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_ITEM"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + gradebookComponentName;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(argWithoutModule);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_emptyComponentNameArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ERROR_EMPTY);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //component name empty"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String argWithoutComponentName \u003d \" \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + moduleCode"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_ITEM"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + gradebookComponentName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(argWithoutComponentName);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_invalidMaxMarksArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MAX_MARKS_INVALID);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int newMaxMarks \u003d 101;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String argWithInvalidMaxMarks \u003d \" \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + moduleCode"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_ITEM"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + gradebookComponentName"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_MAXMARKS"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + newMaxMarks;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(argWithInvalidMaxMarks);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_invalidWeightageArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WEIGHTAGE_INVALID);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        int newWeightage \u003d 111;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String argWithInvalidWeightage \u003d \" \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + moduleCode"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_ITEM"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + gradebookComponentName"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_WEIGHTAGE"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + newWeightage;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(argWithInvalidWeightage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_invalidMaxMarksTypeArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MAX_MARKS_ERROR);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String newMaxMarks \u003d \"11a\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String argWithInvalidMaxMarksType \u003d \" \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + moduleCode"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_ITEM"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + gradebookComponentName"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_MAXMARKS"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + newMaxMarks;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(argWithInvalidMaxMarksType);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_invalidWeightageTypeArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WEIGHTAGE_ERROR);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String moduleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String gradebookComponentName \u003d \"Finals\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String newWeightage \u003d \"11b\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String argWithInvalidWeightageType \u003d \" \""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + moduleCode"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_ITEM"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + gradebookComponentName"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + PREFIX_GRADEBOOK_WEIGHTAGE"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                + newWeightage;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(argWithInvalidWeightageType);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 224
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GradebookFindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.commands.GradebookFindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import static seedu.address.logic.parser.GradebookFindCommandParser.MESSAGE_EMPTY_INPUTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookFindCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private GradebookFindCommandParser parser \u003d new GradebookFindCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_invalidFormat_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GradebookFindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //invalid arguments found"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String arg \u003d \"this is an invalid format\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(arg);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_validArgs_success() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //valid arguments without optional arguments"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String args \u003d \" mc/CS2113 i/Finals\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        GradebookFindCommand gradebookFindCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        assertNotNull(gradebookFindCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_emptyModuleCodeArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EMPTY_INPUTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //module code empty"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String args \u003d \" mc/ i/Test\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void parse_emptyComponentNameArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String expectedMessage \u003d String.format(GradebookFindCommandParser.MESSAGE_EMPTY_INPUTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        //component name empty"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        String arg \u003d \" mc/CS2113 i/\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        parser.parse(arg);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NoteAddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE_START_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Contains tests for NoteAddCommandParser."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteAddCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteAddCommandParser parser \u003d new NoteAddCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                Messages.MESSAGE_INVALID_COMMAND_FORMAT, NoteAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        // invalid arguments"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String args \u003d \" this is an invalid input\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        parser.parse(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void parse_validArgs_success() throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        // valid arguments with multiple fields"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String args \u003d \" \" + PREFIX_MODULE_CODE + \"CS2113\" + PREFIX_NOTE_START_TIME + \"1/2/2020\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteAddCommand noteAddCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertNotNull(noteAddCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        // empty arguments"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        args \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteAddCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertNotNull(noteAddCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NoteDeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteDeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.NoteManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Contains tests for NoteDeleteCommandParser."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteDeleteCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static NoteManager noteManager \u003d NoteManager.getInstance();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteDeleteCommandParser parser \u003d new NoteDeleteCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                Messages.MESSAGE_INVALID_COMMAND_FORMAT, NoteDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        // invalid args"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String args \u003d \" 15 this is an 2invalid input\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        parser.parse(args);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void parse_argsIsNumeric_success() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(new NoteBuilder().build());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String expectedMessage \u003d NoteDeleteCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        // valid args"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String args \u003d \"  1  \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteDeleteCommand noteDeleteCommand \u003d parser.parse(args);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        CommandResult result \u003d noteDeleteCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertNotNull(result);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertEquals(expectedMessage, NoteDeleteCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static void tearDown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NoteEditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.NoteManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Contains tests for NoteEditCommandParser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteEditCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static NoteManager noteManager \u003d NoteManager.getInstance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteEditCommandParser parser \u003d new NoteEditCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                Messages.MESSAGE_INVALID_COMMAND_FORMAT, NoteEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        // invalid args"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String args \u003d \" this is an invalid input\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        parser.parse(args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void parse_validArgs_success() throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(new NoteBuilder().build());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        // valid args"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String args1 \u003d \" 1  \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String args2 \u003d \"1 \" + PREFIX_MODULE_CODE + \"CS1010J\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteEditCommand noteEditCommand \u003d parser.parse(args1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertNotNull(noteEditCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteEditCommand \u003d parser.parse(args2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertNotNull(noteEditCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static void tearDown() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NoteListCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.NoteListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.NoteManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Contains tests for NoteListCommandParser."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteListCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static NoteManager noteManager \u003d NoteManager.getInstance();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteListCommandParser parser \u003d new NoteListCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteBuilder note1 \u003d new NoteBuilder("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"CS1010\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"First note\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"C\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteBuilder note2 \u003d new NoteBuilder("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"CS2040C\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Second note\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"C++\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteBuilder note3 \u003d new NoteBuilder("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"CS2113\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Third note\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Java\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                Messages.MESSAGE_INVALID_COMMAND_FORMAT, NoteListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        // invalid args, missing prefix"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String args \u003d \" CS2113\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        thrown.expectMessage(expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        parser.parse(args);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void parse_validArgs_success() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String unwantedMessage \u003d NoteListCommand.MESSAGE_NOT_FOUND;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note1.build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note2.build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note3.build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        // valid empty args"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String args1 \u003d \"\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        NoteListCommand noteListCommand \u003d parser.parse(args1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        CommandResult result \u003d noteListCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertNotEquals(unwantedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        // valid args with MODULE_CODE"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        String args2 \u003d \" \" + PREFIX_MODULE_CODE + \"CS2113\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteListCommand \u003d parser.parse(args2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        result \u003d noteListCommand.execute(new ModelManager(), new CommandHistory());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertNotEquals(unwantedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static void tearDown() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StudentAddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class StudentAddCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        // TBC"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        /*assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new StudentAddCommand(expectedPerson));*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        /*assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new StudentAddCommand(expectedPerson));*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        /*assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new StudentAddCommand(expectedPerson));*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        /*assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new StudentAddCommand(expectedPerson));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        /*assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new StudentAddCommand(expectedPerson));*/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        /*assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new StudentAddCommand(expectedPersonMultipleTags));*/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        // TBC"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       /* assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                new StudentAddCommand(expectedPerson));*/"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        // TBC"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       /* assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);*/"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        /*assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentAddCommand.MESSAGE_USAGE));*/"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    //CHECKSTYLE.ON"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 30,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/model/classroom/ClassNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.model.classroom;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ClassName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void constructor_invalidClassName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ClassName(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void isValidClassName(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // null className"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ClassName.isValidClassName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // invalid className"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(ClassName.isValidClassName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(ClassName.isValidClassName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(ClassName.isValidClassName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(ClassName.isValidClassName(\"t16*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(ClassName.isValidClassName(\"t161\")); // contains more than 3 alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // valid className"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(ClassName.isValidClassName(\"T16\")); // alphanumeric"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(ClassName.isValidClassName(\"ALL\")); // letters only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(ClassName.isValidClassName(\"1\")); // single number only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(ClassName.isValidClassName(\"999\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassName className \u003d new ClassName(\"T16\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(className.equals(className));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassName classNameCopy \u003d new ClassName(className.getValue());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(className.equals(classNameCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(className.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(className.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // different classname -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        ClassName differentClassName \u003d new ClassName(\"16T\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(className.equals(differentClassName));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/classroom/ClassroomTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.model.classroom;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.testutil.TypicalClassrooms.T16;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.testutil.TypicalClassrooms.T17;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.testutil.ClassroomBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassroomTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void isSameClassroom() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(T16.isSameClassroom(T16));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(T16.isSameClassroom(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        //same classname and module, different enrollment size -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Classroom editedT16 \u003d new ClassroomBuilder(T16).withEnrollment(\"21\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(T16.isSameClassroom(editedT16));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        //same classname and different module -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        editedT16 \u003d new ClassroomBuilder(T16).withModuleCode(\"CG1112\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(T16.isSameClassroom(editedT16));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        //different classname"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        editedT16 \u003d new ClassroomBuilder(T16).withClassName(\"T17\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(T16.isSameClassroom(editedT16));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Classroom classRoomCopy \u003d new ClassroomBuilder(T16).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(T16.equals(classRoomCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(T16.equals(T16));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(T16.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(T16.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // different classroom -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(T16.equals(T17));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // different maxEnrollment -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Classroom editedT16 \u003d new ClassroomBuilder(T16).withEnrollment(\"21\").build();;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(T16.equals(editedT16));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // different className -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        editedT16 \u003d new ClassroomBuilder(T16).withClassName(\"T17\").build();;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(T16.equals(editedT16));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // different moduleCode -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        editedT16 \u003d new ClassroomBuilder(T16).withModuleCode(\"CG1112\").build();;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(T16.equals(editedT16));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/classroom/EnrollmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.model.classroom;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class EnrollmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Enrollment(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void constructor_invalidCEnrollment_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Enrollment(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void isValidEnrollment(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // null maxEnrollment"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Enrollment.isValidEnrollment(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // invalid maxEnrollment"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(Enrollment.isValidEnrollment(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(Enrollment.isValidEnrollment(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(Enrollment.isValidEnrollment(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(Enrollment.isValidEnrollment(\"22*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(Enrollment.isValidEnrollment(\"426\")); // more than the maximum allowed enrollment size"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(Enrollment.isValidEnrollment(\"0\")); // maxEnrollment size cannot be 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(Enrollment.isValidEnrollment(\"000\")); // enrollment size cannot be 000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(Enrollment.isValidEnrollment(\"001\")); // enrollment size cannot be 001"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(Enrollment.isValidEnrollment(\"1O9\")); // contains letter O instead of 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // valid maxEnrollment"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(Enrollment.isValidEnrollment(\"1\")); // numeric - mnimum enrollment sized allowed (1)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(Enrollment.isValidEnrollment(\"2\")); // another single number"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(Enrollment.isValidEnrollment(\"69\")); // double number only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(Enrollment.isValidEnrollment(\"222\")); // triple numbers only"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(Enrollment.isValidEnrollment(\"425\")); // maximum - enrollmentsize allowed (425)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Enrollment maxEnrollment \u003d new Enrollment(\"20\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(maxEnrollment.equals(maxEnrollment));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Enrollment maxEnrollmentCopy \u003d new Enrollment(maxEnrollment.getValue());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertTrue(maxEnrollment.equals(maxEnrollmentCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(maxEnrollment.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(maxEnrollment.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        // different maxEnrollment -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        Enrollment differentMaxEnrollment \u003d new Enrollment(\"19\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        assertFalse(maxEnrollment.equals(differentMaxEnrollment));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleCodeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // invalid module codes"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\"));  // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"  \"));  // whitespace only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"cs2113\"));  // lowercase in front"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"CS2113t\"));  // lowercase behind"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"CS2ii3\"));  // letters instead of numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"CS01134\"));  // first digit is 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\" CS2113\"));  // extra space in front"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"CS2113 \"));  // extra space at the end"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"iloveCS2113\"));  // contains extra characters in front"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"CS21134life\"));  // contains extra characters behind"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // valid module codes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2113\"));  // module code with 2 letters and no optional char"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2113T\"));  // optional character at the end"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"GEQ1000\"));  // 3-letter module code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"GEQ1000X\"));  // 3-letter code with optional character"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void toString_outputsModuleCodeAsString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        final String validModuleCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        final ModuleCode validModuleCodeObj \u003d new ModuleCode(validModuleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertEquals(validModuleCodeObj.toString(), validModuleCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        String codeCs2113 \u003d \"CS2113\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        String codeGeq1000 \u003d \"GEQ1000\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleCode cs2113 \u003d new ModuleCode(codeCs2113);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleCode geq1000 \u003d new ModuleCode(codeGeq1000);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(cs2113.equals(cs2113));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // same module code -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleCode cs2113Copy \u003d new ModuleCode(codeCs2113);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(cs2113.equals(cs2113Copy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(cs2113.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(cs2113.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // different module codes -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(cs2113.equals(geq1000));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "public class ModuleNameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void constructor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ModuleName(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void constructor_invalidModuleName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        String invalidModuleName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ModuleName(invalidModuleName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void isValidModuleName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ModuleName.isValidModuleName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // invalid module names"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\" Software\")); // starting with a space"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"^\")); // invalid symbols only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\" Software+\")); // contains invalid symbols"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"\u0026Software\")); // accepted symbol as the first char"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // valid module names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Asking Questions\")); // letters only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Physics 2\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Software \u0026 OOP\")); // contains ampersand (\u0026)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Object-oriented\")); // contains hyphen (-)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"linear algebra\")); // all lowercase"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Software Engineering \u0026 Object-Oriented Programming\")); // long"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void toString_outputsModuleNameAsString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        final String validModuleName \u003d \"Quantitative Reasoning\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        final ModuleName validModuleNameObj \u003d new ModuleName(validModuleName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertEquals(validModuleNameObj.toString(), validModuleName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        String askingQuestions \u003d \"Asking Questions\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        String linearAlgebra \u003d \"Linear Algebra\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleName askingQuestionsName \u003d new ModuleName(askingQuestions);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleName linearAlgebraName \u003d new ModuleName(linearAlgebra);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(askingQuestionsName.equals(askingQuestionsName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // same module code -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        ModuleName askingQuestionsNameCopy \u003d new ModuleName(askingQuestions);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertTrue(askingQuestionsName.equals(askingQuestionsNameCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(askingQuestionsName.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(askingQuestionsName.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harriuscai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        // different module codes -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "        assertFalse(askingQuestionsName.equals(linearAlgebraName));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harriuscai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harriuscai": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/NoteManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Contains tests for NoteManager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private static NoteManager noteManager \u003d NoteManager.getInstance();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteBuilder note1 \u003d new NoteBuilder("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"CS1010\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"First note\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"C\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteBuilder note2 \u003d new NoteBuilder("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"CS2040C\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Second note\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"C++\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private NoteBuilder note3 \u003d new NoteBuilder("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"CS2113\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Third note\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "            \"Java\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void getNoteAt_outOfBoundsIndex_returnsNull() throws NullPointerException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note1.build()); // at index 0"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note2.build()); // at index 1"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.addNote(note3.build()); // at index 2"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        int index \u003d 3; // try to access index 3"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        Note note \u003d noteManager.getNoteAt(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        assertNull(note);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static void tearDown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.clearNotes();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        noteManager.saveNoteList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.storage.adapter.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.storage.adapter.XmlAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final String VALID_CC \u003d \"CEG1\"; // TO BE CHANGED"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final String VALID_MATRIC_NO \u003d \"A1\"; // TO BE CHANGED"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CC, VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CC, VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CC, VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CC, VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CC, VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS, VALID_CC, VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS, VALID_CC, VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS, VALID_CC, VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_CC, VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 14,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        //TBC"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "      /*  XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        //TBC"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       /* XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        dataFromFile.toModelType();*/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 6,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClassroomBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.ClassName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Enrollment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * A utility class to help with building Classroom objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class ClassroomBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String DEFAULT_CLASSNAME \u003d \"T16\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String DEFAULT_MODULECODE \u003d \"CG1111\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final String DEFAULT_ENROLLMENT \u003d \"20\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private ClassName className;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private Enrollment maxEnrollment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassroomBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        className \u003d new ClassName(DEFAULT_CLASSNAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        moduleCode \u003d new ModuleCode(DEFAULT_MODULECODE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        maxEnrollment \u003d new Enrollment(DEFAULT_ENROLLMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Initializes the ClassroomBuilder with the data of {@code ClassroomToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassroomBuilder(Classroom ClassroomToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        className \u003d ClassroomToCopy.getClassName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        moduleCode \u003d ClassroomToCopy.getModuleCode();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        maxEnrollment \u003d ClassroomToCopy.getMaxEnrollment();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Sets the {@code ClassName} of the {@code Classroom} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassroomBuilder withClassName(String className) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.className \u003d new ClassName(className);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Classroom} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassroomBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     * Sets the {@code Enrollment} of the {@code Classroom} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public ClassroomBuilder withEnrollment(String maxEnrollment) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        this.maxEnrollment \u003d new Enrollment(maxEnrollment);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public Classroom build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new Classroom(className, moduleCode, maxEnrollment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CourseBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.FacultyName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class CourseBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String DEFAULT_COURSE_NAME \u003d \"Computer Science\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String DEFAULT_COURSE_CODE \u003d \"CS\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String DEFAULT_FACULTY_NAME \u003d \"School of Computing\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private CourseName courseName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private CourseCode courseCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private FacultyName facultyName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CourseBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        courseName \u003d new CourseName(DEFAULT_COURSE_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        courseCode \u003d new CourseCode(DEFAULT_COURSE_CODE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        facultyName \u003d new FacultyName(DEFAULT_FACULTY_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public Course build() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new Course(courseCode, courseName, facultyName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public CourseBuilder withCourseName(String courseName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseName \u003d new CourseName(courseName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GradebookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "import seedu.address.model.gradebook.Gradebook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "public class GradebookBuilder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS2113\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final String DEFAULT_GRADEBOOK_COMPONENT_NAME \u003d \"Finals\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final int DEFAULT_GRADEBOOK_MAX_MARKS \u003d 20;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public static final int DEFAULT_GRADEBOOK_WEIGHTAGE \u003d 10;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private String gradebookComponentName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private int gradebookMaxMarks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    private int gradebookWeightage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public GradebookBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        moduleCode \u003d DEFAULT_MODULE_CODE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookComponentName \u003d DEFAULT_GRADEBOOK_COMPONENT_NAME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookMaxMarks \u003d DEFAULT_GRADEBOOK_MAX_MARKS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookWeightage \u003d DEFAULT_GRADEBOOK_WEIGHTAGE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Initializes the GradebookBuilder with the data of {@code gradebookToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public GradebookBuilder(Gradebook gradebookToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        moduleCode \u003d gradebookToCopy.getModuleCode();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookComponentName \u003d gradebookToCopy.getGradeComponentName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookMaxMarks \u003d gradebookToCopy.getGradeComponentMaxMarks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        gradebookWeightage \u003d gradebookToCopy.getGradeComponentWeightage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     * Initializes the GradebookBuilder with given parameters."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public GradebookBuilder(String moduleCode,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                            String gradebookComponentName,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                            int gradebookMaxMarks,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                            int gradebookWeightage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookComponentName \u003d gradebookComponentName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookMaxMarks \u003d gradebookMaxMarks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookWeightage \u003d gradebookWeightage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public String getGradebookComponentName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return gradebookComponentName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void setGradebookComponentName(String gradebookComponentName) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookComponentName \u003d gradebookComponentName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public int getGradebookMaxMarks() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return this.gradebookMaxMarks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void setGradebookMaxMarks(int gradebookMaxMarks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookMaxMarks \u003d gradebookMaxMarks;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public int getGradebookWeightage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return gradebookWeightage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public void setGradebookWeightage(int gradebookWeightage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        this.gradebookWeightage \u003d gradebookWeightage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    public Gradebook build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "        return new Gradebook("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                moduleCode,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookComponentName,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookMaxMarks,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "                gradebookWeightage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristyxxnana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristyxxnana": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NoteBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " * Creates dummy notes for testing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "public class NoteBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS2113\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"My note\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"21/12/2113\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"10:00 AM\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"22/12/2113\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"10:00 AM\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"National University of Singapore\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public static final String DEFAULT_NOTE_TEXT \u003d \"CS2113 Rocks!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    private String noteText;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Empty constructor for NoteBuilder that initializes the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * note with default values."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.moduleCode \u003d DEFAULT_MODULE_CODE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.title \u003d DEFAULT_TITLE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startDate \u003d DEFAULT_START_DATE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startTime \u003d DEFAULT_START_TIME;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endDate \u003d DEFAULT_END_DATE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endTime \u003d DEFAULT_END_TIME;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.location \u003d DEFAULT_LOCATION;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.noteText \u003d DEFAULT_NOTE_TEXT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Initializes the note with given parameters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteBuilder(String moduleCode,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                       String title,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                       String startDate,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                       String startTime,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                       String endDate,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                       String endTime,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                       String location,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                       String noteText) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.noteText \u003d noteText;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Initializes the note with the data from {@code noteToCopy}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public NoteBuilder(Note noteToCopy) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.moduleCode \u003d noteToCopy.getModuleCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.title \u003d noteToCopy.getTitle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startDate \u003d noteToCopy.getStartDate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startTime \u003d noteToCopy.getStartTime();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endDate \u003d noteToCopy.getEndDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endTime \u003d noteToCopy.getEndTime();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.location \u003d noteToCopy.getLocation();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.noteText \u003d noteToCopy.getNoteText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setStartDate(String startDate) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setStartTime(String startTime) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.endDate;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setEndDate(String endDate) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setEndTime(String endTime) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.location;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public String getNoteText() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return this.noteText;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public void setNoteText(String noteText) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        this.noteText \u003d noteText;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * Creates a note from the data in the NoteBuilder object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     * @return Note object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    public Note build() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        return new Note("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                moduleCode,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                title,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                startDate,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                startTime,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                endDate,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                endTime,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                location,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "                noteText"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jomcruz93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jomcruz93": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.course.CourseCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String DEFAULT_MATRIC_NO \u003d \"A0168347B\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public static final String DEFAULT_COURSE_CODE \u003d \"CEG\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private CourseCode courseCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private MatricNo matricNo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        courseCode \u003d new CourseCode(DEFAULT_COURSE_CODE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        matricNo \u003d new MatricNo(DEFAULT_MATRIC_NO);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        courseCode \u003d personToCopy.getCourseCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        matricNo \u003d personToCopy.getMatricNo();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Sets the {@code CourseCocde} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public PersonBuilder withCourseCode(String courseCode) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.courseCode \u003d new CourseCode(courseCode);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Sets the {@code MatricNo} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public PersonBuilder withMatricNo(String matricNo) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        this.matricNo \u003d new MatricNo(matricNo);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return new Person(name, phone, email, address, tags, courseCode, matricNo);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 28,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        return StudentAddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 3,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalClassrooms.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " * A utility class containing a list of {@code Classroom} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "public class TypicalClassrooms {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final Classroom T16 \u003d new ClassroomBuilder().withClassName(\"T16\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            .withModuleCode(\"CG1111\").withEnrollment(\"20\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final Classroom T17 \u003d new ClassroomBuilder().withClassName(\"T17\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            .withModuleCode(\"CG1111\").withEnrollment(\"17\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final Classroom T18 \u003d new ClassroomBuilder().withClassName(\"T18\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            .withModuleCode(\"CG1112\").withEnrollment(\"18\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final Classroom D11 \u003d new ClassroomBuilder().withClassName(\"D11\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            .withModuleCode(\"GEQ1000\").withEnrollment(\"30\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static final Classroom ALL \u003d new ClassroomBuilder().withClassName(\"ALL\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "            .withModuleCode(\"CFG1000\").withEnrollment(\"425\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    private TypicalClassrooms() {} // prevents instantiation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    public static List\u003cClassroom\u003e getTypicalClassrooms() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(T16, T17, T18, D11, ALL));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhicaizack"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhicaizack": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            .withTags(\"friends\").withCourseCode(\"CEG\").withMatricNo(\"A0168347B\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withCourseCode(\"CEG\").withMatricNo(\"A0168347B\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withCourseCode(\"CEG\").withMatricNo(\"A0168347B\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").withCourseCode(\"CEG\").withMatricNo(\"A0168347B\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withCourseCode(\"CEG\").withMatricNo(\"A0168347B\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withCourseCode(\"CEG\").withMatricNo(\"A0168347B\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withCourseCode(\"CEG\").withMatricNo(\"A0168347B\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withCourseCode(\"CEG\").withMatricNo(\"A0168347B\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withCourseCode(\"CEG\").withMatricNo(\"A0168347B\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withMatricNo(VALID_TAG_MATRIC_NO).withCourseCode(VALID_TAG_CC).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withMatricNo(VALID_TAG_MATRIC_NO).withCourseCode(VALID_TAG_CC)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 13,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d StudentListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "      // TBC  assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 3,
      "-": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       /* ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       //TBC"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");*/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 3,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(NEW_RESULT_EVENT_STUB);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertEquals(NEW_RESULT_EVENT_STUB.message + \"\\n\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentFindCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentListCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        executeCommand(StudentListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        executeCommand(StudentFindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        // assertEquals(expectedResultMessage, getResultDisplay().getText()); TO BE REVISED"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertEquals(Messages.MESSAGE_WELCOME + \"\\n\", getResultDisplay().getText()); // TO BE REVISED"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 7,
      "-": 286
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "      /*  TBC final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: undo clearing address book -\u003e original address book restored *//*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: redo clearing address book -\u003e cleared *//*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: selects first card in person list and clears address book -\u003e cleared and no card selected *//*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: filters the person list before clearing -\u003e entire address book cleared *//*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: clear empty address book -\u003e cleared *//*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: mixed case command word -\u003e rejected *//*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);*/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       /* executeCommand(command); TBC"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "      //  assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();*/"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 14,
      "-": 88
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": " /*       showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandSuccess(index);*/"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "      /*  showAllPersons();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);*/"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "            Index expectedSelectedCardIndex) {/* TBC"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();*/"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "       /* Model expectedModel \u003d getModel(); TBC"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertStatusBarUnchanged();*/"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 8,
      "-": 185
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentEditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        //TBC"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- *//*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String command \u003d \" \" + StudentEditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: undo editing the last person in the list -\u003e last person restored *//*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: redo editing the last person in the list -\u003e last person edited again *//*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: edit a person with new values same as existing values -\u003e edited *//*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited *//*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: clear tags -\u003e cleared *//*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* ------------------ Performing edit operation while a filtered list is being shown ------------------------ *//*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited *//*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(StudentEditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* --------------------- Performing edit operation while a person card is selected -------------------------- *//*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* --------------------------------- Performing invalid edit operation -------------------------------------- *//*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid index (0) -\u003e rejected *//*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(StudentEditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, StudentEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid index (-1) -\u003e rejected *//*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(StudentEditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, StudentEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid index (size + 1) -\u003e rejected *//*"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(StudentEditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: missing index -\u003e rejected *//*"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(StudentEditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, StudentEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: missing all fields -\u003e rejected *//*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(StudentEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                StudentEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid name -\u003e rejected *//*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(StudentEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid phone -\u003e rejected *//*"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(StudentEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid email -\u003e rejected *//*"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(StudentEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid address -\u003e rejected *//*"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(StudentEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid tag -\u003e rejected *//*"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(StudentEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: edit a person with new values same as another person\u0027s values -\u003e rejected *//*"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, StudentEditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected *//*"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, StudentEditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected *//*"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, StudentEditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected *//*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, StudentEditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected *//*"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentEditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, StudentEditCommand.MESSAGE_DUPLICATE_PERSON);*/"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code StudentEditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "                String.format(StudentEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 71,
      "-": 195
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentFindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String command \u003d \"   \" + StudentFindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     /*   showAllPersons();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertSelectedCardDeselected();*/"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentFindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 21,
      "-": 174
    }
  },
  {
    "path": "src/test/java/systemtests/StudentAddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "import seedu.address.logic.commands.StudentAddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "public class StudentAddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "    public void add() {/*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        //TBC"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- *//*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String command \u003d \"   \" + StudentAddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: undo adding Amy to the list -\u003e Amy deleted *//*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: redo adding Amy to the list -\u003e Amy added again *//*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: add a person with all fields same as another person in the address book except name -\u003e added *//*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentAddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: add to empty address book -\u003e added *//*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: add a person with tags, command with parameters in random order -\u003e added *//*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentAddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: add a person, missing tags -\u003e added *//*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* -------------------------- Perform add operation on the shown filtered list ------------------------------ *//*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: filters the person list before adding -\u003e added *//*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* ------------------------ Perform add operation while a person card is selected --------------------------- *//*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged *//*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* ----------------------------------- Perform invalid add operations --------------------------------------- *//*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: add a duplicate person -\u003e rejected *//*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, StudentAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: add a duplicate person except with different phone -\u003e rejected *//*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, StudentAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: add a duplicate person except with different email -\u003e rejected *//*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, StudentAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: add a duplicate person except with different address -\u003e rejected *//*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, StudentAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: add a duplicate person except with different tags -\u003e rejected *//*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, StudentAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: missing name -\u003e rejected *//*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentAddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: missing phone -\u003e rejected *//*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentAddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: missing email -\u003e rejected *//*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentAddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: missing address -\u003e rejected *//*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentAddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid keyword -\u003e rejected *//*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid name -\u003e rejected *//*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentAddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid phone -\u003e rejected *//*"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentAddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid email -\u003e rejected *//*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentAddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid address -\u003e rejected *//*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentAddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        *//* Case: invalid tag -\u003e rejected *//*"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        command \u003d StudentAddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);*/"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * Executes the {@code StudentAddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code StudentAddCommand} with the details of"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @see StudentAddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "        String expectedResultMessage \u003d String.format(StudentAddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "m-aslam-mj2"
        },
        "content": "     * @see StudentAddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m-aslam-mj2": 62,
      "-": 148
    }
  }
]
